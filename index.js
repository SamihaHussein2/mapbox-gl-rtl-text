(function(){
var Module = {
  TOTAL_MEMORY: 8*1024*1024,
  TOTAL_STACK: 2*1024*1024 ,
  preRun: [],
  postRun: [],
  print: function( text ) {
    console.log(text);
  },
  printErr: function(text) {
    text = Array.prototype.slice.call(arguments).join(' ');
    if ( text.indexOf( 'pre-main prep time' ) >= 0 ) {
      return;
    }
    console.error(text);
  }
};
var Module;
if (!Module)
    Module = (typeof Module !== 'undefined' ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
    if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
    }
}
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
    if (!Module['print'])
        Module['print'] = function print(x) {
            process['stdout'].write(x + '\n');
        };
    if (!Module['printErr'])
        Module['printErr'] = function printErr(x) {
            process['stderr'].write(x + '\n');
        };
    var nodeFS = require('fs');
    var nodePath = require('path');
    Module['read'] = function read(filename, binary) {
        filename = nodePath['normalize'](filename);
        var ret = nodeFS['readFileSync'](filename);
        if (!ret && filename != nodePath['resolve'](filename)) {
            filename = path.join(__dirname, '..', 'src', filename);
            ret = nodeFS['readFileSync'](filename);
        }
        if (ret && !binary)
            ret = ret.toString();
        return ret;
    };
    Module['readBinary'] = function readBinary(filename) {
        var ret = Module['read'](filename, true);
        if (!ret.buffer) {
            ret = new Uint8Array(ret);
        }
        return ret;
    };
    Module['load'] = function load(f) {
        globalEval(read(f));
    };
    if (!Module['thisProgram']) {
        if (process['argv'].length > 1) {
            Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
        } else {
            Module['thisProgram'] = 'unknown-program';
        }
    }
    Module['arguments'] = process['argv'].slice(2);
    if (typeof module !== 'undefined') {
        module['exports'] = Module;
    }
    process['on']('uncaughtException', function (ex) {
        if (!(ex instanceof ExitStatus)) {
            throw ex;
        }
    });
    Module['inspect'] = function () {
        return '[Emscripten Module object]';
    };
} else if (ENVIRONMENT_IS_SHELL) {
    if (!Module['print'])
        Module['print'] = print;
    if (typeof printErr != 'undefined')
        Module['printErr'] = printErr;
    if (typeof read != 'undefined') {
        Module['read'] = read;
    } else {
        Module['read'] = function read() {
            throw 'no read() available (jsc?)';
        };
    }
    Module['readBinary'] = function readBinary(f) {
        if (typeof readbuffer === 'function') {
            return new Uint8Array(readbuffer(f));
        }
        var data = read(f, 'binary');
        return data;
    };
    if (typeof scriptArgs != 'undefined') {
        Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
    }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module['read'] = function read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.send(null);
        return xhr.responseText;
    };
    if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
    }
    if (typeof console !== 'undefined') {
        if (!Module['print'])
            Module['print'] = function print(x) {
                console.log(x);
            };
        if (!Module['printErr'])
            Module['printErr'] = function printErr(x) {
                console.log(x);
            };
    } else {
        var TRY_USE_DUMP = false;
        if (!Module['print'])
            Module['print'] = TRY_USE_DUMP && typeof dump !== 'undefined' ? function (x) {
                dump(x);
            } : function (x) {
            };
    }
    if (ENVIRONMENT_IS_WORKER) {
        Module['load'] = importScripts;
    }
    if (typeof Module['setWindowTitle'] === 'undefined') {
        Module['setWindowTitle'] = function (title) {
            document.title = title;
        };
    }
} else {
    throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
    eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
    Module['load'] = function load(f) {
        globalEval(Module['read'](f));
    };
}
if (!Module['print']) {
    Module['print'] = function () {
    };
}
if (!Module['printErr']) {
    Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
    Module['arguments'] = [];
}
if (!Module['thisProgram']) {
    Module['thisProgram'] = './this.program';
}
Module.print = Module['print'];
Module.printErr = Module['printErr'];
Module['preRun'] = [];
Module['postRun'] = [];
for (var key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
    }
}
var Runtime = {
    setTempRet0: function (value) {
        tempRet0 = value;
    },
    getTempRet0: function () {
        return tempRet0;
    },
    stackSave: function () {
        return STACKTOP;
    },
    stackRestore: function (stackTop) {
        STACKTOP = stackTop;
    },
    getNativeTypeSize: function (type) {
        switch (type) {
        case 'i1':
        case 'i8':
            return 1;
        case 'i16':
            return 2;
        case 'i32':
            return 4;
        case 'i64':
            return 8;
        case 'float':
            return 4;
        case 'double':
            return 8;
        default: {
                if (type[type.length - 1] === '*') {
                    return Runtime.QUANTUM_SIZE;
                } else if (type[0] === 'i') {
                    var bits = parseInt(type.substr(1));
                    return bits / 8;
                } else {
                    return 0;
                }
            }
        }
    },
    getNativeFieldSize: function (type) {
        return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
    },
    STACK_ALIGN: 16,
    prepVararg: function (ptr, type) {
        if (type === 'double' || type === 'i64') {
            if (ptr & 7) {
                ptr += 4;
            }
        } else {
        }
        return ptr;
    },
    getAlignSize: function (type, size, vararg) {
        if (!vararg && (type == 'i64' || type == 'double'))
            return 8;
        if (!type)
            return Math.min(size, 8);
        return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
    },
    dynCall: function (sig, ptr, args) {
        if (args && args.length) {
            if (!args.splice)
                args = Array.prototype.slice.call(args);
            args.splice(0, 0, ptr);
            return Module['dynCall_' + sig].apply(null, args);
        } else {
            return Module['dynCall_' + sig].call(null, ptr);
        }
    },
    functionPointers: [],
    addFunction: function (func) {
        for (var i = 0; i < Runtime.functionPointers.length; i++) {
            if (!Runtime.functionPointers[i]) {
                Runtime.functionPointers[i] = func;
                return 2 * (1 + i);
            }
        }
        throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
    },
    removeFunction: function (index) {
        Runtime.functionPointers[(index - 2) / 2] = null;
    },
    warnOnce: function (text) {
        if (!Runtime.warnOnce.shown)
            Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
            Runtime.warnOnce.shown[text] = 1;
            Module.printErr(text);
        }
    },
    funcWrappers: {},
    getFuncWrapper: function (func, sig) {
        if (!Runtime.funcWrappers[sig]) {
            Runtime.funcWrappers[sig] = {};
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func]) {
            sigCache[func] = function dynCall_wrapper() {
                return Runtime.dynCall(sig, func, arguments);
            };
        }
        return sigCache[func];
    },
    getCompilerSetting: function (name) {
        throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
    },
    stackAlloc: function (size) {
        var ret = STACKTOP;
        STACKTOP = STACKTOP + size | 0;
        STACKTOP = STACKTOP + 15 & -16;
        return ret;
    },
    staticAlloc: function (size) {
        var ret = STATICTOP;
        STATICTOP = STATICTOP + size | 0;
        STATICTOP = STATICTOP + 15 & -16;
        return ret;
    },
    dynamicAlloc: function (size) {
        var ret = DYNAMICTOP;
        DYNAMICTOP = DYNAMICTOP + size | 0;
        DYNAMICTOP = DYNAMICTOP + 15 & -16;
        if (DYNAMICTOP >= TOTAL_MEMORY) {
            var success = enlargeMemory();
            if (!success) {
                DYNAMICTOP = ret;
                return 0;
            }
        }
        return ret;
    },
    alignMemory: function (size, quantum) {
        var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
        return ret;
    },
    makeBigInt: function (low, high, unsigned) {
        var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
        return ret;
    },
    GLOBAL_BASE: 8,
    QUANTUM_SIZE: 4,
    __dummy__: 0
};
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert_em(condition, text) {
    if (!condition) {
        abort('Assertion failed: ' + text);
    }
}
var globalScope = this;
function getCFunc(ident) {
    var func = Module['_' + ident];
    if (!func) {
        try {
            func = eval('_' + ident);
        } catch (e) {
        }
    }
    return func;
}
var cwrap, ccall;
(function () {
    var JSfuncs = {
        'stackSave': function () {
            Runtime.stackSave();
        },
        'stackRestore': function () {
            Runtime.stackRestore();
        },
        'arrayToC': function (arr) {
            var ret = Runtime.stackAlloc(arr.length);
            writeArrayToMemory(arr, ret);
            return ret;
        },
        'stringToC': function (str) {
            var ret = 0;
            if (str !== null && str !== undefined && str !== 0) {
                ret = Runtime.stackAlloc((str.length << 2) + 1);
                writeStringToMemory(str, ret);
            }
            return ret;
        }
    };
    var toC = {
        'string': JSfuncs['stringToC'],
        'array': JSfuncs['arrayToC']
    };
    ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
            for (var i = 0; i < args.length; i++) {
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0)
                        stack = Runtime.stackSave();
                    cArgs[i] = converter(args[i]);
                } else {
                    cArgs[i] = args[i];
                }
            }
        }
        var ret = func.apply(null, cArgs);
        if (returnType === 'string')
            ret = Pointer_stringify(ret);
        if (stack !== 0) {
            if (opts && opts.async) {
                EmterpreterAsync.asyncFinalizers.push(function () {
                    Runtime.stackRestore(stack);
                });
                return;
            }
            Runtime.stackRestore(stack);
        }
        return ret;
    };
    var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
    function parseJSFunc(jsfunc) {
        var parsed = jsfunc.toString().match(sourceRegex).slice(1);
        return {
            arguments: parsed[0],
            body: parsed[1],
            returnValue: parsed[2]
        };
    }
    var JSsource = {};
    for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
            JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
    }
    cwrap = function cwrap(ident, returnType, argTypes) {
        argTypes = argTypes || [];
        var cfunc = getCFunc(ident);
        var numericArgs = argTypes.every(function (type) {
            return type === 'number';
        });
        var numericRet = returnType !== 'string';
        if (numericRet && numericArgs) {
            return cfunc;
        }
        var argNames = argTypes.map(function (x, i) {
            return '$' + i;
        });
        var funcstr = '(function(' + argNames.join(',') + ') {';
        var nargs = argTypes.length;
        if (!numericArgs) {
            funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
            for (var i = 0; i < nargs; i++) {
                var arg = argNames[i], type = argTypes[i];
                if (type === 'number')
                    continue;
                var convertCode = JSsource[type + 'ToC'];
                funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
                funcstr += convertCode.body + ';';
                funcstr += arg + '=' + convertCode.returnValue + ';';
            }
        }
        var cfuncname = parseJSFunc(function () {
            return cfunc;
        }).returnValue;
        funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
        if (!numericRet) {
            var strgfy = parseJSFunc(function () {
                return Pointer_stringify;
            }).returnValue;
            funcstr += 'ret = ' + strgfy + '(ret);';
        }
        if (!numericArgs) {
            funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
        }
        funcstr += 'return ret})';
        return eval(funcstr);
    };
}());
Module['ccall'] = ccall;
function setValue(ptr, value, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*')
        type = 'i32';
    switch (type) {
    case 'i1':
        HEAP8[ptr >> 0] = value;
        break;
    case 'i8':
        HEAP8[ptr >> 0] = value;
        break;
    case 'i16':
        HEAP16[ptr >> 1] = value;
        break;
    case 'i32':
        HEAP32[ptr >> 2] = value;
        break;
    case 'i64':
        tempI64 = [
            value >>> 0,
            (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)
        ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
        break;
    case 'float':
        HEAPF32[ptr >> 2] = value;
        break;
    case 'double':
        HEAPF64[ptr >> 3] = value;
        break;
    default:
        abort('invalid type for setValue: ' + type);
    }
}
function getValue(ptr, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*')
        type = 'i32';
    switch (type) {
    case 'i1':
        return HEAP8[ptr >> 0];
    case 'i8':
        return HEAP8[ptr >> 0];
    case 'i16':
        return HEAP16[ptr >> 1];
    case 'i32':
        return HEAP32[ptr >> 2];
    case 'i64':
        return HEAP32[ptr >> 2];
    case 'float':
        return HEAPF32[ptr >> 2];
    case 'double':
        return HEAPF64[ptr >> 3];
    default:
        abort('invalid type for setValue: ' + type);
    }
    return null;
}
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === 'number') {
        zeroinit = true;
        size = slab;
    } else {
        zeroinit = false;
        size = slab.length;
    }
    var singleType = typeof types === 'string' ? types : null;
    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr;
    } else {
        ret = [
            _malloc,
            Runtime.stackAlloc,
            Runtime.staticAlloc,
            Runtime.dynamicAlloc
        ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
    }
    if (zeroinit) {
        var ptr = ret, stop;
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[ptr >> 2] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[ptr++ >> 0] = 0;
        }
        return ret;
    }
    if (singleType === 'i8') {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
        } else {
            HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
    }
    var i = 0, type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];
        if (typeof curr === 'function') {
            curr = Runtime.getFunctionIndex(curr);
        }
        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue;
        }
        if (type == 'i64')
            type = 'i32';
        setValue(ret + i, curr, type);
        if (previousType !== type) {
            typeSize = Runtime.getNativeTypeSize(type);
            previousType = type;
        }
        i += typeSize;
    }
    return ret;
}
function getMemory(size) {
    if (!staticSealed)
        return Runtime.staticAlloc(size);
    if (typeof _sbrk !== 'undefined' && !_sbrk.called || !runtimeInitialized)
        return Runtime.dynamicAlloc(size);
    return _malloc(size);
}
function Pointer_stringify(ptr, length) {
    if (length === 0 || !ptr)
        return '';
    var hasUtf = 0;
    var t;
    var i = 0;
    while (1) {
        t = HEAPU8[ptr + i >> 0];
        hasUtf |= t;
        if (t == 0 && !length)
            break;
        i++;
        if (length && i == length)
            break;
    }
    if (!length)
        length = i;
    var ret = '';
    if (hasUtf < 128) {
        var MAX_CHUNK = 1024;
        var curr;
        while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK;
        }
        return ret;
    }
    return Module['UTF8ToString'](ptr);
}
function AsciiToString(ptr) {
    var str = '';
    while (1) {
        var ch = HEAP8[ptr++ >> 0];
        if (!ch)
            return str;
        str += String.fromCharCode(ch);
    }
}
function stringToAscii(str, outPtr) {
    return writeAsciiToMemory(str, outPtr, false);
}
function UTF8ArrayToString(u8Array, idx) {
    var u0, u1, u2, u3, u4, u5;
    var str = '';
    while (1) {
        u0 = u8Array[idx++];
        if (!u0)
            return str;
        if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
        }
        u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
        }
        u2 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
            u3 = u8Array[idx++] & 63;
            if ((u0 & 248) == 240) {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
            } else {
                u4 = u8Array[idx++] & 63;
                if ((u0 & 252) == 248) {
                    u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
                } else {
                    u5 = u8Array[idx++] & 63;
                    u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
                }
            }
        }
        if (u0 < 65536) {
            str += String.fromCharCode(u0);
        } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
    }
}
function UTF8ToString(ptr) {
    return UTF8ArrayToString(HEAPU8, ptr);
}
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0))
        return 0;
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            if (outIdx >= endIdx)
                break;
            outU8Array[outIdx++] = u;
        } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx)
                break;
            outU8Array[outIdx++] = 192 | u >> 6;
            outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx)
                break;
            outU8Array[outIdx++] = 224 | u >> 12;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 2097151) {
            if (outIdx + 3 >= endIdx)
                break;
            outU8Array[outIdx++] = 240 | u >> 18;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 67108863) {
            if (outIdx + 4 >= endIdx)
                break;
            outU8Array[outIdx++] = 248 | u >> 24;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        } else {
            if (outIdx + 5 >= endIdx)
                break;
            outU8Array[outIdx++] = 252 | u >> 30;
            outU8Array[outIdx++] = 128 | u >> 24 & 63;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
}
function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            ++len;
        } else if (u <= 2047) {
            len += 2;
        } else if (u <= 65535) {
            len += 3;
        } else if (u <= 2097151) {
            len += 4;
        } else if (u <= 67108863) {
            len += 5;
        } else {
            len += 6;
        }
    }
    return len;
}
function UTF16ToString(ptr) {
    var i = 0;
    var str = '';
    while (1) {
        var codeUnit = HEAP16[ptr + i * 2 >> 1];
        if (codeUnit == 0)
            return str;
        ++i;
        str += String.fromCharCode(codeUnit);
    }
}
Module['UTF16ToString'] = UTF16ToString;
function stringToUTF16(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647;
    }
    if (maxBytesToWrite < 2)
        return 0;
    maxBytesToWrite -= 2;
    var startPtr = outPtr;
    var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
        var codeUnit = str.charCodeAt(i);
        HEAP16[outPtr >> 1] = codeUnit;
        outPtr += 2;
    }
    HEAP16[outPtr >> 1] = 0;
    return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;
function lengthBytesUTF16(str) {
    return str.length * 2;
}
function UTF32ToString(ptr) {
    var i = 0;
    var str = '';
    while (1) {
        var utf32 = HEAP32[ptr + i * 4 >> 2];
        if (utf32 == 0)
            return str;
        ++i;
        if (utf32 >= 65536) {
            var ch = utf32 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        } else {
            str += String.fromCharCode(utf32);
        }
    }
}
function stringToUTF32(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647;
    }
    if (maxBytesToWrite < 4)
        return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) {
            var trailSurrogate = str.charCodeAt(++i);
            codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
        }
        HEAP32[outPtr >> 2] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr)
            break;
    }
    HEAP32[outPtr >> 2] = 0;
    return outPtr - startPtr;
}
function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343)
            ++i;
        len += 4;
    }
    return len;
}
function demangle(func) {
    var hasLibcxxabi = !!Module['___cxa_demangle'];
    if (hasLibcxxabi) {
        try {
            var buf = _malloc(func.length);
            writeStringToMemory(func.substr(1), buf);
            var status = _malloc(4);
            var ret = Module['___cxa_demangle'](buf, 0, 0, status);
            if (getValue(status, 'i32') === 0 && ret) {
                return Pointer_stringify(ret);
            }
        } catch (e) {
        } finally {
            if (buf)
                _free(buf);
            if (status)
                _free(status);
            if (ret)
                _free(ret);
        }
    }
    var i = 3;
    var basicTypes = {
        'v': 'void',
        'b': 'bool',
        'c': 'char',
        's': 'short',
        'i': 'int',
        'l': 'long',
        'f': 'float',
        'd': 'double',
        'w': 'wchar_t',
        'a': 'signed char',
        'h': 'unsigned char',
        't': 'unsigned short',
        'j': 'unsigned int',
        'm': 'unsigned long',
        'x': 'long long',
        'y': 'unsigned long long',
        'z': '...'
    };
    var subs = [];
    var first = true;
    function dump(x) {
        if (x)
            Module.print(x);
        Module.print(func);
        var pre = '';
        for (var a = 0; a < i; a++)
            pre += ' ';
        Module.print(pre + '^');
    }
    function parseNested() {
        i++;
        if (func[i] === 'K')
            i++;
        var parts = [];
        while (func[i] !== 'E') {
            if (func[i] === 'S') {
                i++;
                var next = func.indexOf('_', i);
                var num = func.substring(i, next) || 0;
                parts.push(subs[num] || '?');
                i = next + 1;
                continue;
            }
            if (func[i] === 'C') {
                parts.push(parts[parts.length - 1]);
                i += 2;
                continue;
            }
            var size = parseInt(func.substr(i));
            var pre = size.toString().length;
            if (!size || !pre) {
                i--;
                break;
            }
            var curr = func.substr(i + pre, size);
            parts.push(curr);
            subs.push(curr);
            i += pre + size;
        }
        i++;
        return parts;
    }
    function parse(rawList, limit, allowVoid) {
        limit = limit || Infinity;
        var ret = '', list = [];
        function flushList() {
            return '(' + list.join(', ') + ')';
        }
        var name;
        if (func[i] === 'N') {
            name = parseNested().join('::');
            limit--;
            if (limit === 0)
                return rawList ? [name] : name;
        } else {
            if (func[i] === 'K' || first && func[i] === 'L')
                i++;
            var size = parseInt(func.substr(i));
            if (size) {
                var pre = size.toString().length;
                name = func.substr(i + pre, size);
                i += pre + size;
            }
        }
        first = false;
        if (func[i] === 'I') {
            i++;
            var iList = parse(true);
            var iRet = parse(true, 1, true);
            ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
        } else {
            ret = name;
        }
        paramLoop:
            while (i < func.length && limit-- > 0) {
                var c = func[i++];
                if (c in basicTypes) {
                    list.push(basicTypes[c]);
                } else {
                    switch (c) {
                    case 'P':
                        list.push(parse(true, 1, true)[0] + '*');
                        break;
                    case 'R':
                        list.push(parse(true, 1, true)[0] + '&');
                        break;
                    case 'L': {
                            i++;
                            var end = func.indexOf('E', i);
                            var size = end - i;
                            list.push(func.substr(i, size));
                            i += size + 2;
                            break;
                        }
                        ;
                    case 'A': {
                            var size = parseInt(func.substr(i));
                            i += size.toString().length;
                            if (func[i] !== '_')
                                throw '?';
                            i++;
                            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
                            break;
                        }
                        ;
                    case 'E':
                        break paramLoop;
                    default:
                        ret += '?' + c;
                        break paramLoop;
                    }
                }
            }
        if (!allowVoid && list.length === 1 && list[0] === 'void')
            list = [];
        if (rawList) {
            if (ret) {
                list.push(ret + '?');
            }
            return list;
        } else {
            return ret + flushList();
        }
    }
    var parsed = func;
    try {
        if (func == 'Object._main' || func == '_main') {
            return 'main()';
        }
        if (typeof func === 'number')
            func = Pointer_stringify(func);
        if (func[0] !== '_')
            return func;
        if (func[1] !== '_')
            return func;
        if (func[2] !== 'Z')
            return func;
        switch (func[3]) {
        case 'n':
            return 'operator new()';
        case 'd':
            return 'operator delete()';
        }
        parsed = parse();
    } catch (e) {
        parsed += '?';
    }
    if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
        Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
    }
    return parsed;
}
function demangleAll(text) {
    return text.replace(/__Z[\w\d_]+/g, function (x) {
        var y = demangle(x);
        return x === y ? x : x + ' [' + y + ']';
    });
}
function jsStackTrace() {
    var err = new Error();
    if (!err.stack) {
        try {
            throw new Error(0);
        } catch (e) {
            err = e;
        }
        if (!err.stack) {
            return '(no stack trace available)';
        }
    }
    return err.stack.toString();
}
function stackTrace() {
    return demangleAll(jsStackTrace());
}
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
    if (x % 4096 > 0) {
        x += 4096 - x % 4096;
    }
    return x;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function enlargeMemory() {
    var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
    var LIMIT = Math.pow(2, 31);
    if (DYNAMICTOP >= LIMIT)
        return false;
    while (TOTAL_MEMORY <= DYNAMICTOP) {
        if (TOTAL_MEMORY < LIMIT / 2) {
            TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY);
        } else {
            var last = TOTAL_MEMORY;
            TOTAL_MEMORY = alignMemoryPage((3 * TOTAL_MEMORY + LIMIT) / 4);
            if (TOTAL_MEMORY <= last)
                return false;
        }
    }
    TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16 * 1024 * 1024);
    if (TOTAL_MEMORY >= LIMIT)
        return false;
    try {
        if (ArrayBuffer.transfer) {
            buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
        } else {
            var oldHEAP8 = HEAP8;
            buffer = new ArrayBuffer(TOTAL_MEMORY);
        }
    } catch (e) {
        return false;
    }
    var success = _emscripten_replace_memory(buffer);
    if (!success)
        return false;
    Module['buffer'] = buffer;
    Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
    Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
    Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
    Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
    Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
    Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
    Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
    Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
    if (!ArrayBuffer.transfer) {
        HEAP8.set(oldHEAP8);
    }
    return true;
}
var byteLength;
try {
    byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
    byteLength(new ArrayBuffer(4));
} catch (e) {
    byteLength = function (buffer) {
        return buffer.byteLength;
    };
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
    if (totalMemory < 16 * 1024 * 1024) {
        totalMemory *= 2;
    } else {
        totalMemory += 16 * 1024 * 1024;
    }
}
totalMemory = Math.max(totalMemory, 16 * 1024 * 1024);
if (totalMemory !== TOTAL_MEMORY) {
    TOTAL_MEMORY = totalMemory;
}
var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
            callback();
            continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
            if (callback.arg === undefined) {
                Runtime.dynCall('v', func);
            } else {
                Runtime.dynCall('vi', func, [callback.arg]);
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg);
        }
    }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
    if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function')
            Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
            addOnPreRun(Module['preRun'].shift());
        }
    }
    callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
    if (runtimeInitialized)
        return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__);
    runtimeExited = true;
}
function postRun() {
    if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function')
            Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
            addOnPostRun(Module['postRun'].shift());
        }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
}
function addOnInit(cb) {
    __ATINIT__.unshift(cb);
}
function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb);
}
function addOnExit(cb) {
    __ATEXIT__.unshift(cb);
}
function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
}
function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull)
        u8array.length = numBytesWritten;
    return u8array;
}
function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
            chr &= 255;
        }
        ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
}
function writeStringToMemory(string, buffer, dontAddNull) {
    var array = intArrayFromString(string, dontAddNull);
    var i = 0;
    while (i < array.length) {
        var chr = array[i];
        HEAP8[buffer + i >> 0] = chr;
        i = i + 1;
    }
}
function writeArrayToMemory(array, buffer) {
    for (var i = 0; i < array.length; i++) {
        HEAP8[buffer++ >> 0] = array[i];
    }
}
function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
    }
    if (!dontAddNull)
        HEAP8[buffer >> 0] = 0;
}
function unSign(value, bits, ignore) {
    if (value >= 0) {
        return value;
    }
    return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
    if (value <= 0) {
        return value;
    }
    var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
    if (value >= half && (bits <= 32 || value > half)) {
        value = -2 * half + value;
    }
    return value;
}
if (!Math['imul'] || Math['imul'](4294967295, 5) !== -5)
    Math['imul'] = function imul(a, b) {
        var ah = a >>> 16;
        var al = a & 65535;
        var bh = b >>> 16;
        var bl = b & 65535;
        return al * bl + (ah * bl + al * bh << 16) | 0;
    };
Math.imul = Math['imul'];
if (!Math['clz32'])
    Math['clz32'] = function (x) {
        x = x >>> 0;
        for (var i = 0; i < 32; i++) {
            if (x & 1 << 31 - i)
                return i;
        }
        return 32;
    };
Math.clz32 = Math['clz32'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
    return id;
}
function addRunDependency(id) {
    runDependencies++;
    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }
}
function removeRunDependency(id) {
    runDependencies--;
    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }
    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
        }
    }
}
Module['preloadedImages'] = {};
Module['preloadedAudios'] = {};
var memoryInitializer = null;
var ASM_CONSTS = [];
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 72944;
__ATINIT__.push();
allocate([
    24,
    2,
    0,
    0,
    177,
    14,
    1,
    0,
    64,
    2,
    0,
    0,
    190,
    14,
    1,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    2,
    0,
    0,
    223,
    14,
    1,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    2,
    0,
    0,
    37,
    15,
    1,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    2,
    0,
    0,
    1,
    15,
    1,
    0,
    48,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    2,
    0,
    0,
    71,
    15,
    1,
    0,
    32,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    128,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    64,
    0,
    0,
    166,
    8,
    1,
    0,
    198,
    9,
    1,
    0,
    48,
    8,
    1,
    0,
    48,
    8,
    1,
    0,
    208,
    7,
    1,
    0,
    198,
    9,
    1,
    0,
    48,
    8,
    1,
    0,
    48,
    8,
    1,
    0,
    110,
    9,
    1,
    0,
    158,
    9,
    1,
    0,
    48,
    8,
    1,
    0,
    48,
    8,
    1,
    0,
    14,
    9,
    1,
    0,
    62,
    9,
    1,
    0,
    48,
    8,
    1,
    0,
    48,
    8,
    1,
    0,
    214,
    8,
    1,
    0,
    97,
    8,
    1,
    0,
    153,
    8,
    1,
    0,
    160,
    8,
    1,
    0,
    166,
    8,
    1,
    0,
    248,
    7,
    1,
    0,
    48,
    8,
    1,
    0,
    53,
    8,
    1,
    0,
    57,
    8,
    1,
    0,
    97,
    8,
    1,
    0,
    153,
    8,
    1,
    0,
    160,
    8,
    1,
    0,
    208,
    7,
    1,
    0,
    248,
    7,
    1,
    0,
    48,
    8,
    1,
    0,
    53,
    8,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    104,
    1,
    0,
    0,
    168,
    1,
    0,
    0,
    225,
    11,
    1,
    0,
    129,
    14,
    1,
    0,
    38,
    171,
    0,
    0,
    118,
    198,
    0,
    0,
    0,
    0,
    0,
    0,
    168,
    13,
    0,
    0,
    140,
    31,
    0,
    0,
    160,
    1,
    40,
    14,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    48,
    45,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    16,
    0,
    0,
    0,
    240,
    93,
    0,
    0,
    120,
    90,
    0,
    0,
    26,
    0,
    0,
    0,
    32,
    6,
    0,
    0,
    192,
    8,
    0,
    0,
    192,
    10,
    1,
    0,
    240,
    10,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    182,
    2,
    88,
    0,
    171,
    0,
    32,
    0,
    187,
    0,
    0,
    0,
    21,
    34,
    160,
    2,
    67,
    34,
    32,
    1,
    152,
    34,
    128,
    2,
    166,
    34,
    192,
    2,
    168,
    34,
    0,
    3,
    169,
    34,
    224,
    2,
    171,
    34,
    32,
    3,
    205,
    34,
    96,
    0,
    242,
    34,
    224,
    1,
    243,
    34,
    0,
    2,
    244,
    34,
    32,
    2,
    246,
    34,
    64,
    2,
    247,
    34,
    96,
    2,
    250,
    34,
    64,
    1,
    251,
    34,
    96,
    1,
    252,
    34,
    128,
    1,
    253,
    34,
    160,
    1,
    254,
    34,
    192,
    1,
    184,
    41,
    128,
    0,
    245,
    41,
    64,
    0,
    222,
    42,
    160,
    0,
    227,
    42,
    224,
    0,
    228,
    42,
    192,
    0,
    229,
    42,
    0,
    1,
    0,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    80,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    216,
    22,
    1,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    113,
    6,
    113,
    6,
    123,
    6,
    123,
    6,
    123,
    6,
    123,
    6,
    126,
    6,
    126,
    6,
    126,
    6,
    126,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    122,
    6,
    122,
    6,
    122,
    6,
    122,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    121,
    6,
    121,
    6,
    121,
    6,
    121,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    134,
    6,
    134,
    6,
    134,
    6,
    134,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    141,
    6,
    141,
    6,
    140,
    6,
    140,
    6,
    142,
    6,
    142,
    6,
    136,
    6,
    136,
    6,
    152,
    6,
    152,
    6,
    145,
    6,
    145,
    6,
    169,
    6,
    169,
    6,
    169,
    6,
    169,
    6,
    175,
    6,
    175,
    6,
    175,
    6,
    175,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    186,
    6,
    186,
    6,
    187,
    6,
    187,
    6,
    187,
    6,
    187,
    6,
    192,
    6,
    192,
    6,
    193,
    6,
    193,
    6,
    193,
    6,
    193,
    6,
    190,
    6,
    190,
    6,
    190,
    6,
    190,
    6,
    210,
    6,
    210,
    6,
    211,
    6,
    211,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    199,
    6,
    199,
    6,
    198,
    6,
    198,
    6,
    200,
    6,
    200,
    6,
    0,
    0,
    203,
    6,
    203,
    6,
    197,
    6,
    197,
    6,
    201,
    6,
    201,
    6,
    208,
    6,
    208,
    6,
    208,
    6,
    208,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    204,
    6,
    204,
    6,
    204,
    6,
    204,
    6,
    75,
    6,
    75,
    6,
    76,
    6,
    76,
    6,
    77,
    6,
    77,
    6,
    78,
    6,
    78,
    6,
    79,
    6,
    79,
    6,
    80,
    6,
    80,
    6,
    81,
    6,
    81,
    6,
    82,
    6,
    82,
    6,
    33,
    6,
    34,
    6,
    34,
    6,
    35,
    6,
    35,
    6,
    36,
    6,
    36,
    6,
    37,
    6,
    37,
    6,
    38,
    6,
    38,
    6,
    38,
    6,
    38,
    6,
    39,
    6,
    39,
    6,
    40,
    6,
    40,
    6,
    40,
    6,
    40,
    6,
    41,
    6,
    41,
    6,
    42,
    6,
    42,
    6,
    42,
    6,
    42,
    6,
    43,
    6,
    43,
    6,
    43,
    6,
    43,
    6,
    44,
    6,
    44,
    6,
    44,
    6,
    44,
    6,
    45,
    6,
    45,
    6,
    45,
    6,
    45,
    6,
    46,
    6,
    46,
    6,
    46,
    6,
    46,
    6,
    47,
    6,
    47,
    6,
    48,
    6,
    48,
    6,
    49,
    6,
    49,
    6,
    50,
    6,
    50,
    6,
    51,
    6,
    51,
    6,
    51,
    6,
    51,
    6,
    52,
    6,
    52,
    6,
    52,
    6,
    52,
    6,
    53,
    6,
    53,
    6,
    53,
    6,
    53,
    6,
    54,
    6,
    54,
    6,
    54,
    6,
    54,
    6,
    55,
    6,
    55,
    6,
    55,
    6,
    55,
    6,
    56,
    6,
    56,
    6,
    56,
    6,
    56,
    6,
    57,
    6,
    57,
    6,
    57,
    6,
    57,
    6,
    58,
    6,
    58,
    6,
    58,
    6,
    58,
    6,
    65,
    6,
    65,
    6,
    65,
    6,
    65,
    6,
    66,
    6,
    66,
    6,
    66,
    6,
    66,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    68,
    6,
    68,
    6,
    68,
    6,
    68,
    6,
    69,
    6,
    69,
    6,
    69,
    6,
    69,
    6,
    70,
    6,
    70,
    6,
    70,
    6,
    70,
    6,
    71,
    6,
    71,
    6,
    71,
    6,
    71,
    6,
    72,
    6,
    72,
    6,
    73,
    6,
    73,
    6,
    74,
    6,
    74,
    6,
    74,
    6,
    74,
    6,
    92,
    6,
    92,
    6,
    93,
    6,
    93,
    6,
    94,
    6,
    94,
    6,
    95,
    6,
    95,
    6,
    33,
    17,
    33,
    19,
    1,
    21,
    33,
    23,
    3,
    25,
    33,
    29,
    3,
    31,
    1,
    35,
    3,
    37,
    3,
    41,
    3,
    45,
    3,
    49,
    3,
    53,
    1,
    57,
    1,
    59,
    1,
    61,
    1,
    63,
    3,
    65,
    3,
    69,
    3,
    73,
    3,
    77,
    3,
    81,
    3,
    85,
    3,
    89,
    3,
    93,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    3,
    97,
    3,
    101,
    3,
    105,
    19,
    109,
    3,
    113,
    3,
    117,
    3,
    121,
    1,
    125,
    1,
    127,
    3,
    129,
    4,
    1,
    132,
    1,
    132,
    1,
    132,
    1,
    132,
    1,
    132,
    1,
    68,
    3,
    4,
    1,
    4,
    7,
    4,
    8,
    4,
    8,
    4,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    133,
    1,
    135,
    1,
    137,
    1,
    139,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    6,
    9,
    0,
    33,
    0,
    33,
    0,
    0,
    0,
    33,
    0,
    1,
    0,
    1,
    0,
    3,
    0,
    11,
    22,
    11,
    14,
    11,
    2,
    3,
    0,
    3,
    0,
    11,
    6,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    11,
    42,
    3,
    0,
    9,
    56,
    1,
    0,
    1,
    0,
    1,
    0,
    9,
    52,
    9,
    50,
    9,
    54,
    1,
    0,
    1,
    0,
    9,
    60,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    9,
    58,
    1,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    11,
    62,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    11,
    66,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    9,
    78,
    11,
    80,
    3,
    0,
    3,
    0,
    11,
    90,
    3,
    0,
    9,
    84,
    11,
    86,
    1,
    0,
    1,
    0,
    1,
    0,
    9,
    144,
    9,
    137,
    9,
    135,
    9,
    139,
    9,
    146,
    1,
    0,
    9,
    142,
    11,
    172,
    1,
    0,
    3,
    0,
    3,
    0,
    11,
    148,
    3,
    0,
    9,
    94,
    9,
    96,
    78,
    4,
    86,
    4,
    94,
    4,
    102,
    4,
    126,
    4,
    134,
    4,
    142,
    4,
    150,
    4,
    158,
    4,
    166,
    4,
    172,
    4,
    180,
    4,
    188,
    4,
    196,
    4,
    204,
    4,
    212,
    4,
    218,
    4,
    226,
    4,
    234,
    4,
    242,
    4,
    245,
    4,
    253,
    4,
    5,
    5,
    13,
    5,
    21,
    5,
    29,
    5,
    25,
    5,
    33,
    5,
    41,
    5,
    49,
    5,
    54,
    5,
    62,
    5,
    70,
    5,
    78,
    5,
    82,
    5,
    90,
    5,
    98,
    5,
    106,
    5,
    114,
    5,
    122,
    5,
    118,
    5,
    126,
    5,
    131,
    5,
    139,
    5,
    145,
    5,
    153,
    5,
    161,
    5,
    169,
    5,
    177,
    5,
    185,
    5,
    193,
    5,
    201,
    5,
    206,
    5,
    214,
    5,
    217,
    5,
    225,
    5,
    233,
    5,
    241,
    5,
    247,
    5,
    255,
    5,
    254,
    5,
    6,
    6,
    14,
    6,
    22,
    6,
    38,
    6,
    30,
    6,
    46,
    6,
    110,
    4,
    110,
    4,
    62,
    6,
    70,
    6,
    54,
    6,
    86,
    6,
    88,
    6,
    96,
    6,
    78,
    6,
    112,
    6,
    118,
    6,
    126,
    6,
    104,
    6,
    142,
    6,
    148,
    6,
    156,
    6,
    134,
    6,
    172,
    6,
    178,
    6,
    186,
    6,
    164,
    6,
    202,
    6,
    208,
    6,
    216,
    6,
    194,
    6,
    232,
    6,
    240,
    6,
    248,
    6,
    224,
    6,
    8,
    7,
    14,
    7,
    22,
    7,
    0,
    7,
    38,
    7,
    44,
    7,
    52,
    7,
    30,
    7,
    68,
    7,
    73,
    7,
    81,
    7,
    60,
    7,
    97,
    7,
    104,
    7,
    112,
    7,
    89,
    7,
    250,
    5,
    120,
    7,
    128,
    7,
    110,
    4,
    136,
    7,
    144,
    7,
    152,
    7,
    110,
    4,
    160,
    7,
    168,
    7,
    176,
    7,
    181,
    7,
    189,
    7,
    196,
    7,
    204,
    7,
    110,
    4,
    185,
    5,
    212,
    7,
    220,
    7,
    228,
    7,
    236,
    7,
    70,
    5,
    252,
    7,
    244,
    7,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    2,
    8,
    185,
    5,
    10,
    8,
    0,
    8,
    18,
    8,
    185,
    5,
    14,
    8,
    185,
    5,
    24,
    8,
    32,
    8,
    40,
    8,
    70,
    5,
    70,
    5,
    48,
    8,
    56,
    8,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    61,
    8,
    69,
    8,
    185,
    5,
    185,
    5,
    77,
    8,
    85,
    8,
    93,
    8,
    101,
    8,
    109,
    8,
    185,
    5,
    117,
    8,
    125,
    8,
    133,
    8,
    149,
    8,
    185,
    5,
    157,
    8,
    159,
    8,
    167,
    8,
    141,
    8,
    185,
    5,
    170,
    8,
    190,
    8,
    178,
    8,
    186,
    8,
    198,
    8,
    185,
    5,
    206,
    8,
    212,
    8,
    220,
    8,
    228,
    8,
    185,
    5,
    244,
    8,
    252,
    8,
    4,
    9,
    236,
    8,
    110,
    4,
    110,
    4,
    20,
    9,
    23,
    9,
    31,
    9,
    12,
    9,
    47,
    9,
    39,
    9,
    185,
    5,
    54,
    9,
    185,
    5,
    69,
    9,
    62,
    9,
    77,
    9,
    85,
    9,
    110,
    4,
    93,
    9,
    101,
    9,
    238,
    4,
    109,
    9,
    112,
    9,
    118,
    9,
    125,
    9,
    112,
    9,
    21,
    5,
    133,
    9,
    158,
    4,
    158,
    4,
    158,
    4,
    158,
    4,
    141,
    9,
    158,
    4,
    158,
    4,
    158,
    4,
    157,
    9,
    165,
    9,
    173,
    9,
    181,
    9,
    189,
    9,
    193,
    9,
    201,
    9,
    149,
    9,
    225,
    9,
    233,
    9,
    209,
    9,
    217,
    9,
    241,
    9,
    249,
    9,
    1,
    10,
    9,
    10,
    33,
    10,
    17,
    10,
    25,
    10,
    41,
    10,
    49,
    10,
    64,
    10,
    69,
    10,
    56,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    85,
    10,
    93,
    10,
    220,
    8,
    96,
    10,
    104,
    10,
    111,
    10,
    116,
    10,
    124,
    10,
    220,
    8,
    130,
    10,
    129,
    10,
    146,
    10,
    149,
    10,
    220,
    8,
    220,
    8,
    138,
    10,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    164,
    10,
    172,
    10,
    156,
    10,
    220,
    8,
    220,
    8,
    220,
    8,
    177,
    10,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    183,
    10,
    191,
    10,
    220,
    8,
    199,
    10,
    206,
    10,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    214,
    10,
    77,
    10,
    221,
    10,
    228,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    77,
    10,
    220,
    8,
    236,
    10,
    243,
    10,
    247,
    10,
    253,
    10,
    3,
    11,
    11,
    11,
    16,
    11,
    70,
    5,
    32,
    11,
    24,
    11,
    40,
    11,
    158,
    4,
    158,
    4,
    158,
    4,
    48,
    11,
    238,
    4,
    56,
    11,
    185,
    5,
    62,
    11,
    78,
    11,
    70,
    11,
    70,
    11,
    21,
    5,
    86,
    11,
    94,
    11,
    102,
    11,
    110,
    4,
    110,
    11,
    220,
    8,
    220,
    8,
    117,
    11,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    125,
    11,
    131,
    11,
    147,
    11,
    139,
    11,
    250,
    5,
    185,
    5,
    155,
    11,
    56,
    8,
    185,
    5,
    163,
    11,
    171,
    11,
    176,
    11,
    185,
    5,
    185,
    5,
    181,
    11,
    165,
    5,
    220,
    8,
    188,
    11,
    196,
    11,
    204,
    11,
    210,
    11,
    220,
    8,
    204,
    11,
    218,
    11,
    220,
    8,
    196,
    11,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    226,
    11,
    185,
    5,
    185,
    5,
    185,
    5,
    234,
    11,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    240,
    11,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    245,
    11,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    170,
    8,
    220,
    8,
    220,
    8,
    253,
    11,
    185,
    5,
    0,
    12,
    185,
    5,
    8,
    12,
    14,
    12,
    22,
    12,
    30,
    12,
    35,
    12,
    185,
    5,
    185,
    5,
    39,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    46,
    12,
    185,
    5,
    53,
    12,
    59,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    67,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    75,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    77,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    84,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    91,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    98,
    12,
    106,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    111,
    12,
    185,
    5,
    185,
    5,
    119,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    123,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    126,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    129,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    135,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    143,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    148,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    153,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    158,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    166,
    12,
    173,
    12,
    177,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    184,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    170,
    8,
    110,
    4,
    198,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    190,
    12,
    220,
    8,
    206,
    12,
    77,
    9,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    211,
    12,
    219,
    12,
    158,
    4,
    235,
    12,
    227,
    12,
    185,
    5,
    185,
    5,
    243,
    12,
    251,
    12,
    11,
    13,
    158,
    4,
    16,
    13,
    24,
    13,
    30,
    13,
    110,
    4,
    3,
    13,
    38,
    13,
    46,
    13,
    185,
    5,
    54,
    13,
    70,
    13,
    73,
    13,
    62,
    13,
    81,
    13,
    14,
    6,
    89,
    13,
    96,
    13,
    104,
    13,
    86,
    6,
    120,
    13,
    112,
    13,
    128,
    13,
    185,
    5,
    136,
    13,
    144,
    13,
    152,
    13,
    185,
    5,
    160,
    13,
    168,
    13,
    176,
    13,
    184,
    13,
    192,
    13,
    196,
    13,
    204,
    13,
    238,
    4,
    238,
    4,
    185,
    5,
    212,
    13,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    220,
    13,
    227,
    13,
    158,
    8,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    185,
    5,
    185,
    5,
    185,
    5,
    251,
    13,
    185,
    5,
    185,
    12,
    2,
    14,
    7,
    14,
    185,
    5,
    185,
    5,
    185,
    5,
    15,
    14,
    185,
    5,
    185,
    5,
    169,
    8,
    110,
    4,
    37,
    14,
    21,
    14,
    29,
    14,
    185,
    5,
    185,
    5,
    45,
    14,
    53,
    14,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    58,
    14,
    66,
    14,
    185,
    5,
    70,
    14,
    185,
    5,
    76,
    14,
    80,
    14,
    88,
    14,
    96,
    14,
    103,
    14,
    111,
    14,
    185,
    5,
    185,
    5,
    185,
    5,
    117,
    14,
    141,
    14,
    94,
    4,
    149,
    14,
    157,
    14,
    162,
    14,
    190,
    8,
    125,
    14,
    133,
    14,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    235,
    13,
    184,
    17,
    184,
    17,
    248,
    17,
    56,
    18,
    120,
    18,
    176,
    18,
    240,
    18,
    48,
    19,
    104,
    19,
    168,
    19,
    212,
    19,
    20,
    20,
    84,
    20,
    100,
    20,
    164,
    20,
    216,
    20,
    24,
    21,
    72,
    21,
    136,
    21,
    200,
    21,
    216,
    21,
    12,
    22,
    68,
    22,
    132,
    22,
    196,
    22,
    4,
    23,
    56,
    23,
    100,
    23,
    164,
    23,
    220,
    23,
    248,
    23,
    56,
    24,
    128,
    10,
    192,
    10,
    0,
    11,
    59,
    11,
    123,
    11,
    64,
    10,
    187,
    11,
    64,
    10,
    221,
    11,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    29,
    12,
    219,
    1,
    219,
    1,
    93,
    12,
    157,
    12,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    221,
    12,
    253,
    12,
    64,
    10,
    64,
    10,
    61,
    13,
    125,
    13,
    189,
    13,
    253,
    13,
    61,
    14,
    125,
    14,
    189,
    14,
    244,
    14,
    219,
    1,
    219,
    1,
    24,
    15,
    76,
    15,
    219,
    1,
    116,
    15,
    219,
    1,
    219,
    1,
    219,
    1,
    219,
    1,
    161,
    15,
    219,
    1,
    219,
    1,
    219,
    1,
    219,
    1,
    219,
    1,
    219,
    1,
    219,
    1,
    181,
    15,
    219,
    1,
    237,
    15,
    45,
    16,
    219,
    1,
    56,
    16,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    120,
    16,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    184,
    16,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    64,
    10,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    248,
    16,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    248,
    16,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    170,
    14,
    177,
    14,
    185,
    14,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    165,
    5,
    201,
    14,
    193,
    14,
    224,
    14,
    209,
    14,
    216,
    14,
    232,
    14,
    106,
    11,
    240,
    14,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    104,
    13,
    185,
    5,
    248,
    14,
    0,
    15,
    185,
    5,
    8,
    15,
    16,
    15,
    20,
    15,
    28,
    15,
    185,
    5,
    36,
    15,
    110,
    4,
    70,
    5,
    80,
    5,
    44,
    15,
    185,
    5,
    48,
    15,
    56,
    15,
    72,
    15,
    64,
    15,
    185,
    5,
    80,
    15,
    185,
    5,
    87,
    15,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    78,
    11,
    170,
    8,
    76,
    14,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    103,
    15,
    95,
    15,
    106,
    15,
    114,
    15,
    190,
    8,
    122,
    15,
    110,
    4,
    130,
    15,
    138,
    15,
    146,
    15,
    110,
    4,
    110,
    4,
    185,
    5,
    162,
    15,
    170,
    15,
    154,
    15,
    186,
    15,
    193,
    15,
    178,
    15,
    201,
    15,
    209,
    15,
    110,
    4,
    225,
    15,
    217,
    15,
    185,
    5,
    228,
    15,
    236,
    15,
    244,
    15,
    252,
    15,
    4,
    16,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    12,
    16,
    110,
    4,
    70,
    5,
    20,
    16,
    238,
    4,
    28,
    16,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    36,
    16,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    52,
    16,
    239,
    5,
    60,
    16,
    44,
    16,
    47,
    9,
    68,
    16,
    76,
    16,
    82,
    16,
    106,
    16,
    90,
    16,
    98,
    16,
    110,
    16,
    47,
    9,
    126,
    16,
    118,
    16,
    134,
    16,
    150,
    16,
    142,
    16,
    110,
    4,
    110,
    4,
    157,
    16,
    165,
    16,
    17,
    6,
    173,
    16,
    189,
    16,
    178,
    6,
    197,
    16,
    181,
    16,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    205,
    16,
    213,
    16,
    110,
    4,
    185,
    5,
    221,
    16,
    229,
    16,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    237,
    16,
    245,
    16,
    110,
    4,
    185,
    5,
    253,
    16,
    5,
    17,
    13,
    17,
    185,
    5,
    29,
    17,
    21,
    17,
    110,
    4,
    45,
    17,
    37,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    70,
    5,
    238,
    4,
    53,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    61,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    83,
    17,
    88,
    17,
    69,
    17,
    77,
    17,
    104,
    17,
    96,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    169,
    8,
    110,
    4,
    110,
    4,
    110,
    4,
    120,
    17,
    128,
    17,
    136,
    17,
    112,
    17,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    144,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    152,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    154,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    61,
    17,
    190,
    8,
    162,
    17,
    110,
    4,
    110,
    4,
    66,
    14,
    170,
    17,
    185,
    5,
    186,
    17,
    194,
    17,
    202,
    17,
    178,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    210,
    17,
    215,
    17,
    223,
    17,
    110,
    4,
    110,
    4,
    231,
    17,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    239,
    17,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    247,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    255,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    7,
    18,
    12,
    18,
    20,
    18,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    125,
    11,
    220,
    8,
    28,
    18,
    220,
    8,
    35,
    18,
    43,
    18,
    49,
    18,
    220,
    8,
    55,
    18,
    220,
    8,
    220,
    8,
    63,
    18,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    220,
    8,
    220,
    8,
    126,
    10,
    71,
    18,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    87,
    18,
    94,
    18,
    99,
    18,
    105,
    18,
    113,
    18,
    121,
    18,
    129,
    18,
    91,
    18,
    137,
    18,
    145,
    18,
    153,
    18,
    158,
    18,
    112,
    18,
    87,
    18,
    94,
    18,
    90,
    18,
    105,
    18,
    166,
    18,
    88,
    18,
    169,
    18,
    91,
    18,
    177,
    18,
    185,
    18,
    193,
    18,
    200,
    18,
    180,
    18,
    188,
    18,
    196,
    18,
    203,
    18,
    183,
    18,
    211,
    18,
    79,
    18,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    21,
    5,
    227,
    18,
    21,
    5,
    234,
    18,
    241,
    18,
    219,
    18,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    248,
    18,
    0,
    19,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    8,
    19,
    110,
    4,
    70,
    5,
    24,
    19,
    16,
    19,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    40,
    19,
    48,
    19,
    56,
    19,
    64,
    19,
    72,
    19,
    80,
    19,
    110,
    4,
    32,
    19,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    220,
    8,
    88,
    19,
    220,
    8,
    220,
    8,
    117,
    11,
    93,
    19,
    97,
    19,
    125,
    11,
    105,
    19,
    110,
    19,
    220,
    8,
    88,
    19,
    220,
    8,
    54,
    18,
    110,
    4,
    118,
    19,
    126,
    19,
    130,
    19,
    138,
    19,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    146,
    19,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    220,
    8,
    127,
    10,
    154,
    19,
    220,
    8,
    220,
    8,
    220,
    8,
    117,
    11,
    220,
    8,
    220,
    8,
    162,
    19,
    110,
    4,
    88,
    19,
    220,
    8,
    170,
    19,
    220,
    8,
    178,
    19,
    127,
    11,
    110,
    4,
    110,
    4,
    186,
    19,
    194,
    19,
    202,
    19,
    110,
    4,
    126,
    11,
    110,
    4,
    232,
    14,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    210,
    19,
    185,
    5,
    185,
    5,
    217,
    19,
    185,
    5,
    185,
    5,
    185,
    5,
    225,
    19,
    185,
    5,
    233,
    19,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    95,
    12,
    185,
    5,
    185,
    5,
    241,
    19,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    249,
    19,
    1,
    20,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    158,
    12,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    8,
    20,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    15,
    20,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE);
allocate([
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    22,
    20,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    78,
    11,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    26,
    20,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    48,
    15,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    255,
    17,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    34,
    20,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    185,
    5,
    48,
    15,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    50,
    20,
    42,
    20,
    42,
    20,
    42,
    20,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    21,
    5,
    21,
    5,
    21,
    5,
    21,
    5,
    21,
    5,
    21,
    5,
    21,
    5,
    58,
    20,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    110,
    4,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    243,
    13,
    66,
    20,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    12,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    25,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    24,
    0,
    23,
    0,
    19,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    23,
    0,
    23,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    20,
    0,
    23,
    0,
    21,
    0,
    26,
    0,
    22,
    0,
    26,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    20,
    0,
    24,
    0,
    21,
    0,
    24,
    0,
    15,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    15,
    0,
    12,
    0,
    23,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    27,
    0,
    23,
    0,
    26,
    0,
    27,
    0,
    5,
    0,
    28,
    0,
    24,
    0,
    16,
    0,
    27,
    0,
    26,
    0,
    27,
    0,
    24,
    0,
    75,
    3,
    139,
    3,
    26,
    0,
    2,
    0,
    23,
    0,
    23,
    0,
    26,
    0,
    11,
    3,
    5,
    0,
    29,
    0,
    203,
    52,
    75,
    52,
    203,
    60,
    23,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    24,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    1,
    0,
    3,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    4,
    0,
    26,
    0,
    4,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    4,
    0,
    26,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    23,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    26,
    0,
    26,
    0,
    1,
    0,
    23,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    24,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    7,
    0,
    7,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    23,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    25,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    19,
    0,
    6,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    23,
    0,
    23,
    0,
    25,
    0,
    23,
    0,
    23,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    16,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    16,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    4,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    16,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    4,
    0,
    4,
    0,
    27,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    16,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    25,
    0,
    25,
    0,
    203,
    55,
    203,
    53,
    203,
    63,
    203,
    52,
    203,
    60,
    75,
    9,
    27,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    27,
    0,
    5,
    0,
    203,
    52,
    75,
    52,
    203,
    60,
    203,
    55,
    203,
    53,
    203,
    63,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    203,
    7,
    75,
    30,
    75,
    120,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    25,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    75,
    5,
    139,
    5,
    203,
    5,
    11,
    6,
    139,
    5,
    203,
    5,
    11,
    6,
    27,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    203,
    7,
    75,
    30,
    75,
    120,
    203,
    52,
    75,
    52,
    203,
    60,
    203,
    55,
    203,
    53,
    203,
    63,
    27,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    5,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    11,
    204,
    11,
    202,
    75,
    203,
    11,
    201,
    75,
    54,
    75,
    201,
    11,
    53,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    27,
    0,
    23,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    75,
    52,
    75,
    60,
    75,
    68,
    75,
    76,
    75,
    84,
    75,
    92,
    75,
    100,
    75,
    108,
    75,
    116,
    75,
    44,
    27,
    0,
    6,
    0,
    27,
    0,
    6,
    0,
    27,
    0,
    6,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    5,
    0,
    8,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    139,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    12,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    20,
    0,
    21,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    138,
    9,
    202,
    9,
    10,
    10,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    25,
    0,
    5,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    75,
    5,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    19,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    16,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    11,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 10240);
allocate([
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    4,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    3,
    0,
    26,
    0,
    26,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    3,
    0,
    26,
    0,
    2,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    3,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    22,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    24,
    0,
    23,
    0,
    22,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    12,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    0,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    203,
    2,
    4,
    0,
    0,
    0,
    0,
    0,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    4,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    12,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    19,
    0,
    19,
    0,
    19,
    0,
    19,
    0,
    19,
    0,
    19,
    0,
    23,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    20,
    0,
    28,
    0,
    28,
    0,
    29,
    0,
    20,
    0,
    28,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    13,
    0,
    14,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    12,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    22,
    0,
    203,
    2,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    0,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    6,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    1,
    0,
    27,
    0,
    1,
    0,
    27,
    0,
    1,
    0,
    27,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    27,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    2,
    0,
    27,
    0,
    27,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    2,
    0,
    27,
    0,
    139,
    53,
    11,
    54,
    75,
    54,
    139,
    52,
    139,
    56,
    11,
    53,
    11,
    57,
    11,
    61,
    11,
    65,
    75,
    53,
    75,
    69,
    203,
    53,
    203,
    61,
    203,
    69,
    203,
    77,
    139,
    5,
    27,
    0,
    27,
    0,
    1,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    1,
    0,
    27,
    0,
    27,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    27,
    0,
    1,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    27,
    0,
    27,
    0,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    202,
    7,
    10,
    8,
    74,
    8,
    202,
    17,
    74,
    30,
    10,
    152,
    74,
    120,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    202,
    7,
    10,
    8,
    74,
    8,
    202,
    17,
    74,
    30,
    10,
    152,
    74,
    120,
    74,
    120,
    74,
    152,
    138,
    120,
    1,
    0,
    2,
    0,
    202,
    6,
    202,
    17,
    138,
    152,
    202,
    120,
    75,
    5,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    20,
    0,
    21,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    203,
    2,
    11,
    8,
    75,
    8,
    139,
    8,
    203,
    8,
    11,
    9,
    75,
    9,
    139,
    9,
    203,
    9,
    11,
    10,
    75,
    10,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    203,
    2,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    11,
    8,
    75,
    8,
    139,
    8,
    203,
    8,
    11,
    9,
    75,
    9,
    139,
    9,
    203,
    9,
    11,
    10,
    75,
    10,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    11,
    8,
    75,
    8,
    139,
    8,
    203,
    8,
    11,
    9,
    75,
    9,
    139,
    9,
    203,
    9,
    11,
    10,
    75,
    10,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    4,
    0,
    4,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    75,
    52,
    23,
    0,
    23,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    28,
    0,
    29,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    19,
    0,
    23,
    0,
    23,
    0,
    19,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    23,
    0,
    23,
    0,
    28,
    0,
    29,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    19,
    0,
    19,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    19,
    0,
    23,
    0,
    20,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    19,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    27,
    0,
    27,
    0,
    202,
    7,
    74,
    10,
    202,
    12,
    4,
    0,
    5,
    0,
    23,
    0,
    27,
    0,
    27,
    0,
    12,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    27,
    0,
    4,
    0,
    5,
    0,
    74,
    5,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    27,
    0,
    27,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    21,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    26,
    0,
    26,
    0,
    4,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    27,
    0,
    139,
    10,
    203,
    10,
    11,
    11,
    75,
    11,
    139,
    11,
    203,
    11,
    11,
    12,
    75,
    12,
    139,
    12,
    203,
    12,
    11,
    13,
    75,
    13,
    139,
    13,
    203,
    13,
    11,
    14,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    75,
    14,
    139,
    14,
    203,
    14,
    11,
    15,
    75,
    15,
    139,
    15,
    203,
    15,
    11,
    16,
    75,
    16,
    139,
    16,
    203,
    16,
    11,
    17,
    75,
    17,
    139,
    17,
    203,
    17,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    5,
    5,
    0,
    5,
    0,
    5,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    120,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    6,
    5,
    0,
    69,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    121,
    197,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    120,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    30,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    121,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    122,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    69,
    7,
    5,
    0,
    197,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    7,
    5,
    0,
    69,
    120,
    69,
    10,
    197,
    12,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    15,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    6,
    5,
    6,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    7,
    69,
    10,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    5,
    197,
    5,
    5,
    6,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    30,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    120,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    120,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    30,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    4,
    0,
    4,
    0,
    6,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    74,
    5,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    4,
    0,
    4,
    0,
    2,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    26,
    0,
    26,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    4,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    4,
    0,
    26,
    0,
    26,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    203,
    52,
    75,
    52,
    203,
    60,
    203,
    55,
    203,
    53,
    203,
    63,
    27,
    0,
    27,
    0,
    25,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    23,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    4,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    4,
    0,
    4,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    26,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    23,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 20480);
allocate([
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    5,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    6,
    5,
    0,
    197,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    24,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    21,
    0,
    20,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    25,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    19,
    0,
    19,
    0,
    22,
    0,
    22,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    23,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    22,
    0,
    22,
    0,
    22,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    24,
    0,
    19,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    0,
    0,
    23,
    0,
    25,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    25,
    0,
    24,
    0,
    26,
    0,
    27,
    0,
    25,
    0,
    25,
    0,
    0,
    0,
    27,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    25,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    24,
    0,
    23,
    0,
    19,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    24,
    0,
    24,
    0,
    24,
    0,
    23,
    0,
    26,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    20,
    0,
    24,
    0,
    21,
    0,
    24,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    20,
    0,
    21,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    11,
    176,
    11,
    184,
    75,
    120,
    75,
    128,
    75,
    136,
    75,
    144,
    75,
    152,
    75,
    160,
    75,
    168,
    75,
    176,
    75,
    184,
    139,
    120,
    139,
    128,
    139,
    136,
    139,
    144,
    139,
    152,
    139,
    160,
    139,
    168,
    139,
    176,
    139,
    184,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    11,
    128,
    11,
    136,
    11,
    144,
    11,
    152,
    11,
    160,
    11,
    168,
    202,
    7,
    202,
    7,
    202,
    7,
    202,
    7,
    202,
    7,
    202,
    12,
    202,
    17,
    202,
    17,
    202,
    17,
    202,
    17,
    74,
    30,
    10,
    136,
    10,
    152,
    10,
    152,
    10,
    152,
    10,
    152,
    10,
    152,
    74,
    120,
    74,
    152,
    138,
    6,
    202,
    17,
    75,
    52,
    75,
    52,
    139,
    56,
    203,
    60,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    75,
    5,
    203,
    52,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    202,
    52,
    74,
    52,
    138,
    5,
    138,
    6,
    202,
    17,
    10,
    152,
    74,
    152,
    138,
    152,
    138,
    6,
    202,
    7,
    202,
    17,
    74,
    30,
    10,
    152,
    74,
    120,
    74,
    152,
    138,
    6,
    202,
    7,
    202,
    17,
    74,
    30,
    10,
    152,
    74,
    120,
    138,
    120,
    138,
    152,
    202,
    7,
    138,
    5,
    138,
    5,
    138,
    5,
    202,
    5,
    202,
    5,
    202,
    5,
    202,
    5,
    138,
    6,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    11,
    128,
    11,
    136,
    11,
    144,
    11,
    152,
    11,
    160,
    11,
    168,
    11,
    176,
    11,
    184,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    139,
    6,
    203,
    7,
    203,
    17,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    202,
    27,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    10,
    184,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    138,
    5,
    202,
    5,
    202,
    7,
    74,
    10,
    74,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    23,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    75,
    120,
    139,
    120,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    27,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    7,
    75,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    75,
    6,
    139,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    139,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    139,
    5,
    203,
    7,
    75,
    10,
    75,
    30,
    203,
    5,
    11,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    75,
    160,
    75,
    168,
    75,
    176,
    75,
    184,
    139,
    120,
    139,
    128,
    139,
    136,
    139,
    144,
    139,
    152,
    139,
    160,
    139,
    168,
    139,
    176,
    139,
    184,
    203,
    120,
    203,
    128,
    203,
    136,
    203,
    144,
    203,
    152,
    203,
    160,
    203,
    168,
    203,
    176,
    203,
    184,
    203,
    54,
    75,
    53,
    203,
    52,
    139,
    52,
    203,
    70,
    75,
    52,
    203,
    78,
    139,
    56,
    203,
    60,
    75,
    69,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    203,
    94,
    75,
    52,
    5,
    0,
    5,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    0,
    0,
    0,
    0,
    75,
    30,
    11,
    128,
    11,
    136,
    11,
    144,
    11,
    152,
    11,
    160,
    11,
    168,
    11,
    176,
    11,
    184,
    75,
    120,
    75,
    128,
    75,
    136,
    75,
    144,
    75,
    152,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    203,
    7,
    75,
    10,
    75,
    30,
    75,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    139,
    5,
    203,
    17,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    139,
    5,
    203,
    7,
    75,
    10,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    139,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    27,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    75,
    120,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    75,
    120,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    203,
    7,
    75,
    10,
    75,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    139,
    6,
    203,
    7,
    203,
    17,
    75,
    30,
    75,
    120,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    11,
    128,
    11,
    136,
    11,
    144,
    11,
    152,
    11,
    160,
    11,
    168,
    11,
    176,
    11,
    184,
    75,
    52,
    203,
    52,
    139,
    52,
    139,
    56,
    0,
    0,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    75,
    120,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    16,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    5,
    0,
    23,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    75,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    6,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    23,
    0,
    0,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    5,
    0,
    5,
    0,
    23,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    203,
    7,
    75,
    10,
    23,
    0,
    23,
    0,
    23,
    0,
    27,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    75,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    202,
    52,
    74,
    53,
    202,
    52,
    202,
    52,
    74,
    52,
    138,
    52,
    138,
    56,
    74,
    15,
    202,
    17,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    0,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    5,
    10,
    6,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    10,
    7,
    74,
    7,
    138,
    7,
    138,
    5,
    202,
    5,
    10,
    6,
    10,
    6,
    74,
    6,
    138,
    6,
    138,
    192,
    138,
    193,
    138,
    5,
    202,
    5,
    10,
    6,
    10,
    6,
    74,
    6,
    138,
    6,
    10,
    6,
    10,
    6,
    74,
    6,
    74,
    6,
    74,
    6,
    74,
    6,
    202,
    6,
    10,
    7,
    10,
    7,
    10,
    7,
    74,
    7,
    74,
    7,
    138,
    7,
    138,
    7,
    138,
    7,
    138,
    7,
    202,
    5,
    10,
    6,
    74,
    6,
    138,
    6,
    202,
    6,
    138,
    5,
    202,
    5,
    10,
    6,
    74,
    6,
    74,
    6,
    138,
    6,
    138,
    6,
    202,
    5,
    10,
    6,
    138,
    5,
    202,
    5,
    138,
    52,
    138,
    56,
    74,
    69,
    138,
    52,
    138,
    56,
    202,
    53,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    23,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    203,
    7,
    75,
    30,
    139,
    120,
    11,
    121,
    139,
    121,
    11,
    122,
    139,
    122,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    23,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    8,
    0,
    8,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    8,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    203,
    7,
    75,
    10,
    203,
    12,
    75,
    15,
    203,
    17,
    75,
    20,
    203,
    22,
    75,
    25,
    203,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    2,
    137,
    2,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 30720);
allocate([
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    6,
    0,
    27,
    0,
    27,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    139,
    5,
    203,
    5,
    11,
    6,
    75,
    6,
    139,
    6,
    203,
    6,
    11,
    7,
    75,
    7,
    139,
    7,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    73,
    0,
    137,
    0,
    201,
    0,
    9,
    1,
    73,
    1,
    137,
    1,
    201,
    1,
    9,
    2,
    73,
    2,
    137,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    23,
    0,
    23,
    0,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    0,
    24,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    203,
    2,
    203,
    2,
    11,
    3,
    75,
    3,
    139,
    3,
    203,
    3,
    11,
    4,
    75,
    4,
    139,
    4,
    203,
    4,
    11,
    5,
    75,
    5,
    75,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    26,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    27,
    0,
    0,
    0,
    5,
    0,
    5,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    12,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    15,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    15,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    197,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    69,
    6,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    133,
    7,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    16,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    17,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    3,
    114,
    3,
    122,
    3,
    130,
    3,
    154,
    3,
    162,
    3,
    170,
    3,
    178,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    184,
    3,
    192,
    3,
    200,
    3,
    208,
    3,
    216,
    3,
    224,
    3,
    220,
    3,
    228,
    3,
    236,
    3,
    244,
    3,
    239,
    3,
    247,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    255,
    3,
    7,
    4,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    138,
    3,
    146,
    3,
    13,
    4,
    21,
    4,
    29,
    4,
    37,
    4,
    45,
    4,
    53,
    4,
    61,
    4,
    69,
    4,
    75,
    4,
    83,
    4,
    91,
    4,
    99,
    4,
    107,
    4,
    115,
    4,
    121,
    4,
    129,
    4,
    137,
    4,
    145,
    4,
    153,
    4,
    161,
    4,
    173,
    4,
    169,
    4,
    181,
    4,
    31,
    4,
    31,
    4,
    197,
    4,
    205,
    4,
    189,
    4,
    213,
    4,
    215,
    4,
    223,
    4,
    231,
    4,
    239,
    4,
    240,
    4,
    248,
    4,
    0,
    5,
    8,
    5,
    240,
    4,
    16,
    5,
    21,
    5,
    8,
    5,
    240,
    4,
    29,
    5,
    37,
    5,
    239,
    4,
    42,
    5,
    50,
    5,
    231,
    4,
    55,
    5,
    138,
    3,
    63,
    5,
    67,
    5,
    75,
    5,
    76,
    5,
    84,
    5,
    92,
    5,
    239,
    4,
    100,
    5,
    108,
    5,
    231,
    4,
    239,
    4,
    138,
    3,
    248,
    4,
    231,
    4,
    138,
    3,
    138,
    3,
    114,
    5,
    138,
    3,
    138,
    3,
    120,
    5,
    128,
    5,
    138,
    3,
    138,
    3,
    132,
    5,
    140,
    5,
    138,
    3,
    144,
    5,
    151,
    5,
    138,
    3,
    159,
    5,
    167,
    5,
    174,
    5,
    54,
    5,
    138,
    3,
    138,
    3,
    182,
    5,
    190,
    5,
    198,
    5,
    206,
    5,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    214,
    5,
    138,
    3,
    222,
    5,
    138,
    3,
    138,
    3,
    138,
    3,
    230,
    5,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    238,
    5,
    138,
    3,
    138,
    3,
    138,
    3,
    246,
    5,
    246,
    5,
    252,
    4,
    252,
    4,
    138,
    3,
    252,
    5,
    4,
    6,
    222,
    5,
    26,
    6,
    12,
    6,
    12,
    6,
    34,
    6,
    41,
    6,
    18,
    6,
    138,
    3,
    138,
    3,
    138,
    3,
    49,
    6,
    57,
    6,
    138,
    3,
    138,
    3,
    138,
    3,
    59,
    6,
    67,
    6,
    75,
    6,
    138,
    3,
    82,
    6,
    90,
    6,
    138,
    3,
    98,
    6,
    138,
    3,
    138,
    3,
    106,
    6,
    109,
    6,
    55,
    5,
    117,
    6,
    1,
    4,
    125,
    6,
    138,
    3,
    132,
    6,
    138,
    3,
    137,
    6,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    143,
    6,
    151,
    6,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    216,
    3,
    159,
    6,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    167,
    6,
    175,
    6,
    179,
    6,
    203,
    6,
    209,
    6,
    187,
    6,
    195,
    6,
    217,
    6,
    225,
    6,
    229,
    6,
    177,
    5,
    237,
    6,
    245,
    6,
    253,
    6,
    138,
    3,
    5,
    7,
    67,
    6,
    67,
    6,
    67,
    6,
    21,
    7,
    29,
    7,
    37,
    7,
    45,
    7,
    50,
    7,
    58,
    7,
    66,
    7,
    13,
    7,
    74,
    7,
    82,
    7,
    138,
    3,
    88,
    7,
    95,
    7,
    67,
    6,
    67,
    6,
    101,
    7,
    67,
    6,
    98,
    5,
    106,
    7,
    67,
    6,
    114,
    7,
    138,
    3,
    138,
    3,
    64,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    122,
    7,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    128,
    7,
    67,
    6,
    67,
    6,
    136,
    7,
    144,
    7,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    160,
    7,
    167,
    7,
    175,
    7,
    152,
    7,
    191,
    7,
    199,
    7,
    207,
    7,
    214,
    7,
    222,
    7,
    230,
    7,
    237,
    7,
    183,
    7,
    67,
    6,
    67,
    6,
    67,
    6,
    245,
    7,
    251,
    7,
    1,
    8,
    9,
    8,
    14,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    21,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    29,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    216,
    3,
    37,
    8,
    45,
    8,
    52,
    8,
    138,
    3,
    60,
    8,
    67,
    6,
    67,
    6,
    70,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    8,
    73,
    8,
    89,
    8,
    81,
    8,
    138,
    3,
    138,
    3,
    97,
    8,
    230,
    5,
    138,
    3,
    177,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    67,
    6,
    28,
    8,
    191,
    3,
    138,
    3,
    56,
    8,
    105,
    8,
    138,
    3,
    113,
    8,
    14,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    121,
    8,
    138,
    3,
    138,
    3,
    59,
    6,
    176,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    67,
    6,
    67,
    6,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    56,
    8,
    67,
    6,
    98,
    5,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    128,
    8,
    138,
    3,
    138,
    3,
    133,
    8,
    76,
    5,
    138,
    3,
    138,
    3,
    146,
    5,
    67,
    6,
    58,
    6,
    138,
    3,
    138,
    3,
    141,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    149,
    8,
    156,
    8,
    12,
    6,
    164,
    8,
    138,
    3,
    138,
    3,
    171,
    8,
    179,
    8,
    138,
    3,
    186,
    8,
    193,
    8,
    138,
    3,
    213,
    4,
    198,
    8,
    138,
    3,
    238,
    4,
    138,
    3,
    206,
    8,
    214,
    8,
    240,
    4,
    138,
    3,
    218,
    8,
    239,
    4,
    226,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    233,
    8,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    253,
    8,
    241,
    8,
    245,
    8,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    5,
    9,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    13,
    9,
    17,
    9,
    25,
    9,
    33,
    9,
    37,
    9,
    45,
    9,
    137,
    4,
    137,
    4,
    137,
    4,
    49,
    9,
    57,
    9,
    122,
    3,
    65,
    9,
    73,
    9,
    138,
    3,
    138,
    3,
    138,
    3,
    81,
    9,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    40,
    14,
    40,
    14,
    104,
    14,
    168,
    14,
    40,
    14,
    40,
    14,
    40,
    14,
    40,
    14,
    40,
    14,
    40,
    14,
    224,
    14,
    32,
    15,
    96,
    15,
    112,
    15,
    176,
    15,
    188,
    15,
    40,
    14,
    40,
    14,
    252,
    15,
    40,
    14,
    40,
    14,
    40,
    14,
    52,
    16,
    116,
    16,
    180,
    16,
    244,
    16,
    44,
    17,
    108,
    17,
    172,
    17,
    228,
    17,
    36,
    18,
    100,
    18,
    64,
    10,
    128,
    10,
    192,
    10,
    250,
    10,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    35,
    11,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    96,
    11,
    160,
    1,
    160,
    1,
    149,
    11,
    213,
    11,
    21,
    12,
    85,
    12,
    149,
    12,
    213,
    12,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    85,
    13,
    101,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    160,
    1,
    21,
    13,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    89,
    9,
    138,
    3,
    67,
    6,
    67,
    6,
    97,
    9,
    230,
    5,
    138,
    3,
    232,
    4,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    105,
    9,
    138,
    3,
    138,
    3,
    138,
    3,
    112,
    9,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    120,
    9,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    128,
    9,
    132,
    9,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    148,
    9,
    140,
    9,
    31,
    4,
    156,
    9,
    31,
    4,
    31,
    4,
    164,
    9,
    170,
    9,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    178,
    9,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    239,
    4,
    173,
    8,
    186,
    9,
    193,
    9,
    1,
    4,
    196,
    9,
    138,
    3,
    138,
    3,
    213,
    4,
    204,
    9,
    138,
    3,
    210,
    9,
    1,
    4,
    215,
    9,
    248,
    5,
    138,
    3,
    138,
    3,
    223,
    9,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    29,
    8,
    231,
    9,
    1,
    4,
    240,
    4,
    75,
    5,
    238,
    9,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    173,
    8,
    246,
    9,
    138,
    3,
    138,
    3,
    250,
    9,
    2,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    6,
    10,
    14,
    10,
    138,
    3,
    138,
    3,
    22,
    10,
    75,
    5,
    50,
    8,
    138,
    3,
    30,
    10,
    138,
    3,
    138,
    3,
    214,
    5,
    38,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    42,
    10,
    138,
    3,
    138,
    3,
    50,
    10,
    56,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    62,
    10,
    138,
    3,
    68,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    74,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    9,
    5,
    82,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    89,
    10,
    97,
    10,
    103,
    10,
    138,
    3,
    138,
    3,
    67,
    6,
    67,
    6,
    111,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    67,
    6,
    67,
    6,
    103,
    7,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    113,
    10,
    138,
    3,
    120,
    10,
    138,
    3,
    116,
    10,
    138,
    3,
    123,
    10,
    138,
    3,
    131,
    10,
    135,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    216,
    3,
    143,
    10,
    216,
    3,
    150,
    10,
    157,
    10,
    165,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    173,
    10,
    181,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    189,
    10,
    31,
    4,
    197,
    10,
    197,
    10,
    204,
    10,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    137,
    4,
    212,
    10,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    31,
    4,
    67,
    6,
    220,
    10,
    67,
    6,
    67,
    6,
    70,
    6,
    225,
    10,
    229,
    10,
    67,
    8,
    237,
    10,
    138,
    3,
    138,
    3,
    243,
    10,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    67,
    6,
    104,
    7,
    251,
    10,
    67,
    6,
    67,
    6,
    67,
    6,
    70,
    6,
    67,
    6,
    67,
    6,
    48,
    8,
    138,
    3,
    220,
    10,
    67,
    6,
    3,
    11,
    67,
    6,
    11,
    11,
    69,
    8,
    138,
    3,
    138,
    3,
    27,
    11,
    35,
    11,
    43,
    11,
    138,
    3,
    68,
    8,
    138,
    3,
    230,
    5,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    19,
    11,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    138,
    3,
    19,
    11,
    59,
    11,
    51,
    11,
    51,
    11,
    51,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    216,
    3,
    216,
    3,
    216,
    3,
    216,
    3,
    216,
    3,
    216,
    3,
    216,
    3,
    68,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    60,
    11,
    105,
    3,
    105,
    3,
    105,
    3,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    8,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    7,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    7,
    0,
    7,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    10,
    0,
    10,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    3,
    0,
    6,
    0,
    3,
    0,
    6,
    0,
    6,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    6,
    0,
    10,
    0,
    10,
    80,
    10,
    0,
    10,
    208,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    81,
    10,
    0,
    10,
    210,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    81,
    10,
    0,
    10,
    210,
    10,
    0,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    7,
    0,
    18,
    0,
    18,
    0,
    18
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 40960);
allocate([
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    6,
    0,
    10,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    144,
    10,
    0,
    178,
    0,
    10,
    0,
    10,
    0,
    4,
    0,
    4,
    0,
    2,
    0,
    2,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    2,
    0,
    0,
    0,
    10,
    144,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    4,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    10,
    0,
    10,
    0,
    13,
    0,
    4,
    0,
    4,
    0,
    13,
    0,
    6,
    0,
    13,
    0,
    10,
    0,
    10,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    13,
    0,
    173,
    8,
    13,
    0,
    13,
    0,
    13,
    0,
    77,
    0,
    13,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    45,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    4,
    0,
    5,
    0,
    5,
    0,
    13,
    0,
    77,
    0,
    77,
    0,
    177,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    13,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    13,
    0,
    141,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    5,
    0,
    10,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    13,
    0,
    13,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    141,
    0,
    141,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    13,
    0,
    13,
    0,
    77,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    173,
    0,
    141,
    0,
    177,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    13,
    0,
    13,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    33,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    129,
    0,
    65,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    65,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    5,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    141,
    0,
    13,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    13,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    141,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    77,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    4,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    160,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    160,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    49,
    10,
    242,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    177,
    0,
    64,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    74,
    0,
    10,
    0,
    10,
    0,
    42,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    6,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    9,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    18,
    0,
    20,
    8,
    21,
    8,
    19,
    8,
    22,
    8,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    3,
    0,
    3,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    0,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    9,
    0,
    178,
    0,
    18,
    4,
    50,
    4,
    160,
    8,
    161,
    8,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    9,
    0,
    7,
    0,
    171,
    8,
    174,
    8,
    176,
    8,
    172,
    8,
    175,
    8,
    6,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    3,
    0,
    3,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    144,
    10,
    144,
    10,
    144,
    10,
    16,
    10,
    144,
    10,
    144,
    10,
    16,
    10,
    16,
    10,
    144,
    10,
    144,
    10,
    144,
    10,
    144,
    10,
    144,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    112,
    10,
    112,
    10,
    112,
    10,
    176,
    10,
    176,
    10,
    176,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    3,
    0,
    4,
    0,
    10,
    0,
    10,
    144,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    144,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    144,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    144,
    10,
    16,
    10,
    144,
    10,
    144,
    10,
    16,
    10,
    144,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    144,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    80,
    10,
    16,
    10,
    208,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    144,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    113,
    10,
    50,
    10,
    241,
    10,
    178,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    144,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    144,
    10,
    144,
    10,
    144,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    16,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    16,
    10,
    0,
    10,
    144,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    10,
    0,
    10,
    48,
    10,
    240,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    9,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 51200);
allocate([
    177,
    0,
    177,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    96,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    177,
    0,
    1,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    10,
    0,
    10,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    10,
    0,
    13,
    0,
    13,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    6,
    0,
    10,
    0,
    6,
    0,
    0,
    0,
    10,
    0,
    6,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    10,
    49,
    10,
    242,
    4,
    0,
    10,
    0,
    10,
    0,
    3,
    0,
    3,
    0,
    10,
    48,
    10,
    240,
    10,
    0,
    0,
    0,
    10,
    0,
    4,
    0,
    4,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    178,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    10,
    0,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    3,
    0,
    6,
    0,
    3,
    0,
    6,
    0,
    6,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    6,
    0,
    10,
    0,
    10,
    80,
    10,
    0,
    10,
    208,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    81,
    10,
    0,
    10,
    210,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    49,
    10,
    242,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    4,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    4,
    0,
    4,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    170,
    0,
    170,
    0,
    170,
    0,
    10,
    0,
    10,
    0,
    18,
    0,
    18,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    10,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    65,
    0,
    129,
    0,
    1,
    0,
    1,
    0,
    129,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    1,
    0,
    129,
    0,
    1,
    0,
    129,
    0,
    129,
    0,
    1,
    0,
    1,
    0,
    97,
    0,
    129,
    0,
    129,
    0,
    129,
    0,
    129,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    97,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    65,
    0,
    129,
    0,
    65,
    0,
    129,
    0,
    129,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    129,
    0,
    65,
    0,
    129,
    0,
    129,
    0,
    65,
    0,
    129,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    129,
    0,
    129,
    0,
    129,
    0,
    129,
    0,
    65,
    0,
    65,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    5,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    160,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    160,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    10,
    0,
    10,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    13,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    18,
    0,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    178,
    0,
    18,
    0,
    178,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    177,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    117,
    115,
    104,
    97,
    112,
    101,
    95,
    97,
    114,
    97,
    98,
    105,
    99,
    32,
    69,
    114,
    114,
    111,
    114,
    32,
    99,
    111,
    100,
    101,
    58,
    32,
    37,
    117,
    10,
    0,
    117,
    98,
    105,
    100,
    105,
    95,
    115,
    101,
    116,
    80,
    97,
    114,
    97,
    32,
    69,
    114,
    114,
    111,
    114,
    32,
    99,
    111,
    100,
    101,
    58,
    32,
    37,
    117,
    10,
    0,
    117,
    98,
    105,
    100,
    105,
    95,
    103,
    101,
    116,
    80,
    97,
    114,
    97,
    103,
    114,
    97,
    112,
    104,
    66,
    121,
    73,
    110,
    100,
    101,
    120,
    32,
    69,
    114,
    114,
    111,
    114,
    32,
    99,
    111,
    100,
    101,
    58,
    32,
    37,
    117,
    10,
    0,
    117,
    98,
    105,
    100,
    105,
    95,
    115,
    101,
    116,
    76,
    105,
    110,
    101,
    32,
    69,
    114,
    114,
    111,
    114,
    32,
    99,
    111,
    100,
    101,
    58,
    32,
    37,
    117,
    10,
    0,
    117,
    98,
    105,
    100,
    105,
    95,
    119,
    114,
    105,
    116,
    101,
    82,
    101,
    111,
    114,
    100,
    101,
    114,
    101,
    100,
    32,
    69,
    114,
    114,
    111,
    114,
    32,
    99,
    111,
    100,
    101,
    58,
    32,
    37,
    117,
    10,
    0,
    0,
    1,
    2,
    7,
    8,
    3,
    9,
    6,
    5,
    4,
    4,
    10,
    10,
    12,
    10,
    10,
    10,
    11,
    10,
    4,
    4,
    4,
    4,
    13,
    14,
    1,
    2,
    4,
    5,
    7,
    15,
    17,
    7,
    9,
    7,
    0,
    7,
    3,
    18,
    21,
    4,
    1,
    34,
    36,
    37,
    39,
    47,
    49,
    39,
    41,
    39,
    1,
    1,
    35,
    50,
    53,
    0,
    33,
    2,
    36,
    37,
    39,
    47,
    49,
    39,
    41,
    39,
    2,
    2,
    35,
    50,
    53,
    1,
    33,
    34,
    38,
    38,
    40,
    48,
    49,
    40,
    40,
    40,
    3,
    3,
    3,
    50,
    53,
    1,
    33,
    34,
    4,
    37,
    39,
    47,
    49,
    74,
    11,
    74,
    4,
    4,
    35,
    18,
    21,
    2,
    33,
    34,
    36,
    5,
    39,
    47,
    49,
    39,
    41,
    76,
    5,
    5,
    35,
    50,
    53,
    3,
    33,
    34,
    6,
    6,
    40,
    48,
    49,
    40,
    40,
    77,
    6,
    6,
    35,
    18,
    21,
    3,
    33,
    34,
    36,
    37,
    7,
    47,
    49,
    7,
    78,
    7,
    7,
    7,
    35,
    50,
    53,
    4,
    33,
    34,
    38,
    38,
    8,
    48,
    49,
    8,
    8,
    8,
    8,
    8,
    35,
    50,
    53,
    4,
    33,
    34,
    4,
    37,
    7,
    47,
    49,
    7,
    9,
    7,
    9,
    9,
    35,
    18,
    21,
    4,
    97,
    98,
    4,
    101,
    135,
    111,
    113,
    135,
    142,
    135,
    10,
    135,
    99,
    18,
    21,
    2,
    33,
    34,
    4,
    37,
    39,
    47,
    49,
    39,
    11,
    39,
    11,
    11,
    35,
    18,
    21,
    2,
    97,
    98,
    100,
    5,
    135,
    111,
    113,
    135,
    142,
    135,
    12,
    135,
    99,
    114,
    117,
    3,
    97,
    98,
    6,
    6,
    136,
    112,
    113,
    136,
    136,
    136,
    13,
    136,
    99,
    18,
    21,
    3,
    33,
    34,
    132,
    37,
    7,
    47,
    49,
    7,
    14,
    7,
    14,
    14,
    35,
    146,
    149,
    4,
    33,
    34,
    36,
    37,
    39,
    15,
    49,
    39,
    41,
    39,
    15,
    39,
    35,
    50,
    53,
    5,
    33,
    34,
    38,
    38,
    40,
    16,
    49,
    40,
    40,
    40,
    16,
    40,
    35,
    50,
    53,
    5,
    33,
    34,
    36,
    37,
    39,
    47,
    17,
    39,
    41,
    39,
    17,
    39,
    35,
    50,
    53,
    6,
    33,
    34,
    18,
    37,
    39,
    47,
    49,
    83,
    20,
    83,
    18,
    18,
    35,
    18,
    21,
    0,
    97,
    98,
    18,
    101,
    135,
    111,
    113,
    135,
    142,
    135,
    19,
    135,
    99,
    18,
    21,
    0,
    33,
    34,
    18,
    37,
    39,
    47,
    49,
    39,
    20,
    39,
    20,
    20,
    35,
    18,
    21,
    0,
    33,
    34,
    21,
    37,
    39,
    47,
    49,
    86,
    23,
    86,
    21,
    21,
    35,
    18,
    21,
    3,
    97,
    98,
    21,
    101,
    135,
    111,
    113,
    135,
    142,
    135,
    22,
    135,
    99,
    18,
    21,
    3,
    33,
    34,
    21,
    37,
    39,
    47,
    49,
    39,
    23,
    39,
    23,
    23,
    35,
    18,
    21,
    3,
    0,
    2,
    17,
    17,
    0,
    0,
    0,
    0,
    0,
    66,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    4,
    4,
    19,
    19,
    0,
    1,
    0,
    34,
    52,
    52,
    3,
    3,
    0,
    0,
    0,
    2,
    4,
    4,
    19,
    19,
    0,
    2,
    1,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    2,
    19,
    19,
    0,
    1,
    1,
    0,
    2,
    2,
    0,
    0,
    0,
    1,
    33,
    48,
    6,
    4,
    3,
    3,
    48,
    0,
    33,
    48,
    6,
    4,
    5,
    5,
    48,
    3,
    33,
    48,
    6,
    4,
    5,
    5,
    48,
    2,
    33,
    48,
    6,
    4,
    3,
    3,
    48,
    1,
    0,
    1,
    2,
    3,
    4,
    0,
    1,
    13,
    14,
    0,
    98,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    98,
    1,
    1,
    0,
    48,
    0,
    4,
    0,
    98,
    84,
    84,
    19,
    48,
    0,
    3,
    48,
    66,
    84,
    84,
    3,
    48,
    48,
    3,
    48,
    66,
    4,
    4,
    19,
    48,
    48,
    4,
    19,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    35,
    0,
    1,
    1,
    2,
    64,
    0,
    1,
    35,
    0,
    1,
    1,
    2,
    64,
    0,
    0,
    3,
    0,
    3,
    54,
    20,
    64,
    0,
    1,
    83,
    64,
    5,
    54,
    4,
    64,
    64,
    0,
    83,
    64,
    5,
    54,
    4,
    64,
    64,
    1,
    83,
    64,
    6,
    6,
    4,
    64,
    64,
    3,
    0,
    1,
    2,
    5,
    6,
    7,
    8,
    0,
    1,
    9,
    10,
    11,
    12,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    1,
    3,
    3,
    20,
    20,
    0,
    1,
    0,
    1,
    0,
    2,
    21,
    21,
    0,
    2,
    0,
    1,
    3,
    3,
    20,
    20,
    0,
    2,
    0,
    33,
    51,
    51,
    4,
    4,
    0,
    0,
    0,
    33,
    0,
    50,
    5,
    5,
    0,
    0,
    0,
    99,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    99,
    0,
    1,
    18,
    48,
    0,
    4,
    32,
    99,
    32,
    1,
    2,
    48,
    32,
    3,
    0,
    99,
    85,
    86,
    20,
    48,
    0,
    3,
    48,
    67,
    85,
    86,
    4,
    48,
    48,
    3,
    48,
    67,
    5,
    86,
    20,
    48,
    48,
    4,
    48,
    67,
    85,
    6,
    20,
    48,
    48,
    4,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    20,
    20,
    0,
    1,
    0,
    1,
    0,
    0,
    21,
    21,
    0,
    2,
    0,
    1,
    0,
    0,
    20,
    20,
    0,
    2,
    32,
    1,
    32,
    32,
    4,
    4,
    32,
    1,
    32,
    1,
    32,
    32,
    5,
    5,
    32,
    1,
    1,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    20,
    20,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    5,
    5,
    0,
    1,
    33,
    0,
    33,
    33,
    4,
    4,
    0,
    0,
    1,
    0,
    1,
    1,
    5,
    5,
    0,
    0,
    0,
    3,
    17,
    17,
    0,
    0,
    0,
    0,
    32,
    3,
    1,
    1,
    2,
    32,
    32,
    2,
    32,
    3,
    1,
    1,
    2,
    32,
    32,
    1,
    0,
    3,
    5,
    5,
    20,
    0,
    0,
    1,
    32,
    3,
    5,
    5,
    4,
    32,
    32,
    1,
    0,
    3,
    5,
    5,
    20,
    0,
    0,
    2,
    2,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    2,
    0,
    1,
    1,
    0,
    0,
    0,
    1,
    2,
    0,
    20,
    20,
    19,
    0,
    0,
    1,
    34,
    0,
    4,
    4,
    3,
    0,
    0,
    0,
    34,
    0,
    4,
    4,
    3,
    0,
    0,
    1,
    1,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    3,
    20,
    20,
    0,
    1,
    1,
    0,
    2,
    2,
    0,
    0,
    0,
    1,
    1,
    0,
    1,
    3,
    5,
    5,
    0,
    1,
    33,
    0,
    33,
    3,
    4,
    4,
    0,
    0,
    1,
    0,
    1,
    3,
    5,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    1,
    0,
    0,
    2,
    2,
    0,
    0,
    1,
    2,
    0,
    1,
    1,
    2,
    0,
    1,
    1,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    3,
    0,
    0,
    1,
    2,
    0,
    0,
    1,
    2,
    0,
    1,
    1,
    2,
    0,
    1,
    1,
    3,
    0,
    2,
    4,
    6,
    8,
    10,
    12,
    14,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    4,
    4,
    4,
    4,
    3,
    3,
    3,
    0,
    3,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    2,
    3,
    0,
    1,
    0,
    1,
    2,
    3,
    0,
    1,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    2,
    3,
    0,
    1,
    0,
    1,
    0,
    1,
    2,
    3,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    45,
    0,
    3,
    3,
    44,
    3,
    45,
    3,
    4,
    42,
    4,
    4,
    13,
    13,
    13,
    6,
    6,
    31,
    31,
    35,
    35,
    33,
    33,
    40,
    40,
    1,
    1,
    11,
    11,
    55,
    55,
    55,
    0,
    9,
    29,
    19,
    22,
    24,
    26,
    16,
    44,
    45,
    45,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    29,
    0,
    3,
    3,
    3,
    0,
    3,
    44,
    44,
    45,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    31,
    31,
    31,
    31,
    31,
    31,
    31,
    31,
    31,
    35,
    35,
    35,
    33,
    33,
    40,
    1,
    9,
    9,
    9,
    9,
    9,
    9,
    29,
    29,
    11,
    38,
    11,
    19,
    19,
    19,
    11,
    11,
    11,
    11,
    11,
    11,
    22,
    22,
    22,
    22,
    26,
    26,
    26,
    26,
    56,
    21,
    13,
    42,
    17,
    17,
    14,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    55,
    47,
    55,
    44,
    45,
    45,
    46,
    46,
    0,
    42,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    31,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    33,
    1,
    0,
    0,
    21,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    5,
    12,
    12,
    7,
    7,
    15,
    39,
    50,
    18,
    43,
    43,
    48,
    49,
    20,
    23,
    25,
    27,
    36,
    10,
    8,
    28,
    32,
    34,
    30,
    7,
    37,
    41,
    5,
    12,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    53,
    52,
    51,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    13,
    13,
    6,
    6,
    31,
    35,
    1,
    1,
    1,
    9,
    9,
    11,
    11,
    11,
    24,
    24,
    26,
    26,
    26,
    22,
    31,
    31,
    35,
    13,
    13,
    35,
    31,
    13,
    3,
    3,
    55,
    55,
    45,
    44,
    44,
    54,
    54,
    13,
    35,
    35,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    4,
    13,
    40,
    9,
    29,
    22,
    24,
    45,
    45,
    31,
    44,
    57,
    0,
    6,
    33,
    11,
    85,
    31,
    1,
    19,
    0,
    4,
    4,
    4,
    31,
    45,
    86,
    88,
    87,
    0,
    0,
    58,
    60,
    60,
    64,
    64,
    61,
    0,
    82,
    0,
    84,
    84,
    0,
    0,
    65,
    79,
    83,
    67,
    67,
    67,
    68,
    62,
    80,
    69,
    70,
    76,
    59,
    59,
    72,
    72,
    75,
    73,
    73,
    73,
    74,
    0,
    0,
    77,
    0,
    0,
    0,
    0,
    0,
    0,
    71,
    63,
    78,
    81,
    66,
    83,
    116,
    57,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    49,
    54,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    49,
    55,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    49,
    57,
    95,
    95,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    49,
    55,
    95,
    95,
    112,
    98,
    97,
    115,
    101,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    50,
    48,
    95,
    95,
    115,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    84,
    33,
    34,
    25,
    13,
    1,
    2,
    3,
    17,
    75,
    28,
    12,
    16,
    4,
    11,
    29,
    18,
    30,
    39,
    104,
    110,
    111,
    112,
    113,
    98,
    32,
    5,
    6,
    15,
    19,
    20,
    21,
    26,
    8,
    22,
    7,
    40,
    36,
    23,
    24,
    9,
    10,
    14,
    27,
    31,
    37,
    35,
    131,
    130,
    125,
    38,
    42,
    43,
    60,
    61,
    62,
    63,
    67,
    71,
    74,
    77,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    99,
    100,
    101,
    102,
    103,
    105,
    106,
    107,
    108,
    114,
    115,
    116,
    121,
    122,
    123,
    124,
    0,
    73,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    98,
    121,
    116,
    101,
    32,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    0,
    68,
    111,
    109,
    97,
    105,
    110,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    82,
    101,
    115,
    117,
    108,
    116,
    32,
    110,
    111,
    116,
    32,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    98,
    108,
    101,
    0,
    78,
    111,
    116,
    32,
    97,
    32,
    116,
    116,
    121,
    0,
    80,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    32,
    100,
    101,
    110,
    105,
    101,
    100,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    110,
    111,
    116,
    32,
    112,
    101,
    114,
    109,
    105,
    116,
    116,
    101,
    100,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    102,
    105,
    108,
    101,
    32,
    111,
    114,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    0,
    70,
    105,
    108,
    101,
    32,
    101,
    120,
    105,
    115,
    116,
    115,
    0,
    86,
    97,
    108,
    117,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    32,
    102,
    111,
    114,
    32,
    100,
    97,
    116,
    97,
    32,
    116,
    121,
    112,
    101,
    0,
    78,
    111,
    32,
    115,
    112,
    97,
    99,
    101,
    32,
    108,
    101,
    102,
    116,
    32,
    111,
    110,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    0,
    79,
    117,
    116,
    32,
    111,
    102,
    32,
    109,
    101,
    109,
    111,
    114,
    121,
    0,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    98,
    117,
    115,
    121,
    0,
    73,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    32,
    99,
    97,
    108,
    108,
    0,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    116,
    101,
    109,
    112,
    111,
    114,
    97,
    114,
    105,
    108,
    121,
    32,
    117,
    110,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    115,
    101,
    101,
    107,
    0,
    67,
    114,
    111,
    115,
    115,
    45,
    100,
    101,
    118,
    105,
    99,
    101,
    32,
    108,
    105,
    110,
    107,
    0,
    82,
    101,
    97,
    100,
    45,
    111,
    110,
    108,
    121,
    32,
    102,
    105,
    108,
    101,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    0,
    68,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    32,
    110,
    111,
    116,
    32,
    101,
    109,
    112,
    116,
    121,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    115,
    101,
    116,
    32,
    98,
    121,
    32,
    112,
    101,
    101,
    114,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    116,
    105,
    109,
    101,
    100,
    32,
    111,
    117,
    116,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    102,
    117,
    115,
    101,
    100,
    0,
    72,
    111,
    115,
    116,
    32,
    105,
    115,
    32,
    100,
    111,
    119,
    110,
    0,
    72,
    111,
    115,
    116,
    32,
    105,
    115,
    32,
    117,
    110,
    114,
    101,
    97,
    99,
    104,
    97,
    98,
    108,
    101,
    0,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    105,
    110,
    32,
    117,
    115,
    101,
    0,
    66,
    114,
    111,
    107,
    101,
    110,
    32,
    112,
    105,
    112,
    101,
    0,
    73,
    47,
    79,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    32,
    111,
    114,
    32,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    0,
    66,
    108,
    111,
    99,
    107,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    0,
    78,
    111,
    116,
    32,
    97,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    0,
    73,
    115,
    32,
    97,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    0,
    84,
    101,
    120,
    116,
    32,
    102,
    105,
    108,
    101,
    32,
    98,
    117,
    115,
    121,
    0,
    69,
    120,
    101,
    99,
    32,
    102,
    111,
    114,
    109,
    97,
    116,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    0,
    65,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    32,
    108,
    105,
    115,
    116,
    32,
    116,
    111,
    111,
    32,
    108,
    111,
    110,
    103,
    0,
    83,
    121,
    109,
    98,
    111,
    108,
    105,
    99,
    32,
    108,
    105,
    110,
    107,
    32,
    108,
    111,
    111,
    112,
    0,
    70,
    105,
    108,
    101,
    110,
    97,
    109,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    111,
    110,
    103,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    111,
    112,
    101,
    110,
    32,
    102,
    105,
    108,
    101,
    115,
    32,
    105,
    110,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    0,
    78,
    111,
    32,
    102,
    105,
    108,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    111,
    114,
    115,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    66,
    97,
    100,
    32,
    102,
    105,
    108,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    111,
    114,
    0,
    78,
    111,
    32,
    99,
    104,
    105,
    108,
    100,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    0,
    66,
    97,
    100,
    32,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    0,
    70,
    105,
    108,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    108,
    105,
    110,
    107,
    115,
    0,
    78,
    111,
    32,
    108,
    111,
    99,
    107,
    115,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    100,
    101,
    97,
    100,
    108,
    111,
    99,
    107,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    111,
    99,
    99,
    117,
    114,
    0,
    83,
    116,
    97,
    116,
    101,
    32,
    110,
    111,
    116,
    32,
    114,
    101,
    99,
    111,
    118,
    101,
    114,
    97,
    98,
    108,
    101,
    0,
    80,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    32,
    111,
    119,
    110,
    101,
    114,
    32,
    100,
    105,
    101,
    100,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    99,
    97,
    110,
    99,
    101,
    108,
    101,
    100,
    0,
    70,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    110,
    111,
    116,
    32,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    101,
    100,
    0,
    78,
    111,
    32,
    109,
    101,
    115,
    115,
    97,
    103,
    101,
    32,
    111,
    102,
    32,
    100,
    101,
    115,
    105,
    114,
    101,
    100,
    32,
    116,
    121,
    112,
    101,
    0,
    73,
    100,
    101,
    110,
    116,
    105,
    102,
    105,
    101,
    114,
    32,
    114,
    101,
    109,
    111,
    118,
    101,
    100,
    0,
    68,
    101,
    118,
    105,
    99,
    101,
    32,
    110,
    111,
    116,
    32,
    97,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    0,
    78,
    111,
    32,
    100,
    97,
    116,
    97,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    68,
    101,
    118,
    105,
    99,
    101,
    32,
    116,
    105,
    109,
    101,
    111,
    117,
    116,
    0,
    79,
    117,
    116,
    32,
    111,
    102,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    115,
    32,
    114,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    115,
    0,
    76,
    105,
    110,
    107,
    32,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    32,
    115,
    101,
    118,
    101,
    114,
    101,
    100,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    66,
    97,
    100,
    32,
    109,
    101,
    115,
    115,
    97,
    103,
    101,
    0,
    70,
    105,
    108,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    111,
    114,
    32,
    105,
    110,
    32,
    98,
    97,
    100,
    32,
    115,
    116,
    97,
    116,
    101,
    0,
    78,
    111,
    116,
    32,
    97,
    32,
    115,
    111,
    99,
    107,
    101,
    116,
    0,
    68,
    101,
    115,
    116,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    0,
    77,
    101,
    115,
    115,
    97,
    103,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    119,
    114,
    111,
    110,
    103,
    32,
    116,
    121,
    112,
    101,
    32,
    102,
    111,
    114,
    32,
    115,
    111,
    99,
    107,
    101,
    116,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    110,
    111,
    116,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    83,
    111,
    99,
    107,
    101,
    116,
    32,
    116,
    121,
    112,
    101,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    78,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    102,
    97,
    109,
    105,
    108,
    121,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    102,
    97,
    109,
    105,
    108,
    121,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    32,
    98,
    121,
    32,
    112,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    0,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    110,
    111,
    116,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    78,
    101,
    116,
    119,
    111,
    114,
    107,
    32,
    105,
    115,
    32,
    100,
    111,
    119,
    110,
    0,
    78,
    101,
    116,
    119,
    111,
    114,
    107,
    32,
    117,
    110,
    114,
    101,
    97,
    99,
    104,
    97,
    98,
    108,
    101,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    115,
    101,
    116,
    32,
    98,
    121,
    32,
    110,
    101,
    116,
    119,
    111,
    114,
    107,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    97,
    98,
    111,
    114,
    116,
    101,
    100,
    0,
    78,
    111,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    32,
    115,
    112,
    97,
    99,
    101,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    83,
    111,
    99,
    107,
    101,
    116,
    32,
    105,
    115,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    0,
    83,
    111,
    99,
    107,
    101,
    116,
    32,
    110,
    111,
    116,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    0,
    67,
    97,
    110,
    110,
    111,
    116,
    32,
    115,
    101,
    110,
    100,
    32,
    97,
    102,
    116,
    101,
    114,
    32,
    115,
    111,
    99,
    107,
    101,
    116,
    32,
    115,
    104,
    117,
    116,
    100,
    111,
    119,
    110,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    32,
    105,
    110,
    32,
    112,
    114,
    111,
    103,
    114,
    101,
    115,
    115,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    112,
    114,
    111,
    103,
    114,
    101,
    115,
    115,
    0,
    83,
    116,
    97,
    108,
    101,
    32,
    102,
    105,
    108,
    101,
    32,
    104,
    97,
    110,
    100,
    108,
    101,
    0,
    82,
    101,
    109,
    111,
    116,
    101,
    32,
    73,
    47,
    79,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    81,
    117,
    111,
    116,
    97,
    32,
    101,
    120,
    99,
    101,
    101,
    100,
    101,
    100,
    0,
    78,
    111,
    32,
    109,
    101,
    100,
    105,
    117,
    109,
    32,
    102,
    111,
    117,
    110,
    100,
    0,
    87,
    114,
    111,
    110,
    103,
    32,
    109,
    101,
    100,
    105,
    117,
    109,
    32,
    116,
    121,
    112,
    101,
    0,
    78,
    111,
    32,
    101,
    114,
    114,
    111,
    114,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 61448);
allocate([
    17,
    0,
    10,
    0,
    17,
    17,
    17,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    15,
    10,
    17,
    17,
    17,
    3,
    10,
    7,
    0,
    1,
    19,
    9,
    11,
    11,
    0,
    0,
    9,
    6,
    11,
    0,
    0,
    11,
    0,
    6,
    17,
    0,
    0,
    0,
    17,
    17,
    17,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    10,
    10,
    17,
    17,
    17,
    0,
    10,
    0,
    0,
    2,
    0,
    9,
    11,
    0,
    0,
    0,
    9,
    0,
    11,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    9,
    12,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    4,
    13,
    0,
    0,
    0,
    0,
    9,
    14,
    0,
    0,
    0,
    0,
    0,
    14,
    0,
    0,
    14,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    0,
    9,
    16,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    16,
    0,
    0,
    18,
    0,
    0,
    0,
    18,
    18,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    18,
    18,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    9,
    11,
    0,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    9,
    12,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    12,
    0,
    0,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    65,
    66,
    67,
    68,
    69,
    70,
    45,
    43,
    32,
    32,
    32,
    48,
    88,
    48,
    120,
    0,
    40,
    110,
    117,
    108,
    108,
    41,
    0,
    45,
    48,
    88,
    43,
    48,
    88,
    32,
    48,
    88,
    45,
    48,
    120,
    43,
    48,
    120,
    32,
    48,
    120,
    0,
    105,
    110,
    102,
    0,
    73,
    78,
    70,
    0,
    110,
    97,
    110,
    0,
    78,
    65,
    78,
    0,
    46,
    0
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE + 72400);
var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STATIC), 8);
function copyTempFloat(ptr) {
    HEAP8[tempDoublePtr] = HEAP8[ptr];
    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
    HEAP8[tempDoublePtr] = HEAP8[ptr];
    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
    HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
    HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
    HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
    HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
var _BDtoIHigh = true;
Module['_i64Subtract'] = _i64Subtract;
Module['_i64Add'] = _i64Add;
function _pthread_cleanup_push(routine, arg) {
    __ATEXIT__.push(function () {
        Runtime.dynCall('vi', routine, [arg]);
    });
    _pthread_cleanup_push.level = __ATEXIT__.length;
}
Module['_memset'] = _memset;
var _BDtoILow = true;
Module['_bitshift64Lshr'] = _bitshift64Lshr;
Module['_bitshift64Shl'] = _bitshift64Shl;
function _pthread_cleanup_pop() {
    __ATEXIT__.pop();
    _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _abort() {
    Module['abort']();
}
function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    return dest;
}
Module['_memcpy'] = _memcpy;
var SYSCALLS = {
    varargs: 0,
    get: function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret;
    },
    getStr: function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
    },
    get64: function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) {
        } else {
        }
        return low;
    },
    getZero: function () {
    }
};
function ___syscall6(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___setErrNo(value) {
    if (Module['___errno_location'])
        HEAP32[Module['___errno_location']() >> 2] = value;
    return value;
}
var ERRNO_CODES = {
    EPERM: 1,
    ENOENT: 2,
    ESRCH: 3,
    EINTR: 4,
    EIO: 5,
    ENXIO: 6,
    E2BIG: 7,
    ENOEXEC: 8,
    EBADF: 9,
    ECHILD: 10,
    EAGAIN: 11,
    EWOULDBLOCK: 11,
    ENOMEM: 12,
    EACCES: 13,
    EFAULT: 14,
    ENOTBLK: 15,
    EBUSY: 16,
    EEXIST: 17,
    EXDEV: 18,
    ENODEV: 19,
    ENOTDIR: 20,
    EISDIR: 21,
    EINVAL: 22,
    ENFILE: 23,
    EMFILE: 24,
    ENOTTY: 25,
    ETXTBSY: 26,
    EFBIG: 27,
    ENOSPC: 28,
    ESPIPE: 29,
    EROFS: 30,
    EMLINK: 31,
    EPIPE: 32,
    EDOM: 33,
    ERANGE: 34,
    ENOMSG: 42,
    EIDRM: 43,
    ECHRNG: 44,
    EL2NSYNC: 45,
    EL3HLT: 46,
    EL3RST: 47,
    ELNRNG: 48,
    EUNATCH: 49,
    ENOCSI: 50,
    EL2HLT: 51,
    EDEADLK: 35,
    ENOLCK: 37,
    EBADE: 52,
    EBADR: 53,
    EXFULL: 54,
    ENOANO: 55,
    EBADRQC: 56,
    EBADSLT: 57,
    EDEADLOCK: 35,
    EBFONT: 59,
    ENOSTR: 60,
    ENODATA: 61,
    ETIME: 62,
    ENOSR: 63,
    ENONET: 64,
    ENOPKG: 65,
    EREMOTE: 66,
    ENOLINK: 67,
    EADV: 68,
    ESRMNT: 69,
    ECOMM: 70,
    EPROTO: 71,
    EMULTIHOP: 72,
    EDOTDOT: 73,
    EBADMSG: 74,
    ENOTUNIQ: 76,
    EBADFD: 77,
    EREMCHG: 78,
    ELIBACC: 79,
    ELIBBAD: 80,
    ELIBSCN: 81,
    ELIBMAX: 82,
    ELIBEXEC: 83,
    ENOSYS: 38,
    ENOTEMPTY: 39,
    ENAMETOOLONG: 36,
    ELOOP: 40,
    EOPNOTSUPP: 95,
    EPFNOSUPPORT: 96,
    ECONNRESET: 104,
    ENOBUFS: 105,
    EAFNOSUPPORT: 97,
    EPROTOTYPE: 91,
    ENOTSOCK: 88,
    ENOPROTOOPT: 92,
    ESHUTDOWN: 108,
    ECONNREFUSED: 111,
    EADDRINUSE: 98,
    ECONNABORTED: 103,
    ENETUNREACH: 101,
    ENETDOWN: 100,
    ETIMEDOUT: 110,
    EHOSTDOWN: 112,
    EHOSTUNREACH: 113,
    EINPROGRESS: 115,
    EALREADY: 114,
    EDESTADDRREQ: 89,
    EMSGSIZE: 90,
    EPROTONOSUPPORT: 93,
    ESOCKTNOSUPPORT: 94,
    EADDRNOTAVAIL: 99,
    ENETRESET: 102,
    EISCONN: 106,
    ENOTCONN: 107,
    ETOOMANYREFS: 109,
    EUSERS: 87,
    EDQUOT: 122,
    ESTALE: 116,
    ENOTSUP: 95,
    ENOMEDIUM: 123,
    EILSEQ: 84,
    EOVERFLOW: 75,
    ECANCELED: 125,
    ENOTRECOVERABLE: 131,
    EOWNERDEAD: 130,
    ESTRPIPE: 86
};
function _sysconf(name) {
    switch (name) {
    case 30:
        return PAGE_SIZE;
    case 85:
        return totalMemory / PAGE_SIZE;
    case 132:
    case 133:
    case 12:
    case 137:
    case 138:
    case 15:
    case 235:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 149:
    case 13:
    case 10:
    case 236:
    case 153:
    case 9:
    case 21:
    case 22:
    case 159:
    case 154:
    case 14:
    case 77:
    case 78:
    case 139:
    case 80:
    case 81:
    case 82:
    case 68:
    case 67:
    case 164:
    case 11:
    case 29:
    case 47:
    case 48:
    case 95:
    case 52:
    case 51:
    case 46:
        return 200809;
    case 79:
        return 0;
    case 27:
    case 246:
    case 127:
    case 128:
    case 23:
    case 24:
    case 160:
    case 161:
    case 181:
    case 182:
    case 242:
    case 183:
    case 184:
    case 243:
    case 244:
    case 245:
    case 165:
    case 178:
    case 179:
    case 49:
    case 50:
    case 168:
    case 169:
    case 175:
    case 170:
    case 171:
    case 172:
    case 97:
    case 76:
    case 32:
    case 173:
    case 35:
        return -1;
    case 176:
    case 177:
    case 7:
    case 155:
    case 8:
    case 157:
    case 125:
    case 126:
    case 92:
    case 93:
    case 129:
    case 130:
    case 131:
    case 94:
    case 91:
        return 1;
    case 74:
    case 60:
    case 69:
    case 70:
    case 4:
        return 1024;
    case 31:
    case 42:
    case 72:
        return 32;
    case 87:
    case 26:
    case 33:
        return 2147483647;
    case 34:
    case 1:
        return 47839;
    case 38:
    case 36:
        return 99;
    case 43:
    case 37:
        return 2048;
    case 0:
        return 2097152;
    case 3:
        return 65536;
    case 28:
        return 32768;
    case 44:
        return 32767;
    case 75:
        return 16384;
    case 39:
        return 1000;
    case 89:
        return 700;
    case 71:
        return 256;
    case 40:
        return 255;
    case 2:
        return 100;
    case 180:
        return 64;
    case 25:
        return 20;
    case 5:
        return 16;
    case 6:
        return 6;
    case 73:
        return 4;
    case 84: {
            if (typeof navigator === 'object')
                return navigator['hardwareConcurrency'] || 1;
            return 1;
        }
    }
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
}
function _sbrk(bytes) {
    var self = _sbrk;
    if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
        self.called = true;
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function () {
            abort('cannot dynamically allocate, sbrk now has control');
        };
    }
    var ret = DYNAMICTOP;
    if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success)
            return -1 >>> 0;
    }
    return ret;
}
var _BItoD = true;
function _time(ptr) {
    var ret = Date.now() / 1000 | 0;
    if (ptr) {
        HEAP32[ptr >> 2] = ret;
    }
    return ret;
}
function _pthread_self() {
    return 0;
}
function ___syscall140(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
        var offset = offset_low;
        FS.llseek(stream, offset, whence);
        HEAP32[result >> 2] = stream.position;
        if (stream.getdents && offset === 0 && whence === 0)
            stream.getdents = null;
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall146(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        var ret = 0;
        if (!___syscall146.buffer)
            ___syscall146.buffer = [];
        var buffer = ___syscall146.buffer;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            for (var j = 0; j < len; j++) {
                var curr = HEAPU8[ptr + j];
                if (curr === 0 || curr === 10) {
                    Module['print'](UTF8ArrayToString(buffer, 0));
                    buffer.length = 0;
                } else {
                    buffer.push(curr);
                }
            }
            ret += len;
        }
        return ret;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall54(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
var cttz_i8 = allocate([
    8,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    7,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0
], 'i8', ALLOC_DYNAMIC);
function invoke_iiii(index, a1, a2, a3) {
    try {
        return Module['dynCall_iiii'](index, a1, a2, a3);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
    try {
        Module['dynCall_viiiii'](index, a1, a2, a3, a4, a5);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
function invoke_vi(index, a1) {
    try {
        Module['dynCall_vi'](index, a1);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
function invoke_ii(index, a1) {
    try {
        return Module['dynCall_ii'](index, a1);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
    try {
        Module['dynCall_viiiiii'](index, a1, a2, a3, a4, a5, a6);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
function invoke_iii(index, a1, a2) {
    try {
        return Module['dynCall_iii'](index, a1, a2);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
function invoke_viiii(index, a1, a2, a3, a4) {
    try {
        Module['dynCall_viiii'](index, a1, a2, a3, a4);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp')
            throw e;
        asm['setThrew'](1, 0);
    }
}
Module.asmGlobalArg = {
    'Math': Math,
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'byteLength': byteLength
};
Module.asmLibraryArg = {
    'abort': abort,
    'assert_em': assert_em,
    'invoke_iiii': invoke_iiii,
    'invoke_viiiii': invoke_viiiii,
    'invoke_vi': invoke_vi,
    'invoke_ii': invoke_ii,
    'invoke_viiiiii': invoke_viiiiii,
    'invoke_iii': invoke_iii,
    'invoke_viiii': invoke_viiii,
    '_pthread_cleanup_pop': _pthread_cleanup_pop,
    '_pthread_self': _pthread_self,
    '___syscall6': ___syscall6,
    '_pthread_cleanup_push': _pthread_cleanup_push,
    '_abort': _abort,
    '_sbrk': _sbrk,
    '_time': _time,
    '___setErrNo': ___setErrNo,
    '_emscripten_memcpy_big': _emscripten_memcpy_big,
    '___syscall54': ___syscall54,
    '___syscall140': ___syscall140,
    '_sysconf': _sysconf,
    '___syscall146': ___syscall146,
    'STACKTOP': STACKTOP,
    'STACK_MAX': STACK_MAX,
    'tempDoublePtr': tempDoublePtr,
    'ABORT': ABORT,
    'cttz_i8': cttz_i8
};
var asm = function (global, env, buffer) {
    'use asm';
    var a = global.Int8Array;
    var b = global.Int16Array;
    var c = global.Int32Array;
    var d = global.Uint8Array;
    var e = global.Uint16Array;
    var f = global.Uint32Array;
    var g = global.Float32Array;
    var h = global.Float64Array;
    var i = new a(buffer);
    var j = new b(buffer);
    var k = new c(buffer);
    var l = new d(buffer);
    var m = new e(buffer);
    var n = new f(buffer);
    var o = new g(buffer);
    var p = new h(buffer);
    var q = global.byteLength;
    var r = env.STACKTOP | 0;
    var s = env.STACK_MAX | 0;
    var t = env.tempDoublePtr | 0;
    var u = env.ABORT | 0;
    var v = env.cttz_i8 | 0;
    var w = 0;
    var x = 0;
    var y = 0;
    var z = 0;
    var A = global.NaN, B = global.Infinity;
    var C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0;
    var L = 0;
    var M = 0;
    var N = 0;
    var O = 0;
    var P = 0;
    var Q = 0;
    var R = 0;
    var S = 0;
    var T = 0;
    var U = 0;
    var V = global.Math.floor;
    var W = global.Math.abs;
    var X = global.Math.sqrt;
    var Y = global.Math.pow;
    var Z = global.Math.cos;
    var _ = global.Math.sin;
    var $ = global.Math.tan;
    var aa = global.Math.acos;
    var ba = global.Math.asin;
    var ca = global.Math.atan;
    var da = global.Math.atan2;
    var ea = global.Math.exp;
    var fa = global.Math.log;
    var ga = global.Math.ceil;
    var ha = global.Math.imul;
    var ia = global.Math.min;
    var ja = global.Math.clz32;
    var ka = env.abort;
    var la = env.assert_em;
    var ma = env.invoke_iiii;
    var na = env.invoke_viiiii;
    var oa = env.invoke_vi;
    var pa = env.invoke_ii;
    var qa = env.invoke_viiiiii;
    var ra = env.invoke_iii;
    var sa = env.invoke_viiii;
    var ta = env._pthread_cleanup_pop;
    var ua = env._pthread_self;
    var va = env.___syscall6;
    var wa = env._pthread_cleanup_push;
    var xa = env._abort;
    var ya = env._sbrk;
    var za = env._time;
    var Aa = env.___setErrNo;
    var Ba = env._emscripten_memcpy_big;
    var Ca = env.___syscall54;
    var Da = env.___syscall140;
    var Ea = env._sysconf;
    var Fa = env.___syscall146;
    var Ga = 0;
    function Ha(newBuffer) {
        if (q(newBuffer) & 16777215 || q(newBuffer) <= 16777215 || q(newBuffer) > 2147483648)
            return false;
        i = new a(newBuffer);
        j = new b(newBuffer);
        k = new c(newBuffer);
        l = new d(newBuffer);
        m = new e(newBuffer);
        n = new f(newBuffer);
        o = new g(newBuffer);
        p = new h(newBuffer);
        buffer = newBuffer;
        return true;
    }
    function Pa(a) {
        a = a | 0;
        var b = 0;
        b = r;
        r = r + a | 0;
        r = r + 15 & -16;
        return b | 0;
    }
    function Qa() {
        return r | 0;
    }
    function Ra(a) {
        a = a | 0;
        r = a;
    }
    function Sa(a, b) {
        a = a | 0;
        b = b | 0;
        r = a;
        s = b;
    }
    function Ta(a, b) {
        a = a | 0;
        b = b | 0;
        if (!w) {
            w = a;
            x = b;
        }
    }
    function Ua(a) {
        a = a | 0;
        i[t >> 0] = i[a >> 0];
        i[t + 1 >> 0] = i[a + 1 >> 0];
        i[t + 2 >> 0] = i[a + 2 >> 0];
        i[t + 3 >> 0] = i[a + 3 >> 0];
    }
    function Va(a) {
        a = a | 0;
        i[t >> 0] = i[a >> 0];
        i[t + 1 >> 0] = i[a + 1 >> 0];
        i[t + 2 >> 0] = i[a + 2 >> 0];
        i[t + 3 >> 0] = i[a + 3 >> 0];
        i[t + 4 >> 0] = i[a + 4 >> 0];
        i[t + 5 >> 0] = i[a + 5 >> 0];
        i[t + 6 >> 0] = i[a + 6 >> 0];
        i[t + 7 >> 0] = i[a + 7 >> 0];
    }
    function Wa(a) {
        a = a | 0;
        L = a;
    }
    function Xa() {
        return L | 0;
    }
    function Ya(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
        f = r;
        r = r + 16 | 0;
        e = f;
        g = f + 4 | 0;
        k[g >> 2] = 0;
        d = Fb(a, b, 0, 0, g) | 0;
        h = d + 1 | 0;
        k[g >> 2] = 0;
        c = Fc(h << 1) | 0;
        Fb(a, b, c, h, g) | 0;
        a = k[g >> 2] | 0;
        if ((a | 0) > 0) {
            k[e >> 2] = a;
            xc(66958, e);
            Gc(c);
            c = 0;
        } else
            j[c + (d << 1) >> 1] = 0;
        r = f;
        return c | 0;
    }
    function Za(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0;
        f = r;
        r = r + 16 | 0;
        e = f;
        d = f + 4 | 0;
        c = k[24] | 0;
        if (!c) {
            c = ab() | 0;
            k[24] = c;
        }
        k[d >> 2] = 0;
        fb(c, a, b, -2, d);
        c = k[d >> 2] | 0;
        if ((c | 0) > 0) {
            k[e >> 2] = c;
            xc(66988, e);
            c = 0;
        } else
            c = hb(k[24] | 0) | 0;
        r = f;
        return c | 0;
    }
    function _a(a) {
        a = a | 0;
        var b = 0, c = 0, d = 0, e = 0;
        d = r;
        r = r + 16 | 0;
        c = d;
        e = d + 8 | 0;
        b = d + 4 | 0;
        k[e >> 2] = 0;
        k[b >> 2] = 0;
        ib(k[24] | 0, a, b, e);
        a = k[e >> 2] | 0;
        if ((a | 0) > 0) {
            k[c >> 2] = a;
            xc(67018, c);
            a = 0;
        } else
            a = k[b >> 2] | 0;
        r = d;
        return a | 0;
    }
    function $a(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
        h = r;
        r = r + 16 | 0;
        g = h + 8 | 0;
        e = h;
        f = h + 12 | 0;
        k[f >> 2] = 0;
        c = k[25] | 0;
        if (!c) {
            d = ab() | 0;
            k[25] = d;
        } else
            d = c;
        yb(k[24] | 0, a, b, d, f);
        c = k[f >> 2] | 0;
        do
            if ((c | 0) <= 0) {
                b = gb(d) | 0;
                d = b + 1 | 0;
                c = Fc(d << 1) | 0;
                vb(k[25] | 0, c, d, 0, f) | 0;
                d = k[f >> 2] | 0;
                if ((d | 0) > 0) {
                    k[g >> 2] = d;
                    xc(67090, g);
                    c = 0;
                    break;
                } else {
                    j[c + (b << 1) >> 1] = 0;
                    break;
                }
            } else {
                k[e >> 2] = c;
                xc(67060, e);
                c = 0;
            }
        while (0);
        r = h;
        return c | 0;
    }
    function ab() {
        var a = 0, b = 0;
        b = r;
        r = r + 16 | 0;
        a = b;
        k[a >> 2] = 0;
        a = bb(a) | 0;
        r = b;
        return a | 0;
    }
    function bb(a) {
        a = a | 0;
        var b = 0;
        do
            if ((a | 0) != 0 ? (k[a >> 2] | 0) <= 0 : 0) {
                b = Mb(364) | 0;
                if (!b) {
                    k[a >> 2] = 7;
                    b = 0;
                    break;
                }
                Nc(b | 0, 0, 364) | 0;
                k[b + 4 >> 2] = 280;
                i[b + 72 >> 0] = 1;
                i[b + 73 >> 0] = 1;
                if ((k[a >> 2] | 0) >= 1) {
                    db(b);
                    b = 0;
                }
            } else
                b = 0;
        while (0);
        return b | 0;
    }
    function cb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = k[a >> 2] | 0;
        if (!e)
            if (c << 24 >> 24 != 0 ? (c = Mb(d) | 0, k[a >> 2] = c, (c | 0) != 0) : 0) {
                k[b >> 2] = d;
                e = 1;
            } else
                e = 0;
        else if ((k[b >> 2] | 0) < (d | 0))
            if (c << 24 >> 24 != 0 ? (f = Nb(e, d) | 0, (f | 0) != 0) : 0) {
                k[a >> 2] = f;
                k[b >> 2] = d;
                e = 1;
            } else
                e = 0;
        else
            e = 1;
        return e | 0;
    }
    function db(a) {
        a = a | 0;
        var b = 0;
        if (a) {
            k[a >> 2] = 0;
            b = k[a + 48 >> 2] | 0;
            if (b)
                Ob(b);
            b = k[a + 52 >> 2] | 0;
            if (b)
                Ob(b);
            b = k[a + 56 >> 2] | 0;
            if (b)
                Ob(b);
            b = k[a + 60 >> 2] | 0;
            if (b)
                Ob(b);
            b = k[a + 64 >> 2] | 0;
            if (b)
                Ob(b);
            b = k[a + 68 >> 2] | 0;
            if (b)
                Ob(b);
            b = k[a + 348 >> 2] | 0;
            if (b)
                Ob(b);
            Ob(a);
        }
        return;
    }
    function eb(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0;
        a:
            do
                if ((a | 0) > 0) {
                    d = 0;
                    while (1) {
                        if ((k[b + (d << 3) >> 2] | 0) > (c | 0)) {
                            c = 1;
                            break a;
                        }
                        d = d + 1 | 0;
                        if ((d | 0) >= (a | 0)) {
                            c = 0;
                            break;
                        }
                    }
                } else {
                    c = 0;
                    d = 0;
                }
            while (0);
        return k[b + ((c ? d : a + -1 | 0) << 3) + 4 >> 2] & 255 | 0;
    }
    function fb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, n = 0, o = 0, p = 0, q = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0;
        ca = r;
        r = r + 5072 | 0;
        Q = ca + 2532 | 0;
        P = ca;
        a:
            do
                if ((e | 0) != 0 ? (k[e >> 2] | 0) <= 0 : 0) {
                    if (!((a | 0) == 0 | (b | 0) == 0 | (c | 0) < -1) ? (f = d & 255, d + -126 << 24 >> 24 << 24 >> 24 <= -1) : 0) {
                        if ((c | 0) == -1) {
                            c = b;
                            while (1)
                                if (!(j[c >> 1] | 0))
                                    break;
                                else
                                    c = c + 2 | 0;
                            H = c - b >> 1;
                        } else
                            H = c;
                        ba = a + 88 | 0;
                        if ((k[ba >> 2] | 0) == 3) {
                            k[ba >> 2] = 0;
                            do
                                if (H) {
                                    c = Mb(H * 7 | 0) | 0;
                                    if (!c) {
                                        k[e >> 2] = 7;
                                        c = 0;
                                        break;
                                    }
                                    h = c + (H << 2) | 0;
                                    G = h + (H << 1) | 0;
                                    n = a + 92 | 0;
                                    o = k[n >> 2] | 0;
                                    if (o & 1)
                                        k[n >> 2] = o & -4 | 2;
                                    f = f & 1;
                                    fb(a, b, H, f & 255, e);
                                    if ((k[e >> 2] | 0) <= 0) {
                                        C = zb(a, e) | 0;
                                        A = a + 16 | 0;
                                        B = k[A >> 2] | 0;
                                        Qc(G | 0, C | 0, B | 0) | 0;
                                        C = a + 132 | 0;
                                        D = k[C >> 2] | 0;
                                        E = a + 120 | 0;
                                        F = k[E >> 2] | 0;
                                        d = vb(a, h, H, 2, e) | 0;
                                        Db(a, c, e);
                                        if ((k[e >> 2] | 0) <= 0) {
                                            k[n >> 2] = o;
                                            k[ba >> 2] = 5;
                                            aa = a + 72 | 0;
                                            $ = i[aa >> 0] | 0;
                                            i[aa >> 0] = 0;
                                            fb(a, h, d, (f ^ 1) & 255, e);
                                            i[aa >> 0] = $;
                                            Bb(a, e);
                                            b:
                                                do
                                                    if ((k[e >> 2] | 0) <= 0 ? (s = a + 224 | 0, g = k[s >> 2] | 0, t = a + 228 | 0, z = k[t >> 2] | 0, (g | 0) > 0) : 0) {
                                                        f = 0;
                                                        p = 0;
                                                        q = 0;
                                                        do {
                                                            d = q;
                                                            q = k[z + (p * 12 | 0) + 4 >> 2] | 0;
                                                            d = q - d | 0;
                                                            c:
                                                                do
                                                                    if ((d | 0) >= 2) {
                                                                        aa = k[z + (p * 12 | 0) >> 2] & 2147483647;
                                                                        o = aa + d | 0;
                                                                        d = aa;
                                                                        while (1) {
                                                                            do {
                                                                                h = d;
                                                                                d = d + 1 | 0;
                                                                                if ((d | 0) >= (o | 0))
                                                                                    break c;
                                                                                n = k[c + (d << 2) >> 2] | 0;
                                                                                h = k[c + (h << 2) >> 2] | 0;
                                                                                aa = n - h | 0;
                                                                                if ((((aa | 0) > -1 ? aa : 0 - aa | 0) | 0) != 1)
                                                                                    break;
                                                                            } while ((i[G + n >> 0] | 0) == (i[G + h >> 0] | 0));
                                                                            f = f + 1 | 0;
                                                                        }
                                                                    }
                                                                while (0);
                                                            p = p + 1 | 0;
                                                        } while ((p | 0) != (g | 0));
                                                        if (!f)
                                                            f = 0;
                                                        else {
                                                            d = a + 64 | 0;
                                                            if (!((cb(d, a + 40 | 0, i[a + 73 >> 0] | 0, (f + g | 0) * 12 | 0) | 0) << 24 >> 24))
                                                                break;
                                                            if ((g | 0) == 1) {
                                                                aa = k[d >> 2] | 0;
                                                                k[aa >> 2] = k[z >> 2];
                                                                k[aa + 4 >> 2] = k[z + 4 >> 2];
                                                                k[aa + 8 >> 2] = k[z + 8 >> 2];
                                                            }
                                                            z = k[d >> 2] | 0;
                                                            k[t >> 2] = z;
                                                            k[s >> 2] = (k[s >> 2] | 0) + f;
                                                        }
                                                        y = z + 4 | 0;
                                                        do {
                                                            h = (f | 0) == 0;
                                                            x = g;
                                                            while (1) {
                                                                g = x + -1 | 0;
                                                                if (!g)
                                                                    d = k[y >> 2] | 0;
                                                                else
                                                                    d = (k[z + (g * 12 | 0) + 4 >> 2] | 0) - (k[z + ((x + -2 | 0) * 12 | 0) + 4 >> 2] | 0) | 0;
                                                                v = z + (g * 12 | 0) | 0;
                                                                n = k[v >> 2] | 0;
                                                                w = n >>> 31;
                                                                n = n & 2147483647;
                                                                if ((d | 0) >= 2)
                                                                    break;
                                                                d = g + f | 0;
                                                                if (!h) {
                                                                    aa = z + (d * 12 | 0) | 0;
                                                                    k[aa >> 2] = k[v >> 2];
                                                                    k[aa + 4 >> 2] = k[v + 4 >> 2];
                                                                    k[aa + 8 >> 2] = k[v + 8 >> 2];
                                                                }
                                                                aa = k[c + (n << 2) >> 2] | 0;
                                                                k[z + (d * 12 | 0) >> 2] = (l[G + aa >> 0] ^ w) << 31 | aa;
                                                                if ((x | 0) > 1)
                                                                    x = g;
                                                                else
                                                                    break b;
                                                            }
                                                            aa = (w | 0) == 0;
                                                            p = d + -1 + n | 0;
                                                            u = aa ? n : p;
                                                            q = aa ? -1 : 1;
                                                            s = z + (g * 12 | 0) + 4 | 0;
                                                            t = z + (g * 12 | 0) + 8 | 0;
                                                            p = aa ? p : n;
                                                            d:
                                                                while (1) {
                                                                    o = p;
                                                                    while (1) {
                                                                        if ((o | 0) == (u | 0))
                                                                            break d;
                                                                        d = k[c + (o << 2) >> 2] | 0;
                                                                        h = o + q | 0;
                                                                        n = k[c + (h << 2) >> 2] | 0;
                                                                        aa = d - n | 0;
                                                                        if ((((aa | 0) > -1 ? aa : 0 - aa | 0) | 0) != 1)
                                                                            break;
                                                                        if ((i[G + d >> 0] | 0) == (i[G + n >> 0] | 0))
                                                                            o = h;
                                                                        else
                                                                            break;
                                                                    }
                                                                    aa = k[c + (p << 2) >> 2] | 0;
                                                                    aa = (aa | 0) < (d | 0) ? aa : d;
                                                                    $ = f + g | 0;
                                                                    k[z + ($ * 12 | 0) >> 2] = (l[G + aa >> 0] ^ w) << 31 | aa;
                                                                    k[z + ($ * 12 | 0) + 4 >> 2] = k[s >> 2];
                                                                    aa = o - p | 0;
                                                                    k[s >> 2] = (k[s >> 2] | 0) + ~((aa | 0) > -1 ? aa : 0 - aa | 0);
                                                                    aa = k[t >> 2] | 0;
                                                                    k[z + ($ * 12 | 0) + 8 >> 2] = aa & 10;
                                                                    k[t >> 2] = ((aa | -11) ^ 10) & k[t >> 2];
                                                                    f = f + -1 | 0;
                                                                    p = h;
                                                                }
                                                            d = f + g | 0;
                                                            if (f) {
                                                                aa = z + (d * 12 | 0) | 0;
                                                                k[aa >> 2] = k[v >> 2];
                                                                k[aa + 4 >> 2] = k[v + 4 >> 2];
                                                                k[aa + 8 >> 2] = k[v + 8 >> 2];
                                                            }
                                                            $ = k[c + (p << 2) >> 2] | 0;
                                                            aa = k[c + (u << 2) >> 2] | 0;
                                                            aa = ($ | 0) < (aa | 0) ? $ : aa;
                                                            k[z + (d * 12 | 0) >> 2] = (l[G + aa >> 0] ^ w) << 31 | aa;
                                                        } while ((x | 0) > 1);
                                                    }
                                                while (0);
                                            aa = a + 97 | 0;
                                            i[aa >> 0] = l[aa >> 0] ^ 1;
                                        }
                                        k[a + 8 >> 2] = b;
                                        k[A >> 2] = B;
                                        k[a + 12 >> 2] = H;
                                        k[E >> 2] = F;
                                        aa = k[a + 28 >> 2] | 0;
                                        Qc(k[a + 80 >> 2] | 0, G | 0, ((B | 0) > (aa | 0) ? aa : B) | 0) | 0;
                                        k[C >> 2] = D;
                                        if ((k[a + 224 >> 2] | 0) > 1)
                                            k[E >> 2] = 2;
                                    }
                                } else {
                                    fb(a, b, 0, d, e);
                                    c = 0;
                                }
                            while (0);
                            Ob(c);
                            k[ba >> 2] = 3;
                            break;
                        }
                        k[a >> 2] = 0;
                        I = a + 8 | 0;
                        k[I >> 2] = b;
                        aa = a + 20 | 0;
                        k[aa >> 2] = H;
                        g = a + 12 | 0;
                        k[g >> 2] = H;
                        J = a + 16 | 0;
                        k[J >> 2] = H;
                        W = a + 97 | 0;
                        i[W >> 0] = d;
                        f = f & 1;
                        R = a + 120 | 0;
                        k[R >> 2] = f;
                        _ = a + 136 | 0;
                        k[_ >> 2] = 1;
                        S = a + 76 | 0;
                        k[S >> 2] = 0;
                        T = a + 80 | 0;
                        k[T >> 2] = 0;
                        k[a + 228 >> 2] = 0;
                        $ = a + 336 | 0;
                        k[$ >> 2] = 0;
                        k[a + 340 >> 2] = 0;
                        c = (d & 255) > 253;
                        V = a + 98 | 0;
                        i[V >> 0] = c & 1;
                        if (!H) {
                            if (c) {
                                i[W >> 0] = f;
                                i[V >> 0] = 0;
                            }
                            k[a + 124 >> 2] = k[104 + (f << 2) >> 2];
                            k[a + 224 >> 2] = 0;
                            k[_ >> 2] = 0;
                            k[a + 104 >> 2] = 0;
                            k[a + 112 >> 2] = 0;
                            k[a >> 2] = a;
                            break;
                        }
                        k[a + 224 >> 2] = -1;
                        B = a + 60 | 0;
                        c = k[B >> 2] | 0;
                        Z = a + 140 | 0;
                        k[Z >> 2] = (c | 0) == 0 ? a + 144 | 0 : c;
                        c = a + 48 | 0;
                        G = a + 72 | 0;
                        if (!((cb(c, a + 24 | 0, i[G >> 0] | 0, H) | 0) << 24 >> 24)) {
                            k[e >> 2] = 7;
                            break;
                        }
                        A = k[c >> 2] | 0;
                        k[S >> 2] = A;
                        z = k[I >> 2] | 0;
                        C = k[g >> 2] | 0;
                        c = i[W >> 0] | 0;
                        D = (c & 255) > 253;
                        if (D)
                            E = ((k[ba >> 2] | 0) + -5 | 0) >>> 0 < 2;
                        else
                            E = 0;
                        X = a + 92 | 0;
                        U = k[X >> 2] | 0;
                        o = U & 2;
                        if (U & 4)
                            k[J >> 2] = 0;
                        c = c & 255;
                        x = c & 1;
                        y = x & 255;
                        f = (k[Z >> 2] | 0) + 4 | 0;
                        if (D) {
                            k[f >> 2] = x;
                            h = k[a + 104 >> 2] | 0;
                            if ((h | 0) > 0) {
                                n = k[a + 100 >> 2] | 0;
                                g = 0;
                                d = 10;
                                while (1) {
                                    f = g + 1 | 0;
                                    c = m[n + (g << 1) >> 1] | 0;
                                    if (!((f | 0) == (h | 0) | (c & 64512 | 0) != 55296) ? (p = m[n + (f << 1) >> 1] | 0, (p & 64512 | 0) == 56320) : 0) {
                                        f = g + 2 | 0;
                                        c = (c << 10) + -56613888 + p | 0;
                                    }
                                    g = kb(a, c) | 0;
                                    c = g & 255;
                                    g = g & 255;
                                    e:
                                        do
                                            if (d << 24 >> 24 == 10)
                                                switch (g | 0) {
                                                case 13:
                                                case 1:
                                                case 0:
                                                    break;
                                                default: {
                                                        c = 10;
                                                        break e;
                                                    }
                                                }
                                            else
                                                c = (g | 0) == 7 ? 10 : d;
                                        while (0);
                                    if ((f | 0) < (h | 0)) {
                                        g = f;
                                        d = c;
                                    } else
                                        break;
                                }
                                if (c << 24 >> 24 != 10) {
                                    k[(k[Z >> 2] | 0) + 4 >> 2] = c << 24 >> 24 != 0 & 1;
                                    n = y;
                                    h = 0;
                                } else {
                                    n = y;
                                    h = 1;
                                }
                            } else {
                                n = y;
                                h = 1;
                            }
                        } else {
                            k[f >> 2] = c;
                            n = 10;
                            h = 0;
                        }
                        u = (o | 0) == 0;
                        v = a + 144 | 0;
                        w = a + 36 | 0;
                        U = a + 352 | 0;
                        f:
                            do
                                if ((C | 0) > 0) {
                                    o = 0;
                                    c = 0;
                                    p = 0;
                                    t = -1;
                                    f = -1;
                                    g:
                                        while (1) {
                                            g = p + 1 | 0;
                                            d = m[z + (p << 1) >> 1] | 0;
                                            if (!((g | 0) == (C | 0) | (d & 64512 | 0) != 55296) ? (F = m[z + (g << 1) >> 1] | 0, (F & 64512 | 0) == 56320) : 0) {
                                                s = p + 2 | 0;
                                                d = (d << 10) + -56613888 + F | 0;
                                            } else
                                                s = g;
                                            O = kb(a, d) | 0;
                                            q = O & 255;
                                            c = 1 << q | c;
                                            p = s + -1 | 0;
                                            g = A + p | 0;
                                            i[g >> 0] = O;
                                            if ((d | 0) > 65535) {
                                                i[A + (s + -2) >> 0] = 18;
                                                c = c | 262144;
                                            }
                                            if (!u)
                                                o = (((d + -8294 | 0) >>> 0 < 4 | ((d & -4 | 0) == 8204 | (d + -8234 | 0) >>> 0 < 5)) & 1) + o | 0;
                                            h:
                                                do
                                                    switch (q | 0) {
                                                    case 0:
                                                        switch (h | 0) {
                                                        case 1: {
                                                                k[(k[Z >> 2] | 0) + ((k[_ >> 2] | 0) + -1 << 3) + 4 >> 2] = 0;
                                                                g = t;
                                                                n = 0;
                                                                h = 0;
                                                                break h;
                                                            }
                                                        case 2: {
                                                                c = (f | 0) < 126 ? c | 1048576 : c;
                                                                g = t;
                                                                n = 0;
                                                                h = 3;
                                                                break h;
                                                            }
                                                        default: {
                                                                g = t;
                                                                n = 0;
                                                                break h;
                                                            }
                                                        }
                                                    case 13:
                                                    case 1: {
                                                            i:
                                                                do
                                                                    switch (h | 0) {
                                                                    case 1: {
                                                                            k[(k[Z >> 2] | 0) + ((k[_ >> 2] | 0) + -1 << 3) + 4 >> 2] = 1;
                                                                            h = 0;
                                                                            break;
                                                                        }
                                                                    case 2: {
                                                                            if ((f | 0) >= 126) {
                                                                                h = 3;
                                                                                break i;
                                                                            }
                                                                            i[A + (k[Q + (f << 2) >> 2] | 0) >> 0] = 21;
                                                                            c = c | 2097152;
                                                                            h = 3;
                                                                            break;
                                                                        }
                                                                    default: {
                                                                        }
                                                                    }
                                                                while (0);
                                                            g = (q | 0) == 13 ? p : t;
                                                            n = 1;
                                                            break;
                                                        }
                                                    default: {
                                                            if ((q + -19 | 0) >>> 0 < 3) {
                                                                f = f + 1 | 0;
                                                                if ((f | 0) < 126) {
                                                                    k[Q + (f << 2) >> 2] = p;
                                                                    i[P + f >> 0] = h;
                                                                }
                                                                if ((q | 0) != 19) {
                                                                    g = t;
                                                                    h = 3;
                                                                    break h;
                                                                }
                                                                i[g >> 0] = 20;
                                                                g = t;
                                                                h = 2;
                                                                break h;
                                                            }
                                                            switch (q | 0) {
                                                            case 22: {
                                                                    g = (f | 0) < 126;
                                                                    c = g & (h | 0) == 2 ? c | 1048576 : c;
                                                                    if ((f | 0) <= -1) {
                                                                        g = t;
                                                                        break h;
                                                                    }
                                                                    if (g)
                                                                        h = i[P + f >> 0] | 0;
                                                                    g = t;
                                                                    f = f + -1 | 0;
                                                                    break h;
                                                                }
                                                            case 7:
                                                                break;
                                                            default: {
                                                                    g = t;
                                                                    break h;
                                                                }
                                                            }
                                                            p = (s | 0) < (C | 0);
                                                            if ((d | 0) == 13 & p ? (j[z + (s << 1) >> 1] | 0) == 10 : 0) {
                                                                g = t;
                                                                break h;
                                                            }
                                                            g = k[_ >> 2] | 0;
                                                            d = g + -1 | 0;
                                                            q = k[Z >> 2] | 0;
                                                            k[q + (d << 3) >> 2] = s;
                                                            if (E & n << 24 >> 24 == 1)
                                                                k[q + (d << 3) + 4 >> 2] = 1;
                                                            if (k[X >> 2] & 4) {
                                                                k[J >> 2] = s;
                                                                k[U >> 2] = o;
                                                            }
                                                            if (!p) {
                                                                g = t;
                                                                break h;
                                                            }
                                                            f = g + 1 | 0;
                                                            k[_ >> 2] = f;
                                                            do
                                                                if ((q | 0) == (v | 0)) {
                                                                    if ((f | 0) < 11)
                                                                        break;
                                                                    if (!((cb(B, w, 1, 160) | 0) << 24 >> 24))
                                                                        break g;
                                                                    f = k[B >> 2] | 0;
                                                                    k[Z >> 2] = f;
                                                                    g = v;
                                                                    d = f + 80 | 0;
                                                                    do {
                                                                        k[f >> 2] = k[g >> 2];
                                                                        f = f + 4 | 0;
                                                                        g = g + 4 | 0;
                                                                    } while ((f | 0) < (d | 0));
                                                                } else {
                                                                    if (!((cb(B, w, 1, f << 4) | 0) << 24 >> 24))
                                                                        break g;
                                                                    k[Z >> 2] = k[B >> 2];
                                                                }
                                                            while (0);
                                                            if (D) {
                                                                k[(k[Z >> 2] | 0) + ((k[_ >> 2] | 0) + -1 << 3) + 4 >> 2] = x;
                                                                g = t;
                                                                n = y;
                                                                f = -1;
                                                                h = 1;
                                                                break h;
                                                            } else {
                                                                k[(k[Z >> 2] | 0) + ((k[_ >> 2] | 0) + -1 << 3) + 4 >> 2] = l[W >> 0];
                                                                g = t;
                                                                f = -1;
                                                                h = 0;
                                                                break h;
                                                            }
                                                        }
                                                    }
                                                while (0);
                                            if ((s | 0) < (C | 0)) {
                                                p = s;
                                                t = g;
                                            } else {
                                                p = g;
                                                break f;
                                            }
                                        }
                                    k[e >> 2] = 7;
                                    break a;
                                } else {
                                    o = 0;
                                    c = 0;
                                    p = -1;
                                    f = -1;
                                }
                            while (0);
                        d = (f | 0) > 125;
                        f = d ? 125 : f;
                        j:
                            do
                                if ((f | 0) > -1) {
                                    g = f;
                                    f = d ? 2 : h;
                                    while (1) {
                                        if ((f | 0) == 2)
                                            break;
                                        f = i[P + g >> 0] | 0;
                                        if ((g | 0) <= 0)
                                            break j;
                                        else
                                            g = g + -1 | 0;
                                    }
                                    c = c | 1048576;
                                }
                            while (0);
                        if (k[X >> 2] & 4) {
                            if ((k[J >> 2] | 0) < (C | 0))
                                k[_ >> 2] = (k[_ >> 2] | 0) + -1;
                        } else {
                            k[(k[Z >> 2] | 0) + ((k[_ >> 2] | 0) + -1 << 3) >> 2] = C;
                            k[U >> 2] = o;
                        }
                        if (E & n << 24 >> 24 == 1)
                            k[(k[Z >> 2] | 0) + ((k[_ >> 2] | 0) + -1 << 3) + 4 >> 2] = 1;
                        if (D)
                            i[W >> 0] = k[(k[Z >> 2] | 0) + 4 >> 2];
                        g = k[_ >> 2] | 0;
                        if ((g | 0) > 0) {
                            d = k[Z >> 2] | 0;
                            f = 0;
                            do {
                                c = k[104 + ((k[d + (f << 3) + 4 >> 2] & 1) << 2) >> 2] | c;
                                f = f + 1 | 0;
                            } while ((f | 0) != (g | 0));
                        }
                        N = a + 96 | 0;
                        M = a + 124 | 0;
                        k[M >> 2] = ((i[N >> 0] | 0) == 0 | c >>> 7 & 1 ^ 1) ^ 1 | c;
                        k[a + 128 >> 2] = p;
                        O = k[S >> 2] | 0;
                        K = k[J >> 2] | 0;
                        L = a + 132 | 0;
                        k[L >> 2] = K;
                        c = a + 52 | 0;
                        if (!((cb(c, a + 28 | 0, i[G >> 0] | 0, K) | 0) << 24 >> 24)) {
                            k[e >> 2] = 7;
                            break;
                        }
                        H = k[c >> 2] | 0;
                        k[T >> 2] = H;
                        b = k[S >> 2] | 0;
                        G = k[I >> 2] | 0;
                        F = k[J >> 2] | 0;
                        f = k[M >> 2] | 0;
                        do
                            if (!(i[V >> 0] | 0))
                                Y = 143;
                            else {
                                c = k[Z >> 2] | 0;
                                if ((k[c >> 2] | 0) > 0) {
                                    Y = 143;
                                    break;
                                }
                                g = eb(k[_ >> 2] | 0, c, 0) | 0;
                            }
                        while (0);
                        if ((Y | 0) == 143)
                            g = i[W >> 0] | 0;
                        I = a + 244 | 0;
                        k[I >> 2] = 0;
                        if ((k[e >> 2] | 0) > 0)
                            break;
                        c = lb(f) | 0;
                        k:
                            do
                                if ((c | 0) == 2) {
                                    if ((k[ba >> 2] | 0) >>> 0 > 1) {
                                        c = k[_ >> 2] | 0;
                                        if ((c | 0) > 0)
                                            h = 0;
                                        else {
                                            c = 2;
                                            break;
                                        }
                                        while (1) {
                                            if (!h) {
                                                f = k[Z >> 2] | 0;
                                                d = 0;
                                            } else {
                                                d = k[Z >> 2] | 0;
                                                f = d;
                                                d = k[d + (h + -1 << 3) >> 2] | 0;
                                            }
                                            g = k[f + (h << 3) >> 2] | 0;
                                            if ((g | 0) > (d | 0)) {
                                                Nc(H + d | 0, k[f + (h << 3) + 4 >> 2] & 255 | 0, g - d | 0) | 0;
                                                c = k[_ >> 2] | 0;
                                            }
                                            h = h + 1 | 0;
                                            if ((h | 0) >= (c | 0)) {
                                                c = 2;
                                                break k;
                                            }
                                        }
                                    }
                                    if (!(f & 7985152)) {
                                        mb(a, Q);
                                        q = Q + 492 | 0;
                                        s = Q + 502 | 0;
                                        t = Q + 504 | 0;
                                        u = Q + 508 | 0;
                                        v = Q + 506 | 0;
                                        w = Q + 505 | 0;
                                        x = Q + 496 | 0;
                                        c = k[_ >> 2] | 0;
                                        l:
                                            do
                                                if ((c | 0) > 0) {
                                                    p = 0;
                                                    m:
                                                        while (1) {
                                                            if (!p) {
                                                                f = k[Z >> 2] | 0;
                                                                g = 0;
                                                            } else {
                                                                g = k[Z >> 2] | 0;
                                                                f = g;
                                                                g = k[g + (p + -1 << 3) >> 2] | 0;
                                                            }
                                                            o = k[f + (p << 3) >> 2] | 0;
                                                            h = k[f + (p << 3) + 4 >> 2] | 0;
                                                            d = h & 255;
                                                            h = h & 1;
                                                            n = h & 255;
                                                            if ((g | 0) < (o | 0)) {
                                                                f = g;
                                                                do {
                                                                    i[H + f >> 0] = d;
                                                                    n:
                                                                        do
                                                                            switch (i[b + f >> 0] | 0) {
                                                                            case 18:
                                                                                break;
                                                                            case 7: {
                                                                                    c = f + 1 | 0;
                                                                                    if ((c | 0) >= (F | 0))
                                                                                        break n;
                                                                                    if ((j[G + (f << 1) >> 1] | 0) == 13 ? (j[G + (c << 1) >> 1] | 0) == 10 : 0)
                                                                                        break n;
                                                                                    k[q >> 2] = 0;
                                                                                    j[s >> 1] = 0;
                                                                                    i[t >> 0] = d;
                                                                                    k[u >> 2] = h;
                                                                                    i[v >> 0] = n;
                                                                                    i[w >> 0] = n;
                                                                                    k[x >> 2] = 0;
                                                                                    break;
                                                                                }
                                                                            default:
                                                                                if (!((nb(Q, f) | 0) << 24 >> 24))
                                                                                    break m;
                                                                            }
                                                                        while (0);
                                                                    f = f + 1 | 0;
                                                                } while ((f | 0) < (o | 0));
                                                                c = k[_ >> 2] | 0;
                                                            }
                                                            p = p + 1 | 0;
                                                            if ((p | 0) >= (c | 0)) {
                                                                c = 2;
                                                                break l;
                                                            }
                                                        }
                                                    k[e >> 2] = 7;
                                                    c = 0;
                                                } else
                                                    c = 2;
                                            while (0);
                                        break;
                                    }
                                    mb(a, P);
                                    j[Q >> 1] = g & 255;
                                    x = P + 492 | 0;
                                    y = P + 502 | 0;
                                    z = P + 504 | 0;
                                    A = P + 508 | 0;
                                    B = P + 506 | 0;
                                    C = P + 505 | 0;
                                    D = P + 496 | 0;
                                    o:
                                        do
                                            if ((F | 0) > 0) {
                                                u = g;
                                                c = 0;
                                                E = 0;
                                                v = 0;
                                                d = 0;
                                                h = 0;
                                                p = g;
                                                w = 0;
                                                n = 0;
                                                while (1) {
                                                    s = b + E | 0;
                                                    o = i[s >> 0] | 0;
                                                    q = o & 255;
                                                    p:
                                                        do
                                                            switch (q | 0) {
                                                            case 15:
                                                            case 12:
                                                            case 14:
                                                            case 11: {
                                                                    c = c | 262144;
                                                                    i[H + E >> 0] = p;
                                                                    f = u & 255;
                                                                    if ((o + -11 & 255) < 2)
                                                                        f = f + 2 & 382;
                                                                    else
                                                                        f = (f & 127) + 1 | 1;
                                                                    g = f & 255;
                                                                    if (!((h | d | 0) == 0 & g >>> 0 < 126)) {
                                                                        t = u;
                                                                        g = v;
                                                                        d = ((h | 0) == 0 & 1) + d | 0;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    switch (o << 24 >> 24) {
                                                                    case 15:
                                                                    case 12: {
                                                                            f = g | 128;
                                                                            break;
                                                                        }
                                                                    default: {
                                                                        }
                                                                    }
                                                                    J = w + 1 | 0;
                                                                    j[Q + (J << 1) >> 1] = f & 255;
                                                                    t = f & 255;
                                                                    g = E;
                                                                    f = J;
                                                                    break;
                                                                }
                                                            case 16: {
                                                                    c = c | 262144;
                                                                    i[H + E >> 0] = p;
                                                                    if (h) {
                                                                        t = u;
                                                                        g = v;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    if (d) {
                                                                        t = u;
                                                                        g = v;
                                                                        d = d + -1 | 0;
                                                                        h = 0;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    if (!w) {
                                                                        t = u;
                                                                        g = v;
                                                                        d = 0;
                                                                        h = 0;
                                                                        f = 0;
                                                                        break p;
                                                                    }
                                                                    if ((m[Q + (w << 1) >> 1] | 0) >= 256) {
                                                                        t = u;
                                                                        g = v;
                                                                        d = 0;
                                                                        h = 0;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    f = w + -1 | 0;
                                                                    t = j[Q + (f << 1) >> 1] & 255;
                                                                    g = E;
                                                                    d = 0;
                                                                    h = 0;
                                                                    break;
                                                                }
                                                            case 21:
                                                            case 20: {
                                                                    g = u & 255;
                                                                    c = k[104 + ((g & 1) << 2) >> 2] | c;
                                                                    f = g & 127;
                                                                    i[H + E >> 0] = f;
                                                                    if ((f | 0) == (p & 127 | 0))
                                                                        c = c | 1024;
                                                                    else {
                                                                        ob(P, v, p, u);
                                                                        c = c | -2147482624;
                                                                    }
                                                                    g = o << 24 >> 24 == 20 ? g + 2 & 382 : f + 1 | 1;
                                                                    f = g & 255;
                                                                    if (!((h | d | 0) == 0 & (g & 254) >>> 0 < 126)) {
                                                                        i[s >> 0] = 9;
                                                                        t = u;
                                                                        g = v;
                                                                        h = h + 1 | 0;
                                                                        p = u;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    o = n + 1 | 0;
                                                                    if ((n | 0) >= (k[I >> 2] | 0))
                                                                        k[I >> 2] = o;
                                                                    n = w + 1 | 0;
                                                                    j[Q + (n << 1) >> 1] = g | 256;
                                                                    t = k[x >> 2] | 0;
                                                                    i[P + 496 + (t << 4) + 10 >> 0] = 10;
                                                                    p = j[P + 496 + (t << 4) + 6 >> 1] | 0;
                                                                    t = t + 1 | 0;
                                                                    k[x >> 2] = t;
                                                                    j[P + 496 + (t << 4) + 6 >> 1] = p;
                                                                    j[P + 496 + (t << 4) + 4 >> 1] = p;
                                                                    i[P + 496 + (t << 4) + 8 >> 0] = f;
                                                                    g = g & 1;
                                                                    k[P + 496 + (t << 4) + 12 >> 2] = g;
                                                                    g = g & 255;
                                                                    i[P + 496 + (t << 4) + 10 >> 0] = g;
                                                                    i[P + 496 + (t << 4) + 9 >> 0] = g;
                                                                    k[P + 496 + (t << 4) >> 2] = 0;
                                                                    t = f;
                                                                    c = c | 1 << q;
                                                                    g = E;
                                                                    p = u;
                                                                    f = n;
                                                                    n = o;
                                                                    break;
                                                                }
                                                            case 22: {
                                                                    if ((u ^ p) & 127) {
                                                                        ob(P, v, p, u);
                                                                        c = c | -2147483648;
                                                                    }
                                                                    do
                                                                        if (!h) {
                                                                            if (!n) {
                                                                                i[s >> 0] = 9;
                                                                                g = v;
                                                                                h = 0;
                                                                                f = w;
                                                                                n = 0;
                                                                                break;
                                                                            } else
                                                                                f = w;
                                                                            do {
                                                                                J = f;
                                                                                f = f + -1 | 0;
                                                                            } while ((m[Q + (J << 1) >> 1] | 0) < 256);
                                                                            g = (k[x >> 2] | 0) + -1 | 0;
                                                                            k[x >> 2] = g;
                                                                            i[P + 496 + (g << 4) + 10 >> 0] = 10;
                                                                            c = c | 4194304;
                                                                            g = E;
                                                                            d = 0;
                                                                            h = 0;
                                                                            n = n + -1 | 0;
                                                                        } else {
                                                                            i[s >> 0] = 9;
                                                                            g = v;
                                                                            h = h + -1 | 0;
                                                                            f = w;
                                                                        }
                                                                    while (0);
                                                                    t = j[Q + (f << 1) >> 1] | 0;
                                                                    p = t & 255;
                                                                    t = t & 255;
                                                                    c = c | k[104 + ((t & 1) << 2) >> 2] | 1024;
                                                                    i[H + E >> 0] = t & 127;
                                                                    t = p;
                                                                    break;
                                                                }
                                                            case 7: {
                                                                    c = c | 128;
                                                                    do
                                                                        if (!(i[V >> 0] | 0))
                                                                            Y = 206;
                                                                        else {
                                                                            f = k[Z >> 2] | 0;
                                                                            if ((E | 0) < (k[f >> 2] | 0)) {
                                                                                Y = 206;
                                                                                break;
                                                                            }
                                                                            f = eb(k[_ >> 2] | 0, f, E) | 0;
                                                                        }
                                                                    while (0);
                                                                    if ((Y | 0) == 206) {
                                                                        Y = 0;
                                                                        f = i[W >> 0] | 0;
                                                                    }
                                                                    i[H + E >> 0] = f;
                                                                    g = E + 1 | 0;
                                                                    if ((g | 0) >= (F | 0)) {
                                                                        t = u;
                                                                        g = v;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    if ((j[G + (E << 1) >> 1] | 0) == 13 ? (j[G + (g << 1) >> 1] | 0) == 10 : 0) {
                                                                        t = u;
                                                                        g = v;
                                                                        f = w;
                                                                        break p;
                                                                    }
                                                                    do
                                                                        if (!(i[V >> 0] | 0))
                                                                            Y = 213;
                                                                        else {
                                                                            f = k[Z >> 2] | 0;
                                                                            if ((g | 0) < (k[f >> 2] | 0)) {
                                                                                Y = 213;
                                                                                break;
                                                                            }
                                                                            f = eb(k[_ >> 2] | 0, f, g) | 0;
                                                                        }
                                                                    while (0);
                                                                    if ((Y | 0) == 213) {
                                                                        Y = 0;
                                                                        f = i[W >> 0] | 0;
                                                                    }
                                                                    j[Q >> 1] = f & 255;
                                                                    k[x >> 2] = 0;
                                                                    j[y >> 1] = 0;
                                                                    i[z >> 0] = f;
                                                                    t = f & 1;
                                                                    k[A >> 2] = t;
                                                                    t = t & 255;
                                                                    i[B >> 0] = t;
                                                                    i[C >> 0] = t;
                                                                    k[D >> 2] = 0;
                                                                    t = f;
                                                                    g = v;
                                                                    d = 0;
                                                                    h = 0;
                                                                    p = f;
                                                                    f = 0;
                                                                    n = 0;
                                                                    break;
                                                                }
                                                            case 18: {
                                                                    i[H + E >> 0] = p;
                                                                    t = u;
                                                                    c = c | 262144;
                                                                    g = v;
                                                                    f = w;
                                                                    break;
                                                                }
                                                            default: {
                                                                    g = u & 255;
                                                                    do
                                                                        if ((u ^ p) & 127) {
                                                                            ob(P, v, p, u);
                                                                            c = c | -2147483648;
                                                                            f = g & 1;
                                                                            if (!(g & 128)) {
                                                                                c = k[120 + (f << 2) >> 2] | c;
                                                                                break;
                                                                            } else {
                                                                                c = k[112 + (f << 2) >> 2] | c;
                                                                                break;
                                                                            }
                                                                        }
                                                                    while (0);
                                                                    i[H + E >> 0] = u;
                                                                    if (!((nb(P, E) | 0) << 24 >> 24)) {
                                                                        c = -1;
                                                                        break o;
                                                                    }
                                                                    t = u;
                                                                    c = 1 << l[s >> 0] | c;
                                                                    g = v;
                                                                    p = u;
                                                                    f = w;
                                                                }
                                                            }
                                                        while (0);
                                                    E = E + 1 | 0;
                                                    if ((E | 0) >= (F | 0))
                                                        break;
                                                    else {
                                                        u = t;
                                                        v = g;
                                                        w = f;
                                                    }
                                                }
                                                if (!(c & 8380376)) {
                                                    Y = 226;
                                                    break;
                                                }
                                                c = k[104 + ((l[W >> 0] & 1) << 2) >> 2] | c;
                                                Y = 226;
                                            } else {
                                                c = 0;
                                                Y = 226;
                                            }
                                        while (0);
                                    if ((Y | 0) == 226) {
                                        c = ((i[N >> 0] | 0) == 0 | c >>> 7 & 1 ^ 1) ^ 1 | c;
                                        k[M >> 2] = c;
                                        c = lb(c) | 0;
                                    }
                                }
                            while (0);
                        if ((k[e >> 2] | 0) > 0)
                            break;
                        f = k[I >> 2] | 0;
                        do
                            if ((f | 0) >= 6) {
                                f = f << 4;
                                g = a + 44 | 0;
                                d = a + 68 | 0;
                                if ((f | 0) <= (k[g >> 2] | 0)) {
                                    k[a + 248 >> 2] = k[d >> 2];
                                    break;
                                }
                                if (!((cb(d, g, 1, f) | 0) << 24 >> 24)) {
                                    k[e >> 2] = 7;
                                    break a;
                                } else {
                                    k[a + 248 >> 2] = k[d >> 2];
                                    break;
                                }
                            } else
                                k[a + 248 >> 2] = a + 252;
                        while (0);
                        k[I >> 2] = -1;
                        k[R >> 2] = c;
                        q:
                            do
                                switch (c | 0) {
                                case 0: {
                                        k[L >> 2] = 0;
                                        break;
                                    }
                                case 1: {
                                        k[L >> 2] = 0;
                                        break;
                                    }
                                default: {
                                        r:
                                            do
                                                switch (k[ba >> 2] | 0) {
                                                case 0: {
                                                        k[a + 116 >> 2] = 128;
                                                        break;
                                                    }
                                                case 1: {
                                                        k[a + 116 >> 2] = 144;
                                                        break;
                                                    }
                                                case 2: {
                                                        k[a + 116 >> 2] = 160;
                                                        break;
                                                    }
                                                case 4: {
                                                        k[a + 116 >> 2] = 176;
                                                        break;
                                                    }
                                                case 5: {
                                                        c = a + 116 | 0;
                                                        if (!(k[X >> 2] & 1)) {
                                                            k[c >> 2] = 208;
                                                            break r;
                                                        } else {
                                                            k[c >> 2] = 192;
                                                            break r;
                                                        }
                                                    }
                                                case 6: {
                                                        c = a + 116 | 0;
                                                        if (!(k[X >> 2] & 1)) {
                                                            k[c >> 2] = 240;
                                                            break r;
                                                        } else {
                                                            k[c >> 2] = 224;
                                                            break r;
                                                        }
                                                    }
                                                default: {
                                                    }
                                                }
                                            while (0);
                                        d = k[_ >> 2] | 0;
                                        do
                                            if ((d | 0) < 2) {
                                                if ((k[M >> 2] | 0) < 0) {
                                                    Y = 262;
                                                    break;
                                                }
                                                do
                                                    if (i[V >> 0] | 0) {
                                                        f = k[Z >> 2] | 0;
                                                        g = k[f >> 2] | 0;
                                                        if ((g | 0) > 0)
                                                            c = i[W >> 0] | 0;
                                                        else
                                                            c = eb(d, f, 0) | 0;
                                                        c = c & 1;
                                                        if ((K | 0) > (g | 0)) {
                                                            f = eb(d, f, K + -1 | 0) | 0;
                                                            break;
                                                        } else {
                                                            f = i[W >> 0] | 0;
                                                            break;
                                                        }
                                                    } else {
                                                        c = i[W >> 0] | 0;
                                                        f = c;
                                                        c = c & 1;
                                                    }
                                                while (0);
                                                pb(a, 0, K, c, f & 1);
                                            } else
                                                Y = 262;
                                        while (0);
                                        if ((Y | 0) == 262) {
                                            q = k[T >> 2] | 0;
                                            do
                                                if (!(i[V >> 0] | 0))
                                                    Y = 264;
                                                else {
                                                    c = k[Z >> 2] | 0;
                                                    if ((k[c >> 2] | 0) > 0) {
                                                        Y = 264;
                                                        break;
                                                    }
                                                    c = eb(d, c, 0) | 0;
                                                }
                                            while (0);
                                            if ((Y | 0) == 264)
                                                c = i[W >> 0] | 0;
                                            o = i[q >> 0] | 0;
                                            p = K + -1 | 0;
                                            d = ((c & 255) < (o & 255) ? o : c) & 1;
                                            f = 0;
                                            while (1) {
                                                do
                                                    if ((f | 0) > 0) {
                                                        if ((i[O + (f + -1) >> 0] | 0) != 7) {
                                                            n = d;
                                                            break;
                                                        }
                                                        do
                                                            if (!(i[V >> 0] | 0))
                                                                Y = 271;
                                                            else {
                                                                c = k[Z >> 2] | 0;
                                                                if ((f | 0) < (k[c >> 2] | 0)) {
                                                                    Y = 271;
                                                                    break;
                                                                }
                                                                c = eb(k[_ >> 2] | 0, c, f) | 0;
                                                            }
                                                        while (0);
                                                        if ((Y | 0) == 271) {
                                                            Y = 0;
                                                            c = i[W >> 0] | 0;
                                                        }
                                                        n = c & 1;
                                                    } else
                                                        n = d;
                                                while (0);
                                                c = f + 1 | 0;
                                                s:
                                                    do
                                                        if ((c | 0) < (K | 0))
                                                            while (1) {
                                                                g = i[q + c >> 0] | 0;
                                                                if (g << 24 >> 24 != o << 24 >> 24 ? (1 << l[O + c >> 0] & 382976 | 0) == 0 : 0) {
                                                                    h = 1;
                                                                    break s;
                                                                }
                                                                c = c + 1 | 0;
                                                                if ((c | 0) >= (K | 0)) {
                                                                    Y = 278;
                                                                    break;
                                                                }
                                                            }
                                                        else
                                                            Y = 278;
                                                    while (0);
                                                t:
                                                    do
                                                        if ((Y | 0) == 278) {
                                                            Y = 0;
                                                            do
                                                                if (i[V >> 0] | 0) {
                                                                    g = k[Z >> 2] | 0;
                                                                    if ((K | 0) <= (k[g >> 2] | 0))
                                                                        break;
                                                                    h = 0;
                                                                    g = eb(k[_ >> 2] | 0, g, p) | 0;
                                                                    break t;
                                                                }
                                                            while (0);
                                                            h = 0;
                                                            g = i[W >> 0] | 0;
                                                        }
                                                    while (0);
                                                R = o & 255;
                                                d = g & 255;
                                                d = ((R & 127) >>> 0 < (d & 127) >>> 0 ? d : R) & 1;
                                                if (!(R & 128))
                                                    pb(a, f, c, n, d);
                                                else
                                                    do {
                                                        R = q + f | 0;
                                                        f = f + 1 | 0;
                                                        i[R >> 0] = l[R >> 0] & 127;
                                                    } while ((f | 0) < (c | 0));
                                                if (!h)
                                                    break;
                                                else {
                                                    f = c;
                                                    o = g;
                                                }
                                            }
                                        }
                                        c = k[a + 344 >> 2] | 0;
                                        if ((c | 0) > 0) {
                                            k[e >> 2] = c;
                                            break a;
                                        }
                                        o = k[S >> 2] | 0;
                                        n = k[T >> 2] | 0;
                                        if (!(k[M >> 2] & 8248192))
                                            break q;
                                        c = k[L >> 2] | 0;
                                        h = (i[N >> 0] | 0) != 0;
                                        if ((c | 0) <= 0)
                                            break q;
                                        do {
                                            if ((c | 0) <= 0)
                                                break q;
                                            while (1) {
                                                g = c + -1 | 0;
                                                f = i[o + g >> 0] | 0;
                                                if (!(1 << (f & 255) & 8248192))
                                                    break;
                                                if (h & f << 24 >> 24 == 7)
                                                    i[n + g >> 0] = 0;
                                                else {
                                                    do
                                                        if (!(i[V >> 0] | 0))
                                                            Y = 298;
                                                        else {
                                                            f = k[Z >> 2] | 0;
                                                            if ((c | 0) <= (k[f >> 2] | 0)) {
                                                                Y = 298;
                                                                break;
                                                            }
                                                            f = eb(k[_ >> 2] | 0, f, g) | 0;
                                                        }
                                                    while (0);
                                                    if ((Y | 0) == 298) {
                                                        Y = 0;
                                                        f = i[W >> 0] | 0;
                                                    }
                                                    i[n + g >> 0] = f;
                                                }
                                                if ((c | 0) > 1)
                                                    c = g;
                                                else
                                                    break q;
                                            }
                                            if ((c | 0) > 1)
                                                d = g;
                                            else
                                                break q;
                                            while (1) {
                                                c = d + -1 | 0;
                                                f = i[o + c >> 0] | 0;
                                                g = 1 << (f & 255);
                                                if (!(g & 382976)) {
                                                    if (h & f << 24 >> 24 == 7) {
                                                        Y = 305;
                                                        break;
                                                    }
                                                    if (g & 384) {
                                                        Y = 308;
                                                        break;
                                                    }
                                                } else
                                                    i[n + c >> 0] = i[n + d >> 0] | 0;
                                                if ((d | 0) > 1)
                                                    d = c;
                                                else
                                                    break q;
                                            }
                                            if ((Y | 0) == 305) {
                                                Y = 0;
                                                i[n + c >> 0] = 0;
                                            } else if ((Y | 0) == 308) {
                                                Y = 0;
                                                do
                                                    if (!(i[V >> 0] | 0))
                                                        Y = 310;
                                                    else {
                                                        f = k[Z >> 2] | 0;
                                                        if ((d | 0) <= (k[f >> 2] | 0)) {
                                                            Y = 310;
                                                            break;
                                                        }
                                                        f = eb(k[_ >> 2] | 0, f, c) | 0;
                                                    }
                                                while (0);
                                                if ((Y | 0) == 310) {
                                                    Y = 0;
                                                    f = i[W >> 0] | 0;
                                                }
                                                i[n + c >> 0] = f;
                                            }
                                        } while ((d | 0) > 1);
                                    }
                                }
                            while (0);
                        do
                            if (i[V >> 0] | 0) {
                                if (!(k[X >> 2] & 1))
                                    break;
                                if (((k[ba >> 2] | 0) + -5 | 0) >>> 0 >= 2)
                                    break;
                                c = k[_ >> 2] | 0;
                                if ((c | 0) > 0)
                                    n = 0;
                                else
                                    break;
                                do {
                                    f = k[Z >> 2] | 0;
                                    g = k[f + (n << 3) >> 2] | 0;
                                    h = g + -1 | 0;
                                    u:
                                        do
                                            if (k[f + (n << 3) + 4 >> 2] & 255) {
                                                if (!n)
                                                    d = 0;
                                                else
                                                    d = k[f + (n + -1 << 3) >> 2] | 0;
                                                if ((g | 0) > (d | 0))
                                                    g = h;
                                                else
                                                    break;
                                                while (1) {
                                                    f = i[O + g >> 0] | 0;
                                                    if (!(f << 24 >> 24))
                                                        break;
                                                    if (1 << (f & 255) & 8194)
                                                        break u;
                                                    if ((g | 0) > (d | 0))
                                                        g = g + -1 | 0;
                                                    else
                                                        break u;
                                                }
                                                if ((g | 0) < (h | 0)) {
                                                    c = h;
                                                    while (1)
                                                        if ((i[O + c >> 0] | 0) == 7)
                                                            c = c + -1 | 0;
                                                        else
                                                            break;
                                                } else
                                                    c = h;
                                                qb(a, c, 4);
                                                c = k[_ >> 2] | 0;
                                            }
                                        while (0);
                                    n = n + 1 | 0;
                                } while ((n | 0) < (c | 0));
                            }
                        while (0);
                        if (!(k[X >> 2] & 2))
                            c = (k[aa >> 2] | 0) + (k[$ >> 2] | 0) | 0;
                        else
                            c = (k[aa >> 2] | 0) - (k[U >> 2] | 0) | 0;
                        k[aa >> 2] = c;
                        k[a + 104 >> 2] = 0;
                        k[a + 112 >> 2] = 0;
                        k[a >> 2] = a;
                        break;
                    }
                    k[e >> 2] = 1;
                }
            while (0);
        r = ca;
        return;
    }
    function gb(a) {
        a = a | 0;
        var b = 0;
        do
            if (!a)
                b = 0;
            else {
                b = k[a >> 2] | 0;
                if ((b | 0) != (a | 0)) {
                    if (!b) {
                        b = 0;
                        break;
                    }
                    if ((k[b >> 2] | 0) != (b | 0)) {
                        b = 0;
                        break;
                    }
                }
                b = k[a + 16 >> 2] | 0;
            }
        while (0);
        return b | 0;
    }
    function hb(a) {
        a = a | 0;
        var b = 0;
        do
            if (!a)
                b = 0;
            else {
                b = k[a >> 2] | 0;
                if ((b | 0) != (a | 0)) {
                    if (!b) {
                        b = 0;
                        break;
                    }
                    if ((k[b >> 2] | 0) != (b | 0)) {
                        b = 0;
                        break;
                    }
                }
                b = k[a + 136 >> 2] | 0;
            }
        while (0);
        return b | 0;
    }
    function ib(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0;
        a:
            do
                if ((d | 0) != 0 ? (k[d >> 2] | 0) <= 0 : 0) {
                    do
                        if (a) {
                            e = k[a >> 2] | 0;
                            if ((e | 0) != (a | 0)) {
                                if (!e)
                                    break;
                                if ((k[e >> 2] | 0) != (e | 0))
                                    break;
                            }
                            if ((b | 0) >= 0 ? (k[a + 136 >> 2] | 0) > (b | 0) : 0) {
                                if (!c)
                                    break a;
                                k[c >> 2] = k[(k[e + 140 >> 2] | 0) + (b << 3) >> 2];
                                break a;
                            }
                            k[d >> 2] = 1;
                            break a;
                        }
                    while (0);
                    k[d >> 2] = 27;
                }
            while (0);
        return;
    }
    function jb(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        a:
            do
                if ((c | 0) != 0 ? (k[c >> 2] | 0) <= 0 : 0) {
                    do
                        if (a) {
                            e = k[a >> 2] | 0;
                            if ((e | 0) != (a | 0)) {
                                if (!e)
                                    break;
                                if ((k[e >> 2] | 0) != (e | 0))
                                    break;
                            }
                            if ((b | 0) >= 0 ? (k[e + 16 >> 2] | 0) > (b | 0) : 0) {
                                d = k[e + 140 >> 2] | 0;
                                a = 0;
                                while (1)
                                    if ((k[d + (a << 3) >> 2] | 0) > (b | 0))
                                        break;
                                    else
                                        a = a + 1 | 0;
                                ib(e, a, 0, c);
                                break a;
                            }
                            k[c >> 2] = 1;
                            a = -1;
                            break a;
                        }
                    while (0);
                    k[c >> 2] = 27;
                    a = -1;
                } else
                    a = -1;
            while (0);
        return a | 0;
    }
    function kb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0;
        d = k[a + 356 >> 2] | 0;
        if (!((d | 0) != 0 ? (c = Na[d & 0](k[a + 360 >> 2] | 0, b) | 0, (c | 0) != 23) : 0))
            c = Rb(k[a + 4 >> 2] | 0, b) | 0;
        return (c >>> 0 > 22 ? 10 : c) | 0;
    }
    function lb(a) {
        a = a | 0;
        if ((a & 2154498 | 0) == 0 ? (a & 32 | 0) == 0 | (a & 8249304 | 0) == 0 : 0)
            a = 0;
        else
            a = (a & 26220581 | 0) == 0 ? 1 : 2;
        return a | 0;
    }
    function mb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0;
        k[b >> 2] = a;
        k[b + 492 >> 2] = 0;
        j[b + 500 >> 1] = 0;
        j[b + 502 >> 1] = 0;
        do
            if (i[a + 98 >> 0] | 0) {
                d = a + 140 | 0;
                c = k[d >> 2] | 0;
                if ((k[c >> 2] | 0) > 0)
                    c = i[a + 97 >> 0] | 0;
                else
                    c = eb(k[a + 136 >> 2] | 0, c, 0) | 0;
                i[b + 504 >> 0] = c;
                c = k[d >> 2] | 0;
                if ((k[c >> 2] | 0) > 0) {
                    c = i[a + 97 >> 0] | 0;
                    break;
                } else {
                    c = eb(k[a + 136 >> 2] | 0, c, 0) | 0;
                    break;
                }
            } else {
                c = i[a + 97 >> 0] | 0;
                i[b + 504 >> 0] = c;
            }
        while (0);
        c = c & 1;
        k[b + 508 >> 2] = c;
        c = c & 255;
        i[b + 506 >> 0] = c;
        i[b + 505 >> 0] = c;
        k[b + 496 >> 2] = 0;
        c = k[a + 56 >> 2] | 0;
        if (!c) {
            d = 20;
            c = b + 4 | 0;
        } else
            d = ((k[a + 32 >> 2] | 0) >>> 0) / 24 | 0;
        k[b + 484 >> 2] = c;
        k[b + 488 >> 2] = d;
        a = k[a + 88 >> 2] | 0;
        i[b + 2528 >> 0] = (a | 0) == 1 ? 1 : (a | 0) == 6 & 1;
        return;
    }
    function nb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0;
        z = k[a + 492 >> 2] | 0;
        v = a + 496 + (z << 4) | 0;
        g = k[a >> 2] | 0;
        q = k[g + 76 >> 2] | 0;
        w = q + b | 0;
        u = i[w >> 0] | 0;
        a:
            do
                if (u << 24 >> 24 == 10) {
                    e = j[(k[g + 8 >> 2] | 0) + (b << 1) >> 1] | 0;
                    s = a + 496 + (z << 4) + 6 | 0;
                    o = a + 496 + (z << 4) + 4 | 0;
                    h = m[o >> 1] | 0;
                    x = a + 484 | 0;
                    f = e & 65535;
                    d = m[s >> 1] | 0;
                    while (1) {
                        y = d + -1 | 0;
                        if ((d | 0) <= (h | 0)) {
                            A = 32;
                            break;
                        }
                        n = k[x >> 2] | 0;
                        p = n + (y * 24 | 0) + 4 | 0;
                        if ((k[p >> 2] | 0) == (f | 0))
                            break;
                        else
                            d = y;
                    }
                    if ((A | 0) == 32) {
                        if (!(e << 16 >> 16)) {
                            A = 39;
                            break;
                        }
                        c = (Ub(f) | 0) & 65535;
                        if (c << 16 >> 16 == e << 16 >> 16) {
                            A = 39;
                            break;
                        }
                        if ((Tb(k[g + 4 >> 2] | 0, f) | 0) != 1) {
                            A = 39;
                            break;
                        }
                        b:
                            do
                                if (c << 16 >> 16 < 12297) {
                                    switch (c << 16 >> 16) {
                                    case 9002:
                                        break;
                                    default:
                                        break b;
                                    }
                                    if (!((ub(a, 12297, b) | 0) << 24 >> 24)) {
                                        c = 0;
                                        break a;
                                    }
                                } else {
                                    switch (c << 16 >> 16) {
                                    case 12297:
                                        break;
                                    default:
                                        break b;
                                    }
                                    if (!((ub(a, 9002, b) | 0) << 24 >> 24)) {
                                        c = 0;
                                        break a;
                                    }
                                }
                            while (0);
                        if (!((ub(a, c, b) | 0) << 24 >> 24)) {
                            c = 0;
                            break;
                        } else {
                            A = 39;
                            break;
                        }
                    }
                    c = l[a + 496 + (z << 4) + 8 >> 0] & 1;
                    e = j[n + (y * 24 | 0) + 12 >> 1] | 0;
                    if (!c)
                        if (!(e & 1))
                            A = 8;
                        else {
                            t = 0;
                            c = 0;
                        }
                    else if (!(e & 2))
                        A = 8;
                    else {
                        t = c;
                        c = 0;
                    }
                    do
                        if ((A | 0) == 8)
                            if (!(e & 3)) {
                                j[s >> 1] = y;
                                A = 39;
                                break a;
                            } else {
                                t = k[n + (y * 24 | 0) + 16 >> 2] | 0;
                                c = (h | 0) != (y | 0);
                                break;
                            }
                    while (0);
                    r = t & 255;
                    e = n + (y * 24 | 0) | 0;
                    i[q + (k[e >> 2] | 0) >> 0] = r;
                    i[(k[(k[a >> 2] | 0) + 76 >> 2] | 0) + b >> 0] = r;
                    tb(a, y, k[e >> 2] | 0, r);
                    c:
                        do
                            if (c) {
                                k[p >> 2] = 0 - b;
                                g = j[o >> 1] | 0;
                                f = g & 65535;
                                d:
                                    do
                                        if ((y | 0) > (f | 0)) {
                                            h = k[x >> 2] | 0;
                                            c = k[e >> 2] | 0;
                                            e = d + -2 | 0;
                                            while (1) {
                                                if ((k[h + (e * 24 | 0) >> 2] | 0) != (c | 0))
                                                    break d;
                                                k[h + (e * 24 | 0) + 4 >> 2] = 0;
                                                if ((e | 0) > (f | 0))
                                                    e = e + -1 | 0;
                                                else
                                                    break;
                                            }
                                        }
                                    while (0);
                                e = m[s >> 1] | 0;
                                if ((d | 0) < (e | 0)) {
                                    f = k[x >> 2] | 0;
                                    do {
                                        if ((k[f + (d * 24 | 0) >> 2] | 0) >= (b | 0))
                                            break c;
                                        c = f + (d * 24 | 0) + 4 | 0;
                                        if ((k[c >> 2] | 0) > 0)
                                            k[c >> 2] = 0;
                                        d = d + 1 | 0;
                                    } while ((d | 0) < (e | 0));
                                }
                            } else {
                                c = j[o >> 1] | 0;
                                d = y & 65535;
                                while (1) {
                                    j[s >> 1] = d;
                                    if ((d & 65535) <= (c & 65535)) {
                                        g = c;
                                        break c;
                                    }
                                    if ((k[(k[x >> 2] | 0) + (((d & 65535) + -1 | 0) * 24 | 0) >> 2] | 0) == (k[e >> 2] | 0))
                                        d = d + -1 << 16 >> 16;
                                    else {
                                        g = c;
                                        break;
                                    }
                                }
                            }
                        while (0);
                    if (r << 24 >> 24 != 10) {
                        i[a + 496 + (z << 4) + 10 >> 0] = 10;
                        k[a + 496 + (z << 4) + 12 >> 2] = t & 255;
                        k[v >> 2] = b;
                        c = k[(k[a >> 2] | 0) + 80 >> 2] | 0;
                        f = c + b | 0;
                        d = l[f >> 0] | 0;
                        if (d & 128) {
                            e = d & 1;
                            i[a + 496 + (z << 4) + 9 >> 0] = e;
                            e = 1 << e;
                            c = g & 65535;
                            if ((c | 0) < (y | 0)) {
                                d = k[x >> 2] | 0;
                                do {
                                    b = d + (c * 24 | 0) + 12 | 0;
                                    j[b >> 1] = m[b >> 1] | e;
                                    c = c + 1 | 0;
                                } while ((c | 0) != (y | 0));
                            }
                            i[f >> 0] = l[f >> 0] & 127;
                            c = k[(k[a >> 2] | 0) + 80 >> 2] | 0;
                        }
                        c = c + (k[(k[x >> 2] | 0) + (y * 24 | 0) >> 2] | 0) | 0;
                        i[c >> 0] = l[c >> 0] & 127;
                        c = 1;
                    } else
                        A = 39;
                } else
                    A = 39;
            while (0);
        e:
            do
                if ((A | 0) == 39) {
                    c = l[(k[(k[a >> 2] | 0) + 80 >> 2] | 0) + b >> 0] | 0;
                    f:
                        do
                            if (!(c & 128))
                                switch (u << 24 >> 24) {
                                case 0:
                                case 1:
                                case 13: {
                                        c = u << 24 >> 24 != 0;
                                        i[a + 496 + (z << 4) + 10 >> 0] = u;
                                        i[a + 496 + (z << 4) + 9 >> 0] = u;
                                        k[a + 496 + (z << 4) + 12 >> 2] = c & 1;
                                        k[v >> 2] = b;
                                        c = c & 1;
                                        A = 55;
                                        break f;
                                    }
                                case 2: {
                                        i[a + 496 + (z << 4) + 10 >> 0] = 2;
                                        switch (i[a + 496 + (z << 4) + 9 >> 0] | 0) {
                                        case 0: {
                                                if (!(i[a + 2528 >> 0] | 0))
                                                    i[w >> 0] = 23;
                                                k[a + 496 + (z << 4) + 12 >> 2] = 0;
                                                k[v >> 2] = b;
                                                c = 0;
                                                break f;
                                            }
                                        case 13: {
                                                c = 5;
                                                break;
                                            }
                                        default:
                                            c = 24;
                                        }
                                        i[w >> 0] = c;
                                        k[a + 496 + (z << 4) + 12 >> 2] = 1;
                                        k[v >> 2] = b;
                                        c = 1;
                                        break f;
                                    }
                                case 5: {
                                        i[a + 496 + (z << 4) + 10 >> 0] = 5;
                                        k[a + 496 + (z << 4) + 12 >> 2] = 1;
                                        k[v >> 2] = b;
                                        c = 1;
                                        break f;
                                    }
                                case 17: {
                                        c = i[a + 496 + (z << 4) + 10 >> 0] | 0;
                                        if (c << 24 >> 24 != 10) {
                                            A = 55;
                                            break f;
                                        }
                                        i[w >> 0] = 10;
                                        c = 1;
                                        break e;
                                    }
                                default: {
                                        i[a + 496 + (z << 4) + 10 >> 0] = u;
                                        c = u;
                                        A = 55;
                                        break f;
                                    }
                                }
                            else {
                                d = c & 1;
                                c = d & 255;
                                if ((u + -8 & 255) >= 3)
                                    i[w >> 0] = c;
                                i[a + 496 + (z << 4) + 10 >> 0] = c;
                                i[a + 496 + (z << 4) + 9 >> 0] = c;
                                k[a + 496 + (z << 4) + 12 >> 2] = d;
                                k[v >> 2] = b;
                                A = 55;
                            }
                        while (0);
                    if ((A | 0) == 55)
                        switch (c << 24 >> 24) {
                        case 0:
                        case 1:
                        case 13:
                            break;
                        default: {
                                c = 1;
                                break e;
                            }
                        }
                    f = 1 << (c << 24 >> 24 != 0 & 1);
                    c = j[a + 496 + (z << 4) + 4 >> 1] | 0;
                    A = j[a + 496 + (z << 4) + 6 >> 1] | 0;
                    e = A & 65535;
                    if ((c & 65535) < (A & 65535)) {
                        d = k[a + 484 >> 2] | 0;
                        c = c & 65535;
                        do {
                            if ((k[d + (c * 24 | 0) >> 2] | 0) < (b | 0)) {
                                a = d + (c * 24 | 0) + 12 | 0;
                                j[a >> 1] = m[a >> 1] | f;
                            }
                            c = c + 1 | 0;
                        } while ((c | 0) < (e | 0));
                        c = 1;
                    } else
                        c = 1;
                }
            while (0);
        return c | 0;
    }
    function ob(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0;
        e = k[a + 492 >> 2] | 0;
        if (!(1 << (l[(k[(k[a >> 2] | 0) + 76 >> 2] | 0) + b >> 0] | 0) & 7864320)) {
            j[a + 496 + (e << 4) + 6 >> 1] = j[a + 496 + (e << 4) + 4 >> 1] | 0;
            i[a + 496 + (e << 4) + 8 >> 0] = d;
            d = ((d & 127) >>> 0 > (c & 127) >>> 0 ? d : c) & 1;
            k[a + 496 + (e << 4) + 12 >> 2] = d;
            d = d & 255;
            i[a + 496 + (e << 4) + 10 >> 0] = d;
            i[a + 496 + (e << 4) + 9 >> 0] = d;
            k[a + 496 + (e << 4) >> 2] = b;
        }
        return;
    }
    function pb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, l = 0, n = 0, o = 0, p = 0, q = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0;
        A = r;
        r = r + 32 | 0;
        z = A;
        y = k[a + 76 >> 2] | 0;
        if ((k[a + 128 >> 2] | 0) > (b | 0)) {
            if ((i[a + 98 >> 0] | 0) != 0 ? (f = k[a + 140 >> 2] | 0, (k[f >> 2] | 0) <= (b | 0)) : 0)
                f = eb(k[a + 136 >> 2] | 0, f, b) | 0;
            else
                f = i[a + 97 >> 0] | 0;
            if (f & 1)
                u = ((k[a + 88 >> 2] | 0) + -5 | 0) >>> 0 < 2;
            else
                u = 0;
        } else
            u = 0;
        k[z + 12 >> 2] = -1;
        k[z + 16 >> 2] = -1;
        k[z + 24 >> 2] = b;
        t = i[(k[a + 80 >> 2] | 0) + b >> 0] | 0;
        i[z + 28 >> 0] = t;
        t = t & 1;
        s = k[a + 116 >> 2] | 0;
        k[z >> 2] = k[s + (t << 2) >> 2];
        k[z + 4 >> 2] = k[s + 8 + (t << 2) >> 2];
        if ((b | 0) == 0 ? (g = k[a + 104 >> 2] | 0, (g | 0) > 0) : 0) {
            l = k[a + 100 >> 2] | 0;
            a:
                while (1) {
                    if ((g | 0) <= 0) {
                        f = 4;
                        x = 16;
                        break;
                    }
                    h = g + -1 | 0;
                    f = m[l + (h << 1) >> 1] | 0;
                    if ((g | 0) > 1 & (f & 64512 | 0) == 56320 ? (n = g + -2 | 0, o = m[l + (n << 1) >> 1] | 0, (o & 64512 | 0) == 55296) : 0) {
                        g = n;
                        f = f + -56613888 + (o << 10) | 0;
                    } else
                        g = h;
                    switch ((kb(a, f) | 0) & 255 | 0) {
                    case 0: {
                            f = 0;
                            x = 16;
                            break a;
                        }
                    case 13:
                    case 1: {
                            x = 17;
                            break a;
                        }
                    case 7: {
                            f = 4;
                            break a;
                        }
                    default: {
                        }
                    }
                }
            if ((x | 0) != 16)
                if ((x | 0) == 17)
                    f = 1;
            d = f << 24 >> 24 == 4 ? d : f;
        }
        f = y + b | 0;
        if ((i[f >> 0] | 0) == 22 ? (p = a + 244 | 0, q = k[p >> 2] | 0, (q | 0) > -1) : 0) {
            t = k[a + 248 >> 2] | 0;
            k[z + 8 >> 2] = k[t + (q << 4) >> 2];
            g = k[t + (q << 4) + 4 >> 2] | 0;
            f = j[t + (q << 4) + 12 >> 1] | 0;
            k[z + 20 >> 2] = k[t + (q << 4) + 8 >> 2];
            k[p >> 2] = q + -1;
        } else {
            k[z + 8 >> 2] = -1;
            if ((i[f >> 0] | 0) == 17)
                f = (d & 255) + 1 & 65535;
            else
                f = 0;
            k[z + 20 >> 2] = 0;
            rb(a, z, d, b, b);
            p = a + 244 | 0;
            g = b;
        }
        b:
            do
                if ((b | 0) > (c | 0)) {
                    o = g;
                    n = f;
                } else {
                    t = b;
                    d = -1;
                    h = 1;
                    s = b;
                    while (1) {
                        q = (t | 0) < (c | 0);
                        if (!q) {
                            n = c;
                            do {
                                n = n + -1 | 0;
                                l = i[y + n >> 0] | 0;
                                if ((n | 0) <= (b | 0))
                                    break;
                            } while ((1 << (l & 255) & 382976 | 0) != 0);
                            if ((l & -2) << 24 >> 24 == 20) {
                                o = g;
                                n = f;
                                break b;
                            } else
                                o = e;
                        } else {
                            l = i[y + t >> 0] | 0;
                            if (l << 24 >> 24 == 7)
                                k[p >> 2] = -1;
                            if (u)
                                if (l << 24 >> 24 != 13)
                                    if (l << 24 >> 24 == 2) {
                                        c:
                                            do
                                                if ((d | 0) <= (t | 0)) {
                                                    d = t;
                                                    while (1) {
                                                        d = d + 1 | 0;
                                                        if ((d | 0) >= (c | 0)) {
                                                            d = c;
                                                            h = 1;
                                                            break c;
                                                        }
                                                        h = i[y + d >> 0] | 0;
                                                        switch (h << 24 >> 24) {
                                                        case 13:
                                                        case 1:
                                                        case 0:
                                                            break c;
                                                        default: {
                                                            }
                                                        }
                                                    }
                                                }
                                            while (0);
                                        n = h;
                                        h = h << 24 >> 24 == 13 ? 5 : 2;
                                    } else {
                                        n = h;
                                        h = l;
                                    }
                                else {
                                    n = h;
                                    h = 1;
                                }
                            else {
                                n = h;
                                h = l;
                            }
                            o = i[67127 + (h & 255) >> 0] | 0;
                            h = n;
                        }
                        l = f & 65535;
                        n = i[(o & 255) + (67152 + (l << 4)) >> 0] | 0;
                        f = n & 31;
                        n = (n & 255) >>> 5;
                        n = (t | 0) == (c | 0) & n << 24 >> 24 == 0 ? 1 : n & 255;
                        d:
                            do
                                if (!(n << 16 >> 16))
                                    l = s;
                                else {
                                    l = i[67152 + (l << 4) + 15 >> 0] | 0;
                                    switch (n & 65535 | 0) {
                                    case 1: {
                                            rb(a, z, l, g, t);
                                            g = t;
                                            l = s;
                                            break d;
                                        }
                                    case 2: {
                                            l = t;
                                            break d;
                                        }
                                    case 3: {
                                            rb(a, z, l, g, s);
                                            rb(a, z, 4, s, t);
                                            g = t;
                                            l = s;
                                            break d;
                                        }
                                    case 4: {
                                            rb(a, z, l, g, s);
                                            g = s;
                                            l = t;
                                            break d;
                                        }
                                    default: {
                                            l = s;
                                            break d;
                                        }
                                    }
                                }
                            while (0);
                        if (q) {
                            t = t + 1 | 0;
                            s = l;
                        } else {
                            o = g;
                            n = f;
                            break;
                        }
                    }
                }
            while (0);
        l = a + 16 | 0;
        if ((k[l >> 2] | 0) == (c | 0) ? (v = k[a + 112 >> 2] | 0, (v | 0) > 0) : 0) {
            h = k[a + 108 >> 2] | 0;
            g = 0;
            e:
                while (1) {
                    if ((g | 0) >= (v | 0)) {
                        f = 4;
                        x = 55;
                        break;
                    }
                    d = g + 1 | 0;
                    f = m[h + (g << 1) >> 1] | 0;
                    if (!((d | 0) == (v | 0) | (f & 64512 | 0) != 55296) ? (w = m[h + (d << 1) >> 1] | 0, (w & 64512 | 0) == 56320) : 0) {
                        d = g + 2 | 0;
                        f = (f << 10) + -56613888 + w | 0;
                    }
                    switch ((kb(a, f) | 0) & 255 | 0) {
                    case 0: {
                            f = 0;
                            x = 55;
                            break e;
                        }
                    case 13:
                    case 1: {
                            x = 56;
                            break e;
                        }
                    case 2: {
                            x = 57;
                            break e;
                        }
                    case 5: {
                            f = 3;
                            break e;
                        }
                    default:
                        g = d;
                    }
                }
            if ((x | 0) != 55)
                if ((x | 0) == 56)
                    f = 1;
                else if ((x | 0) == 57)
                    f = 2;
            f = f << 24 >> 24 == 4 ? e : f;
        } else
            f = e;
        g = c;
        do {
            g = g + -1 | 0;
            d = i[y + g >> 0] | 0;
            if ((g | 0) <= (b | 0))
                break;
        } while ((1 << (d & 255) & 382976 | 0) != 0);
        if ((d & -2) << 24 >> 24 == 20 ? (k[l >> 2] | 0) > (c | 0) : 0) {
            b = (k[p >> 2] | 0) + 1 | 0;
            k[p >> 2] = b;
            a = k[a + 248 >> 2] | 0;
            j[a + (b << 4) + 12 >> 1] = n;
            k[a + (b << 4) + 8 >> 2] = k[z + 20 >> 2];
            k[a + (b << 4) + 4 >> 2] = o;
            k[a + (b << 4) >> 2] = k[z + 8 >> 2];
        } else
            rb(a, z, f, c, c);
        r = A;
        return;
    }
    function qb(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0;
        i = a + 332 | 0;
        d = k[i >> 2] | 0;
        do
            if (!d) {
                h = Mb(80) | 0;
                d = a + 348 | 0;
                k[d >> 2] = h;
                if (!h) {
                    k[a + 344 >> 2] = 7;
                    break;
                } else {
                    k[i >> 2] = 10;
                    g = d;
                    f = 10;
                    e = 6;
                    break;
                }
            } else {
                g = a + 348 | 0;
                f = d;
                e = 6;
            }
        while (0);
        a:
            do
                if ((e | 0) == 6) {
                    h = a + 336 | 0;
                    d = k[h >> 2] | 0;
                    do
                        if ((d | 0) >= (f | 0)) {
                            d = k[g >> 2] | 0;
                            e = Nb(d, f << 4) | 0;
                            k[g >> 2] = e;
                            if (!e) {
                                k[g >> 2] = d;
                                k[a + 344 >> 2] = 7;
                                break a;
                            } else {
                                k[i >> 2] = k[i >> 2] << 1;
                                d = k[h >> 2] | 0;
                                break;
                            }
                        } else
                            e = k[g >> 2] | 0;
                    while (0);
                    k[e + (d << 3) >> 2] = b;
                    k[e + (d << 3) + 4 >> 2] = c;
                    k[h >> 2] = (k[h >> 2] | 0) + 1;
                }
            while (0);
        return;
    }
    function rb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0;
        j = k[b >> 2] | 0;
        s = k[b + 4 >> 2] | 0;
        q = a + 80 | 0;
        r = k[q >> 2] | 0;
        t = b + 20 | 0;
        m = k[t >> 2] & 255;
        g = l[(c & 255) + (j + (m << 3)) >> 0] | 0;
        p = g & 15;
        k[t >> 2] = p;
        g = i[s + (g >>> 4) >> 0] | 0;
        p = i[j + (p << 3) + 7 >> 0] | 0;
        a:
            do
                if (!(g << 24 >> 24))
                    g = d;
                else
                    do
                        switch (g & 255 | 0) {
                        case 1: {
                                k[b + 8 >> 2] = d;
                                g = d;
                                break a;
                            }
                        case 2: {
                                g = k[b + 8 >> 2] | 0;
                                break a;
                            }
                        case 3: {
                                sb(k[a + 76 >> 2] | 0, r, k[b + 8 >> 2] | 0, d, (l[b + 28 >> 0] | 0) + 1 & 255);
                                g = d;
                                break a;
                            }
                        case 4: {
                                sb(k[a + 76 >> 2] | 0, r, k[b + 8 >> 2] | 0, d, (l[b + 28 >> 0] | 0) + 2 & 255);
                                g = d;
                                break a;
                            }
                        case 5: {
                                g = b + 12 | 0;
                                h = k[g >> 2] | 0;
                                if ((h | 0) > -1)
                                    qb(a, h, 1);
                                k[g >> 2] = -1;
                                if ((k[a + 332 >> 2] | 0) != 0 ? (n = a + 336 | 0, f = k[n >> 2] | 0, o = a + 340 | 0, (f | 0) > (k[o >> 2] | 0)) : 0) {
                                    h = b + 16 | 0;
                                    g = (k[h >> 2] | 0) + 1 | 0;
                                    if ((g | 0) < (d | 0)) {
                                        f = g;
                                        do {
                                            t = r + f | 0;
                                            i[t >> 0] = (l[t >> 0] | 0) + 254 & 254;
                                            f = f + 1 | 0;
                                        } while ((f | 0) != (d | 0));
                                        f = k[n >> 2] | 0;
                                    }
                                    k[o >> 2] = f;
                                    k[h >> 2] = -1;
                                    if (c << 24 >> 24 != 5) {
                                        g = d;
                                        break a;
                                    }
                                    qb(a, d, 1);
                                    k[o >> 2] = k[n >> 2];
                                    g = d;
                                    break a;
                                }
                                k[b + 16 >> 2] = -1;
                                if (!(i[j + (m << 3) + 7 >> 0] & 1))
                                    f = d;
                                else {
                                    f = k[b + 8 >> 2] | 0;
                                    f = (f | 0) > 0 ? f : d;
                                }
                                if (c << 24 >> 24 != 5) {
                                    g = f;
                                    break a;
                                }
                                qb(a, d, 1);
                                k[a + 340 >> 2] = k[a + 336 >> 2];
                                g = f;
                                break a;
                            }
                        case 6: {
                                if ((k[a + 332 >> 2] | 0) > 0)
                                    k[a + 336 >> 2] = k[a + 340 >> 2];
                                k[b + 8 >> 2] = -1;
                                k[b + 12 >> 2] = -1;
                                k[b + 16 >> 2] = e + -1;
                                g = d;
                                break a;
                            }
                        case 7: {
                                if ((c << 24 >> 24 == 3 ? (i[(k[a + 76 >> 2] | 0) + d >> 0] | 0) == 5 : 0) ? (k[a + 88 >> 2] | 0) != 6 : 0) {
                                    f = b + 12 | 0;
                                    g = k[f >> 2] | 0;
                                    if ((g | 0) == -1) {
                                        k[b + 16 >> 2] = e + -1;
                                        g = d;
                                        break a;
                                    }
                                    if ((g | 0) > -1) {
                                        qb(a, g, 1);
                                        k[f >> 2] = -2;
                                    }
                                    qb(a, d, 1);
                                    g = d;
                                    break a;
                                }
                                f = b + 12 | 0;
                                if ((k[f >> 2] | 0) != -1) {
                                    g = d;
                                    break a;
                                }
                                k[f >> 2] = d;
                                g = d;
                                break a;
                            }
                        case 8: {
                                k[b + 16 >> 2] = e + -1;
                                k[b + 8 >> 2] = -1;
                                g = d;
                                break a;
                            }
                        case 9: {
                                f = d;
                                while (1) {
                                    t = f;
                                    f = f + -1 | 0;
                                    if ((t | 0) <= 0)
                                        break;
                                    if (i[r + f >> 0] & 1) {
                                        h = 36;
                                        break;
                                    }
                                }
                                if ((h | 0) == 36) {
                                    qb(a, f, 4);
                                    k[a + 340 >> 2] = k[a + 336 >> 2];
                                }
                                k[b + 8 >> 2] = d;
                                g = d;
                                break a;
                            }
                        case 10: {
                                qb(a, d, 1);
                                qb(a, d, 2);
                                g = d;
                                break a;
                            }
                        case 11: {
                                f = a + 340 | 0;
                                g = a + 336 | 0;
                                k[g >> 2] = k[f >> 2];
                                if (c << 24 >> 24 != 5) {
                                    g = d;
                                    break a;
                                }
                                qb(a, d, 4);
                                k[f >> 2] = k[g >> 2];
                                g = d;
                                break a;
                            }
                        case 12: {
                                m = (l[b + 28 >> 0] | 0) + (p & 255) | 0;
                                h = m & 255;
                                j = b + 8 | 0;
                                f = k[j >> 2] | 0;
                                m = m & 255;
                                if ((f | 0) < (d | 0))
                                    do {
                                        g = r + f | 0;
                                        if ((l[g >> 0] | 0) >>> 0 < m >>> 0)
                                            i[g >> 0] = h;
                                        f = f + 1 | 0;
                                    } while ((f | 0) != (d | 0));
                                k[a + 340 >> 2] = k[a + 336 >> 2];
                                k[j >> 2] = d;
                                g = d;
                                break a;
                            }
                        case 13: {
                                h = i[b + 28 >> 0] | 0;
                                j = b + 8 | 0;
                                o = h & 255;
                                m = o + 3 | 0;
                                n = o + 2 | 0;
                                o = o + 1 & 255;
                                if ((k[j >> 2] | 0) < (d | 0))
                                    f = d;
                                else {
                                    g = d;
                                    break a;
                                }
                                do {
                                    f = f + -1 | 0;
                                    g = i[r + f >> 0] | 0;
                                    if ((g & 255 | 0) == (m | 0)) {
                                        do {
                                            g = f;
                                            f = f + -1 | 0;
                                            i[r + g >> 0] = o;
                                            g = i[r + f >> 0] | 0;
                                        } while ((g & 255 | 0) == (m | 0));
                                        if (g << 24 >> 24 == h << 24 >> 24)
                                            do {
                                                f = f + -1 | 0;
                                                g = i[r + f >> 0] | 0;
                                            } while (g << 24 >> 24 == h << 24 >> 24);
                                    }
                                    i[r + f >> 0] = (g & 255 | 0) == (n | 0) ? h : o;
                                } while ((f | 0) > (k[j >> 2] | 0));
                                g = d;
                                break;
                            }
                        case 14: {
                                m = b + 8 | 0;
                                n = (l[b + 28 >> 0] | 0) + 1 & 255;
                                f = k[m >> 2] | 0;
                                if ((f | 0) < (d | 0))
                                    j = d;
                                else {
                                    g = d;
                                    break a;
                                }
                                do {
                                    j = j + -1 | 0;
                                    g = r + j | 0;
                                    h = l[g >> 0] | 0;
                                    if (h >>> 0 > n >>> 0) {
                                        i[g >> 0] = h + 254;
                                        f = k[m >> 2] | 0;
                                    }
                                } while ((j | 0) > (f | 0));
                                g = d;
                                break;
                            }
                        default: {
                                g = d;
                                break a;
                            }
                        }
                    while (0);
            while (0);
        do
            if (p << 24 >> 24 != 0 | (g | 0) < (d | 0)) {
                f = (l[b + 28 >> 0] | 0) + (p & 255) & 255;
                if ((g | 0) < (k[b + 24 >> 2] | 0)) {
                    sb(k[a + 76 >> 2] | 0, k[q >> 2] | 0, g, e, f);
                    break;
                }
                if ((g | 0) < (e | 0))
                    Nc(r + g | 0, f | 0, e - g | 0) | 0;
            }
        while (0);
        return;
    }
    function sb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0;
        if ((c | 0) < (d | 0)) {
            f = 0;
            while (1) {
                g = i[a + c >> 0] | 0;
                f = ((g << 24 >> 24 == 22) << 31 >> 31) + f | 0;
                if (!f)
                    i[b + c >> 0] = e;
                c = c + 1 | 0;
                if ((c | 0) == (d | 0))
                    break;
                else
                    f = f + ((g & -2) << 24 >> 24 == 20 & 1) | 0;
            }
        }
        return;
    }
    function tb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, l = 0, m = 0, n = 0;
        n = k[(k[a >> 2] | 0) + 76 >> 2] | 0;
        e = b + 1 | 0;
        l = d & 255;
        m = a + 496 + (k[a + 492 >> 2] << 4) + 6 | 0;
        b = j[m >> 1] | 0;
        a:
            do
                if ((e | 0) < (b & 65535 | 0)) {
                    h = e;
                    g = (k[a + 484 >> 2] | 0) + (e * 24 | 0) | 0;
                    while (1) {
                        e = g + 4 | 0;
                        if ((k[e >> 2] | 0) <= -1) {
                            if ((k[g + 8 >> 2] | 0) > (c | 0))
                                break a;
                            f = k[g >> 2] | 0;
                            if ((f | 0) > (c | 0)) {
                                if ((l | 0) == (k[g + 16 >> 2] | 0))
                                    break a;
                                i[n + f >> 0] = d;
                                b = 0 - (k[e >> 2] | 0) | 0;
                                i[n + b >> 0] = d;
                                k[e >> 2] = 0;
                                tb(a, h, f, d);
                                tb(a, h, b, d);
                                b = j[m >> 1] | 0;
                            }
                        }
                        h = h + 1 | 0;
                        if ((h | 0) >= (b & 65535 | 0))
                            break;
                        else
                            g = g + 24 | 0;
                    }
                }
            while (0);
        return;
    }
    function ub(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, l = 0, m = 0;
        l = k[a + 492 >> 2] | 0;
        m = a + 496 + (l << 4) + 6 | 0;
        d = j[m >> 1] | 0;
        e = d & 65535;
        h = a + 488 | 0;
        if ((e | 0) >= (k[h >> 2] | 0)) {
            f = k[a >> 2] | 0;
            g = f + 56 | 0;
            f = f + 32 | 0;
            if (!((cb(g, f, 1, e * 48 | 0) | 0) << 24 >> 24))
                d = 0;
            else {
                d = a + 484 | 0;
                e = a + 4 | 0;
                if ((k[d >> 2] | 0) == (e | 0))
                    Qc(k[g >> 2] | 0, e | 0, 480) | 0;
                e = k[g >> 2] | 0;
                k[d >> 2] = e;
                k[h >> 2] = ((k[f >> 2] | 0) >>> 0) / 24 | 0;
                d = j[m >> 1] | 0;
                i = 7;
            }
        } else {
            e = k[a + 484 >> 2] | 0;
            i = 7;
        }
        if ((i | 0) == 7) {
            i = d & 65535;
            k[e + (i * 24 | 0) >> 2] = c;
            k[e + (i * 24 | 0) + 4 >> 2] = b & 65535;
            k[e + (i * 24 | 0) + 16 >> 2] = k[a + 496 + (l << 4) + 12 >> 2];
            k[e + (i * 24 | 0) + 8 >> 2] = k[a + 496 + (l << 4) >> 2];
            j[e + (i * 24 | 0) + 12 >> 1] = 0;
            j[m >> 1] = d + 1 << 16 >> 16;
            d = 1;
        }
        return d | 0;
    }
    function vb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, m = 0, n = 0, o = 0, p = 0, q = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0;
        A = r;
        r = r + 16 | 0;
        y = A + 4 | 0;
        z = A;
        a:
            do
                if ((e | 0) != 0 ? (k[e >> 2] | 0) <= 0 : 0) {
                    if ((((a | 0) != 0 ? (x = k[a + 8 >> 2] | 0, (x | 0) != 0) : 0) ? (g = k[a + 16 >> 2] | 0, (g | c | 0) >= 0) : 0) ? (f = (b | 0) == 0, !(f & (c | 0) > 0)) : 0) {
                        do
                            if (!f) {
                                if (!(x >>> 0 >= b >>> 0 & x >>> 0 < (b + (c << 1) | 0) >>> 0)) {
                                    if (x >>> 0 > b >>> 0)
                                        break;
                                    if ((x + (k[a + 12 >> 2] << 1) | 0) >>> 0 <= b >>> 0)
                                        break;
                                }
                                k[e >> 2] = 1;
                                d = 0;
                                break a;
                            }
                        while (0);
                        if (!g) {
                            d = Pb(b, c, 0, e) | 0;
                            break;
                        }
                        v = Ab(a, e) | 0;
                        if ((k[e >> 2] | 0) > 0) {
                            d = 0;
                            break;
                        }
                        f = k[a + 92 >> 2] | 0;
                        if (f & 1)
                            d = (d & 65523 | 4) & 65535;
                        if (f & 2)
                            d = (d & 65523 | 8) & 65535;
                        if (((k[a + 88 >> 2] | 0) + -3 | 0) >>> 0 < 4)
                            w = d;
                        else
                            w = d & 65531;
                        f = w & 65535;
                        d = (f & 4 | 0) != 0;
                        b:
                            do
                                if (!(f & 16)) {
                                    if (!d) {
                                        m = f & 65533;
                                        if ((v | 0) > 0) {
                                            h = b;
                                            d = c;
                                            n = 0;
                                        } else {
                                            d = c;
                                            break;
                                        }
                                        while (1) {
                                            u = (Cb(a, n, y, z) | 0) == 0;
                                            f = x + (k[y >> 2] << 1) | 0;
                                            g = k[z >> 2] | 0;
                                            if (u)
                                                f = xb(f, g, h, d, m, e) | 0;
                                            else
                                                f = wb(f, g, h, d, w, e) | 0;
                                            k[z >> 2] = f;
                                            d = d - f | 0;
                                            n = n + 1 | 0;
                                            if ((n | 0) == (v | 0))
                                                break b;
                                            else
                                                h = (h | 0) == 0 ? 0 : h + (f << 1) | 0;
                                        }
                                    }
                                    q = k[a + 76 >> 2] | 0;
                                    s = a + 228 | 0;
                                    t = a + 84 | 0;
                                    o = f & 65533;
                                    if ((v | 0) > 0) {
                                        d = c;
                                        f = b;
                                        p = 0;
                                        do {
                                            B = Cb(a, p, y, z) | 0;
                                            h = k[y >> 2] | 0;
                                            n = x + (h << 1) | 0;
                                            g = k[(k[s >> 2] | 0) + (p * 12 | 0) + 8 >> 2] | 0;
                                            g = (g | 0) < 0 ? 0 : g;
                                            m = (i[t >> 0] | 0) != 0;
                                            do
                                                if (!B) {
                                                    if (m)
                                                        g = (i[q + h >> 0] | 0) != 0 | g;
                                                    if (!(g & 1)) {
                                                        if (g & 4) {
                                                            h = 8207;
                                                            u = 35;
                                                        }
                                                    } else {
                                                        h = 8206;
                                                        u = 35;
                                                    }
                                                    if ((u | 0) == 35) {
                                                        u = 0;
                                                        if ((d | 0) > 0) {
                                                            j[f >> 1] = h;
                                                            f = f + 2 | 0;
                                                        }
                                                        d = d + -1 | 0;
                                                    }
                                                    h = xb(n, k[z >> 2] | 0, f, d, o, e) | 0;
                                                    k[z >> 2] = h;
                                                    f = (f | 0) == 0 ? 0 : f + (h << 1) | 0;
                                                    d = d - h | 0;
                                                    if (i[t >> 0] | 0)
                                                        g = (i[q + (h + -1 + (k[y >> 2] | 0)) >> 0] | 0) == 0 ? g : g | 2;
                                                    if (!(g & 2))
                                                        if (!(g & 8))
                                                            break;
                                                        else
                                                            g = 8207;
                                                    else
                                                        g = 8206;
                                                    if ((d | 0) > 0) {
                                                        j[f >> 1] = g;
                                                        f = f + 2 | 0;
                                                    }
                                                    d = d + -1 | 0;
                                                } else {
                                                    if (m)
                                                        g = (1 << l[q + (h + -1 + (k[z >> 2] | 0)) >> 0] & 8194 | 0) == 0 ? g | 4 : g;
                                                    if (!(g & 1)) {
                                                        if (g & 4) {
                                                            h = 8207;
                                                            u = 49;
                                                        }
                                                    } else {
                                                        h = 8206;
                                                        u = 49;
                                                    }
                                                    if ((u | 0) == 49) {
                                                        u = 0;
                                                        if ((d | 0) > 0) {
                                                            j[f >> 1] = h;
                                                            f = f + 2 | 0;
                                                        }
                                                        d = d + -1 | 0;
                                                    }
                                                    B = wb(n, k[z >> 2] | 0, f, d, w, e) | 0;
                                                    k[z >> 2] = B;
                                                    f = (f | 0) == 0 ? 0 : f + (B << 1) | 0;
                                                    d = d - B | 0;
                                                    if (i[t >> 0] | 0)
                                                        g = (1 << l[q + (k[y >> 2] | 0) >> 0] & 8194 | 0) == 0 ? g | 8 : g;
                                                    if (!(g & 2))
                                                        if (!(g & 8))
                                                            break;
                                                        else
                                                            g = 8207;
                                                    else
                                                        g = 8206;
                                                    if ((d | 0) > 0) {
                                                        j[f >> 1] = g;
                                                        f = f + 2 | 0;
                                                    }
                                                    d = d + -1 | 0;
                                                }
                                            while (0);
                                            p = p + 1 | 0;
                                        } while ((p | 0) != (v | 0));
                                    } else
                                        d = c;
                                } else {
                                    if (!d) {
                                        o = f & 65533;
                                        if ((v | 0) > 0) {
                                            n = b;
                                            d = c;
                                            h = v;
                                        } else {
                                            d = c;
                                            break;
                                        }
                                        while (1) {
                                            m = h;
                                            h = h + -1 | 0;
                                            B = (Cb(a, h, y, z) | 0) == 0;
                                            f = x + (k[y >> 2] << 1) | 0;
                                            g = k[z >> 2] | 0;
                                            if (B)
                                                f = wb(f, g, n, d, o, e) | 0;
                                            else
                                                f = xb(f, g, n, d, w, e) | 0;
                                            k[z >> 2] = f;
                                            d = d - f | 0;
                                            if ((m | 0) <= 1)
                                                break b;
                                            else
                                                n = (n | 0) == 0 ? 0 : n + (f << 1) | 0;
                                        }
                                    }
                                    q = k[a + 76 >> 2] | 0;
                                    p = f & 65533;
                                    if ((v | 0) > 0) {
                                        f = b;
                                        d = c;
                                        n = v;
                                        do {
                                            o = n;
                                            n = n + -1 | 0;
                                            B = Cb(a, n, y, z) | 0;
                                            g = k[y >> 2] | 0;
                                            m = x + (g << 1) | 0;
                                            do
                                                if (!B) {
                                                    h = k[z >> 2] | 0;
                                                    if (i[q + (g + -1 + h) >> 0] | 0) {
                                                        if ((d | 0) > 0) {
                                                            j[f >> 1] = 8206;
                                                            f = f + 2 | 0;
                                                        }
                                                        d = d + -1 | 0;
                                                    }
                                                    B = wb(m, h, f, d, p, e) | 0;
                                                    k[z >> 2] = B;
                                                    f = (f | 0) == 0 ? 0 : f + (B << 1) | 0;
                                                    d = d - B | 0;
                                                    if (!(i[q + (k[y >> 2] | 0) >> 0] | 0))
                                                        break;
                                                    if ((d | 0) > 0) {
                                                        j[f >> 1] = 8206;
                                                        f = f + 2 | 0;
                                                    }
                                                    d = d + -1 | 0;
                                                } else {
                                                    if (!(1 << l[q + g >> 0] & 8194)) {
                                                        if ((d | 0) > 0) {
                                                            j[f >> 1] = 8207;
                                                            f = f + 2 | 0;
                                                        }
                                                        d = d + -1 | 0;
                                                    }
                                                    B = xb(m, k[z >> 2] | 0, f, d, w, e) | 0;
                                                    k[z >> 2] = B;
                                                    f = (f | 0) == 0 ? 0 : f + (B << 1) | 0;
                                                    d = d - B | 0;
                                                    if (1 << l[q + (B + -1 + (k[y >> 2] | 0)) >> 0] & 8194)
                                                        break;
                                                    if ((d | 0) > 0) {
                                                        j[f >> 1] = 8207;
                                                        f = f + 2 | 0;
                                                    }
                                                    d = d + -1 | 0;
                                                }
                                            while (0);
                                        } while ((o | 0) > 1);
                                    } else
                                        d = c;
                                }
                            while (0);
                        d = Pb(b, c, c - d | 0, e) | 0;
                        break;
                    }
                    k[e >> 2] = 1;
                    d = 0;
                } else
                    d = 0;
            while (0);
        r = A;
        return d | 0;
    }
    function wb(a, b, c, d, e, f) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, l = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0;
        i = e & 65535;
        a:
            do
                switch (i & 11 | 0) {
                case 0: {
                        if ((d | 0) < (b | 0)) {
                            k[f >> 2] = 15;
                            e = b;
                            break a;
                        } else
                            f = b;
                        while (1) {
                            e = f + -1 | 0;
                            if ((f | 0) > 1 ? (j[a + (e << 1) >> 1] & -1024) << 16 >> 16 == -9216 : 0) {
                                u = f + -2 | 0;
                                e = (j[a + (u << 1) >> 1] & -1024) << 16 >> 16 == -10240 ? u : e;
                            }
                            h = e + 1 | 0;
                            i = (f | 0) > (h | 0);
                            g = c;
                            d = e;
                            while (1) {
                                j[g >> 1] = j[a + (d << 1) >> 1] | 0;
                                d = d + 1 | 0;
                                if ((d | 0) >= (f | 0))
                                    break;
                                else
                                    g = g + 2 | 0;
                            }
                            c = c + ((i ? f : h) - e << 1) | 0;
                            if ((e | 0) <= 0) {
                                e = b;
                                break;
                            } else
                                f = e;
                        }
                        break;
                    }
                case 1: {
                        if ((d | 0) < (b | 0)) {
                            k[f >> 2] = 15;
                            e = b;
                            break a;
                        } else
                            l = b;
                        while (1) {
                            g = l;
                            while (1) {
                                h = g + -1 | 0;
                                e = m[a + (h << 1) >> 1] | 0;
                                if ((g | 0) > 1 & (e & 64512 | 0) == 56320 ? (n = g + -2 | 0, o = m[a + (n << 1) >> 1] | 0, (o & 64512 | 0) == 55296) : 0) {
                                    g = n;
                                    e = e + -56613888 + (o << 10) | 0;
                                } else
                                    g = h;
                                if ((g | 0) <= 0) {
                                    h = 0;
                                    break;
                                }
                                if (!(1 << ((Qb(e) | 0) << 24 >> 24) & 448)) {
                                    h = 1;
                                    break;
                                }
                            }
                            i = g + 1 | 0;
                            d = (l | 0) > (i | 0);
                            e = c;
                            f = g;
                            while (1) {
                                j[e >> 1] = j[a + (f << 1) >> 1] | 0;
                                f = f + 1 | 0;
                                if ((f | 0) >= (l | 0))
                                    break;
                                else
                                    e = e + 2 | 0;
                            }
                            c = c + ((d ? l : i) - g << 1) | 0;
                            if (!h) {
                                e = b;
                                break;
                            } else
                                l = g;
                        }
                        break;
                    }
                default: {
                        p = (i & 8 | 0) != 0;
                        if (p) {
                            g = a;
                            e = 0;
                            h = b;
                            while (1) {
                                o = m[g >> 1] | 0;
                                e = (((o + -8294 | 0) >>> 0 < 4 | ((o & 65532 | 0) == 8204 | (o + -8234 | 0) >>> 0 < 5)) & 1 ^ 1) + e | 0;
                                if ((h | 0) <= 1)
                                    break;
                                else {
                                    g = g + 2 | 0;
                                    h = h + -1 | 0;
                                }
                            }
                            o = a + (((b | 0) < 1 ? 1 - b | 0 : 0) << 1) | 0;
                        } else {
                            o = a;
                            e = b;
                        }
                        if ((e | 0) > (d | 0)) {
                            k[f >> 2] = 15;
                            break a;
                        }
                        n = (i & 1 | 0) != 0;
                        l = (i & 2 | 0) == 0;
                        f = b;
                        while (1) {
                            g = f + -1 | 0;
                            h = m[o + (g << 1) >> 1] | 0;
                            if ((f | 0) > 1 & (h & 64512 | 0) == 56320 ? (s = f + -2 | 0, t = m[o + (s << 1) >> 1] | 0, (t & 64512 | 0) == 55296) : 0) {
                                g = s;
                                h = h + -56613888 + (t << 10) | 0;
                            }
                            b:
                                do
                                    if (n & (g | 0) > 0)
                                        while (1) {
                                            if (!(1 << ((Qb(h) | 0) << 24 >> 24) & 448)) {
                                                d = g;
                                                g = h;
                                                break b;
                                            }
                                            i = g + -1 | 0;
                                            h = m[o + (i << 1) >> 1] | 0;
                                            if ((g | 0) > 1 & (h & 64512 | 0) == 56320 ? (q = g + -2 | 0, r = m[o + (q << 1) >> 1] | 0, (r & 64512 | 0) == 55296) : 0) {
                                                g = q;
                                                h = h + -56613888 + (r << 10) | 0;
                                            } else
                                                g = i;
                                            if ((g | 0) <= 0) {
                                                d = g;
                                                g = h;
                                                break;
                                            }
                                        }
                                    else {
                                        d = g;
                                        g = h;
                                    }
                                while (0);
                            if (p) {
                                if ((g & -4 | 0) != 8204)
                                    switch (g | 0) {
                                    case 8234:
                                    case 8235:
                                    case 8236:
                                    case 8237:
                                    case 8238:
                                    case 8294:
                                    case 8295:
                                    case 8296:
                                    case 8297:
                                        break;
                                    default:
                                        u = 38;
                                    }
                            } else
                                u = 38;
                            if ((u | 0) == 38) {
                                u = 0;
                                if (l)
                                    g = d;
                                else {
                                    g = Sb(g) | 0;
                                    if (g >>> 0 < 65536) {
                                        j[c >> 1] = g;
                                        g = 1;
                                    } else {
                                        j[c >> 1] = (g >>> 10) + 55232;
                                        j[c + 2 >> 1] = g & 1023 | 56320;
                                        g = 2;
                                    }
                                    c = c + (g << 1) | 0;
                                    g = g + d | 0;
                                }
                                i = ((g | 0) > (f | 0) ? g : f) - g | 0;
                                if ((g | 0) < (f | 0)) {
                                    h = c;
                                    while (1) {
                                        j[h >> 1] = j[o + (g << 1) >> 1] | 0;
                                        g = g + 1 | 0;
                                        if ((g | 0) == (f | 0))
                                            break;
                                        else
                                            h = h + 2 | 0;
                                    }
                                }
                                c = c + (i << 1) | 0;
                            }
                            if ((d | 0) > 0)
                                f = d;
                            else
                                break;
                        }
                    }
                }
            while (0);
        return e | 0;
    }
    function xb(a, b, c, d, e, f) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, l = 0, n = 0;
        a:
            do
                switch (e & 10 | 0) {
                case 0: {
                        if ((d | 0) < (b | 0)) {
                            k[f >> 2] = 15;
                            break a;
                        } else {
                            e = b;
                            while (1) {
                                j[c >> 1] = j[a >> 1] | 0;
                                if ((e | 0) > 1) {
                                    a = a + 2 | 0;
                                    c = c + 2 | 0;
                                    e = e + -1 | 0;
                                } else
                                    break;
                            }
                        }
                        break;
                    }
                case 2: {
                        if ((d | 0) < (b | 0)) {
                            k[f >> 2] = 15;
                            break a;
                        } else {
                            i = 0;
                            l = 0;
                        }
                        while (1) {
                            g = i + 1 | 0;
                            e = m[a + (i << 1) >> 1] | 0;
                            if (!((g | 0) == (b | 0) | (e & 64512 | 0) != 55296) ? (n = m[a + (g << 1) >> 1] | 0, (n & 64512 | 0) == 56320) : 0) {
                                e = (e << 10) + -56613888 + n | 0;
                                g = i + 2 | 0;
                            }
                            e = Sb(e) | 0;
                            if (e >>> 0 < 65536)
                                h = l + 1 | 0;
                            else {
                                j[c + (l + 1 << 1) >> 1] = e & 1023 | 56320;
                                e = (e >>> 10) + 55232 | 0;
                                h = l + 2 | 0;
                            }
                            j[c + (l << 1) >> 1] = e;
                            if ((g | 0) < (b | 0)) {
                                i = g;
                                l = h;
                            } else
                                break;
                        }
                        break;
                    }
                case 8: {
                        h = d;
                        b:
                            while (1) {
                                g = a;
                                a = a + 2 | 0;
                                g = j[g >> 1] | 0;
                                e = g & 65535;
                                c:
                                    do
                                        if ((e & 65532 | 0) == 8204)
                                            e = h;
                                        else {
                                            switch (e | 0) {
                                            case 8234:
                                            case 8235:
                                            case 8236:
                                            case 8237:
                                            case 8238:
                                            case 8294:
                                            case 8295:
                                            case 8296:
                                            case 8297: {
                                                    e = h;
                                                    break c;
                                                }
                                            default: {
                                                }
                                            }
                                            e = h + -1 | 0;
                                            if ((h | 0) < 1)
                                                break b;
                                            j[c >> 1] = g;
                                            c = c + 2 | 0;
                                        }
                                    while (0);
                                if ((b | 0) <= 1) {
                                    i = 22;
                                    break;
                                } else {
                                    b = b + -1 | 0;
                                    h = e;
                                }
                            }
                        if ((i | 0) == 22) {
                            b = d - e | 0;
                            break a;
                        }
                        k[f >> 2] = 15;
                        if ((b | 0) > 1) {
                            c = e;
                            while (1) {
                                b = b + -1 | 0;
                                f = m[a >> 1] | 0;
                                c = ((((f + -8294 | 0) >>> 0 < 4 | ((f & 65532 | 0) == 8204 | (f + -8234 | 0) >>> 0 < 5)) ^ 1) << 31 >> 31) + c | 0;
                                if ((b | 0) <= 1) {
                                    b = c;
                                    break;
                                } else
                                    a = a + 2 | 0;
                            }
                        } else
                            b = e;
                        b = d - b | 0;
                        break;
                    }
                default: {
                        i = b;
                        b = 0;
                        h = d;
                        d:
                            while (1) {
                                e = m[a >> 1] | 0;
                                if (!((i | 0) == 1 | (e & 64512 | 0) != 55296) ? (l = m[a + 2 >> 1] | 0, (l & 64512 | 0) == 56320) : 0) {
                                    e = (e << 10) + -56613888 + l | 0;
                                    g = 2;
                                } else
                                    g = 1;
                                a = a + (g << 1) | 0;
                                i = i - g | 0;
                                e:
                                    do
                                        if ((e & -4 | 0) != 8204) {
                                            switch (e | 0) {
                                            case 8234:
                                            case 8235:
                                            case 8236:
                                            case 8237:
                                            case 8238:
                                            case 8294:
                                            case 8295:
                                            case 8296:
                                            case 8297: {
                                                    e = h;
                                                    break e;
                                                }
                                            default: {
                                                }
                                            }
                                            g = h - g | 0;
                                            if ((g | 0) < 0)
                                                break d;
                                            e = Sb(e) | 0;
                                            if (e >>> 0 < 65536) {
                                                j[c + (b << 1) >> 1] = e;
                                                b = b + 1 | 0;
                                                e = g;
                                                break;
                                            } else {
                                                j[c + (b << 1) >> 1] = (e >>> 10) + 55232;
                                                j[c + (b + 1 << 1) >> 1] = e & 1023 | 56320;
                                                b = b + 2 | 0;
                                                e = g;
                                                break;
                                            }
                                        } else
                                            e = h;
                                    while (0);
                                if ((i | 0) <= 0)
                                    break a;
                                else
                                    h = e;
                            }
                        k[f >> 2] = 15;
                        if ((i | 0) > 0) {
                            c = i;
                            b = g;
                            while (1) {
                                f = m[a >> 1] | 0;
                                b = ((((f + -8294 | 0) >>> 0 < 4 | ((f & 65532 | 0) == 8204 | (f + -8234 | 0) >>> 0 < 5)) ^ 1) << 31 >> 31) + b | 0;
                                if ((c | 0) > 1) {
                                    c = c + -1 | 0;
                                    a = a + 2 | 0;
                                } else
                                    break;
                            }
                        } else
                            b = g;
                        b = d - b | 0;
                    }
                }
            while (0);
        return b | 0;
    }
    function yb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0;
        do
            if ((e | 0) != 0 ? (k[e >> 2] | 0) <= 0 : 0) {
                if ((a | 0) != 0 ? (k[a >> 2] | 0) == (a | 0) : 0) {
                    if (!((b | 0) > -1 & (c | 0) > (b | 0))) {
                        k[e >> 2] = 1;
                        break;
                    }
                    if ((c | 0) >= 0 ? (k[a + 16 >> 2] | 0) >= (c | 0) : 0) {
                        if (!d) {
                            k[e >> 2] = 1;
                            break;
                        }
                        s = jb(a, b, e) | 0;
                        p = c + -1 | 0;
                        if ((s | 0) != (jb(a, p, e) | 0)) {
                            k[e >> 2] = 1;
                            break;
                        }
                        k[d >> 2] = 0;
                        g = a + 8 | 0;
                        k[d + 8 >> 2] = (k[g >> 2] | 0) + (b << 1);
                        q = c - b | 0;
                        k[d + 16 >> 2] = q;
                        k[d + 12 >> 2] = q;
                        n = d + 20 | 0;
                        k[n >> 2] = q;
                        if ((i[a + 98 >> 0] | 0) != 0 ? (f = k[a + 140 >> 2] | 0, (k[f >> 2] | 0) <= (b | 0)) : 0) {
                            e = k[a + 136 >> 2] | 0;
                            s = eb(e, f, b) | 0;
                        } else {
                            s = i[a + 97 >> 0] | 0;
                            e = k[a + 136 >> 2] | 0;
                        }
                        r = d + 97 | 0;
                        i[r >> 0] = s;
                        k[d + 136 >> 2] = e;
                        k[d + 228 >> 2] = 0;
                        k[d + 124 >> 2] = 0;
                        k[d + 88 >> 2] = k[a + 88 >> 2];
                        k[d + 92 >> 2] = k[a + 92 >> 2];
                        j = d + 352 | 0;
                        k[j >> 2] = 0;
                        if ((k[a + 352 >> 2] | 0) > 0) {
                            g = k[g >> 2] | 0;
                            e = 0;
                            h = b;
                            do {
                                f = m[g + (h << 1) >> 1] | 0;
                                if ((f & 65532 | 0) == 8204)
                                    o = 23;
                                else
                                    switch (f | 0) {
                                    case 8234:
                                    case 8235:
                                    case 8236:
                                    case 8237:
                                    case 8238:
                                    case 8294:
                                    case 8295:
                                    case 8296:
                                    case 8297: {
                                            o = 23;
                                            break;
                                        }
                                    default: {
                                        }
                                    }
                                if ((o | 0) == 23) {
                                    o = 0;
                                    e = e + 1 | 0;
                                    k[j >> 2] = e;
                                }
                                h = h + 1 | 0;
                            } while ((h | 0) != (c | 0));
                            k[n >> 2] = q - e;
                        }
                        g = k[a + 76 >> 2] | 0;
                        k[d + 76 >> 2] = g + b;
                        n = k[a + 80 >> 2] | 0;
                        j = n + b | 0;
                        k[d + 80 >> 2] = j;
                        k[d + 224 >> 2] = -1;
                        e = k[a + 120 >> 2] | 0;
                        a:
                            do
                                if ((e | 0) != 2) {
                                    k[d + 120 >> 2] = e;
                                    e = k[a + 132 >> 2] | 0;
                                    if ((e | 0) <= (b | 0)) {
                                        k[d + 132 >> 2] = 0;
                                        break;
                                    }
                                    if ((e | 0) < (c | 0)) {
                                        k[d + 132 >> 2] = e - b;
                                        break;
                                    } else {
                                        k[d + 132 >> 2] = q;
                                        break;
                                    }
                                } else {
                                    if ((i[g + p >> 0] | 0) == 7) {
                                        h = d + 132 | 0;
                                        k[h >> 2] = q;
                                        g = q;
                                    } else {
                                        f = q;
                                        while (1) {
                                            if ((f | 0) <= 0)
                                                break;
                                            e = f + -1 | 0;
                                            if (!(1 << l[g + (e + b) >> 0] & 8248192))
                                                break;
                                            else
                                                f = e;
                                        }
                                        while (1) {
                                            if ((f | 0) <= 0)
                                                break;
                                            e = f + -1 | 0;
                                            if ((i[n + (e + b) >> 0] | 0) == s << 24 >> 24)
                                                f = e;
                                            else
                                                break;
                                        }
                                        h = d + 132 | 0;
                                        k[h >> 2] = f;
                                        g = f;
                                    }
                                    do
                                        if (g) {
                                            e = l[j >> 0] & 1;
                                            do
                                                if ((g | 0) < (q | 0)) {
                                                    if ((s & 1 | 0) == (e | 0)) {
                                                        f = 1;
                                                        break;
                                                    }
                                                    k[d + 120 >> 2] = 2;
                                                    break a;
                                                } else
                                                    f = 1;
                                            while (0);
                                            while (1) {
                                                if ((f | 0) == (g | 0)) {
                                                    o = 45;
                                                    break;
                                                }
                                                if ((l[n + (f + b) >> 0] & 1 | 0) == (e | 0))
                                                    f = f + 1 | 0;
                                                else {
                                                    o = 47;
                                                    break;
                                                }
                                            }
                                            if ((o | 0) == 45) {
                                                k[d + 120 >> 2] = e;
                                                break;
                                            } else if ((o | 0) == 47) {
                                                k[d + 120 >> 2] = 2;
                                                break a;
                                            }
                                        } else {
                                            e = s & 1;
                                            k[d + 120 >> 2] = e;
                                        }
                                    while (0);
                                    switch (e | 0) {
                                    case 0: {
                                            i[r >> 0] = (s & 255) + 1 & 254;
                                            k[h >> 2] = 0;
                                            break a;
                                        }
                                    case 1: {
                                            i[r >> 0] = s & 255 | 1;
                                            k[h >> 2] = 0;
                                            break a;
                                        }
                                    default:
                                        break a;
                                    }
                                }
                            while (0);
                        k[d >> 2] = a;
                        break;
                    }
                    k[e >> 2] = 1;
                    break;
                }
                k[e >> 2] = 27;
            }
        while (0);
        return;
    }
    function zb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0;
        a:
            do
                if ((b | 0) != 0 ? (k[b >> 2] | 0) <= 0 : 0) {
                    do
                        if (a) {
                            c = k[a >> 2] | 0;
                            if ((c | 0) != (a | 0)) {
                                if (!c)
                                    break;
                                if ((k[c >> 2] | 0) != (c | 0))
                                    break;
                            }
                            d = k[a + 16 >> 2] | 0;
                            if ((d | 0) < 1) {
                                k[b >> 2] = 1;
                                c = 0;
                                break a;
                            }
                            e = a + 132 | 0;
                            f = k[e >> 2] | 0;
                            if ((d | 0) == (f | 0)) {
                                c = k[a + 80 >> 2] | 0;
                                break a;
                            }
                            c = a + 52 | 0;
                            if (!((cb(c, a + 28 | 0, i[a + 72 >> 0] | 0, d) | 0) << 24 >> 24)) {
                                k[b >> 2] = 7;
                                c = 0;
                                break a;
                            }
                            c = k[c >> 2] | 0;
                            b = a + 80 | 0;
                            if ((f | 0) > 0 ? (g = k[b >> 2] | 0, (c | 0) != (g | 0)) : 0)
                                Qc(c | 0, g | 0, f | 0) | 0;
                            Nc(c + f | 0, i[a + 97 >> 0] | 0, d - f | 0) | 0;
                            k[e >> 2] = d;
                            k[b >> 2] = c;
                            break a;
                        }
                    while (0);
                    k[b >> 2] = 27;
                    c = 0;
                } else
                    c = 0;
            while (0);
        return c | 0;
    }
    function Ab(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0;
        a:
            do
                if ((b | 0) != 0 ? (k[b >> 2] | 0) <= 0 : 0) {
                    do
                        if (a) {
                            c = k[a >> 2] | 0;
                            if ((c | 0) != (a | 0)) {
                                if (!c)
                                    break;
                                if ((k[c >> 2] | 0) != (c | 0))
                                    break;
                            }
                            Bb(a, b);
                            if ((k[b >> 2] | 0) > 0) {
                                c = -1;
                                break a;
                            }
                            c = k[a + 224 >> 2] | 0;
                            break a;
                        }
                    while (0);
                    k[b >> 2] = 27;
                    c = -1;
                } else
                    c = -1;
            while (0);
        return c | 0;
    }
    function Bb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, n = 0, o = 0, p = 0, q = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0;
        F = r;
        r = r + 16 | 0;
        y = F;
        A = a + 224 | 0;
        a:
            do
                if ((k[A >> 2] | 0) <= -1) {
                    do
                        if ((k[a + 120 >> 2] | 0) == 2) {
                            w = a + 16 | 0;
                            o = k[w >> 2] | 0;
                            s = a + 80 | 0;
                            z = k[s >> 2] | 0;
                            x = a + 132 | 0;
                            p = k[x >> 2] | 0;
                            if ((p | 0) > 0) {
                                f = 0;
                                g = -2;
                                e = 0;
                                do {
                                    v = g;
                                    g = i[z + f >> 0] | 0;
                                    e = (g << 24 >> 24 != v << 24 >> 24 & 1) + e | 0;
                                    f = f + 1 | 0;
                                } while ((f | 0) != (p | 0));
                                if ((o | 0) == (p | 0) & (e | 0) == 1) {
                                    y = i[z >> 0] | 0;
                                    z = a + 232 | 0;
                                    k[a + 228 >> 2] = z;
                                    k[A >> 2] = 1;
                                    k[z >> 2] = (y & 255) << 31;
                                    k[a + 236 >> 2] = o;
                                    k[a + 240 >> 2] = 0;
                                    break;
                                }
                            } else
                                e = 0;
                            j = (o | 0) > (p | 0);
                            v = e + (j & 1) | 0;
                            e = a + 64 | 0;
                            if (!((cb(e, a + 40 | 0, i[a + 73 >> 0] | 0, v * 12 | 0) | 0) << 24 >> 24))
                                break a;
                            t = k[e >> 2] | 0;
                            g = 0;
                            n = 0;
                            e = 126;
                            u = 0;
                            while (1) {
                                f = i[z + g >> 0] | 0;
                                e = (f & 255) < (e & 255) ? f : e;
                                n = (f & 255) > (n & 255) ? f : n;
                                h = g;
                                while (1) {
                                    h = h + 1 | 0;
                                    if ((h | 0) >= (p | 0)) {
                                        f = 0;
                                        break;
                                    }
                                    if ((i[z + h >> 0] | 0) != f << 24 >> 24) {
                                        f = 1;
                                        break;
                                    }
                                }
                                k[t + (u * 12 | 0) >> 2] = g;
                                k[t + (u * 12 | 0) + 4 >> 2] = h - g;
                                k[t + (u * 12 | 0) + 8 >> 2] = 0;
                                u = u + 1 | 0;
                                if (!f)
                                    break;
                                else
                                    g = h;
                            }
                            if (j) {
                                k[t + (u * 12 | 0) >> 2] = p;
                                k[t + (u * 12 | 0) + 4 >> 2] = o - p;
                                q = i[a + 97 >> 0] | 0;
                                e = (q & 255) < (e & 255) ? q : e;
                            }
                            k[a + 228 >> 2] = t;
                            k[A >> 2] = v;
                            if ((n & 255) >>> 0 > (e & 255 | 1) >>> 0) {
                                q = e + 1 << 24 >> 24;
                                p = k[s >> 2] | 0;
                                o = (((k[x >> 2] | 0) < (k[w >> 2] | 0)) << 31 >> 31) + v | 0;
                                e = n + -1 << 24 >> 24;
                                if ((e & 255) >= (q & 255)) {
                                    n = (o | 0) > 0;
                                    do {
                                        b:
                                            do
                                                if (n) {
                                                    f = 0;
                                                    do
                                                        if ((l[p + (k[t + (f * 12 | 0) >> 2] | 0) >> 0] | 0) < (e & 255))
                                                            f = f + 1 | 0;
                                                        else {
                                                            j = f;
                                                            while (1) {
                                                                g = j + 1 | 0;
                                                                if ((g | 0) >= (o | 0))
                                                                    break;
                                                                if ((l[p + (k[t + (g * 12 | 0) >> 2] | 0) >> 0] | 0) < (e & 255))
                                                                    break;
                                                                else
                                                                    j = g;
                                                            }
                                                            if ((f | 0) < (j | 0)) {
                                                                h = j;
                                                                do {
                                                                    G = t + (f * 12 | 0) | 0;
                                                                    k[y >> 2] = k[G >> 2];
                                                                    k[y + 4 >> 2] = k[G + 4 >> 2];
                                                                    k[y + 8 >> 2] = k[G + 8 >> 2];
                                                                    s = t + (h * 12 | 0) | 0;
                                                                    k[G >> 2] = k[s >> 2];
                                                                    k[G + 4 >> 2] = k[s + 4 >> 2];
                                                                    k[G + 8 >> 2] = k[s + 8 >> 2];
                                                                    k[s >> 2] = k[y >> 2];
                                                                    k[s + 4 >> 2] = k[y + 4 >> 2];
                                                                    k[s + 8 >> 2] = k[y + 8 >> 2];
                                                                    f = f + 1 | 0;
                                                                    h = h + -1 | 0;
                                                                } while ((f | 0) < (h | 0));
                                                            }
                                                            if ((g | 0) == (o | 0))
                                                                break b;
                                                            f = j + 2 | 0;
                                                        }
                                                    while ((f | 0) < (o | 0));
                                                }
                                            while (0);
                                        e = e + -1 << 24 >> 24;
                                    } while ((e & 255) >= (q & 255));
                                }
                                if ((q & 1) == 0 ? (c = (((k[x >> 2] | 0) == (k[w >> 2] | 0)) << 31 >> 31) + o | 0, (c | 0) > 0) : 0) {
                                    e = 0;
                                    do {
                                        x = t + (e * 12 | 0) | 0;
                                        k[y >> 2] = k[x >> 2];
                                        k[y + 4 >> 2] = k[x + 4 >> 2];
                                        k[y + 8 >> 2] = k[x + 8 >> 2];
                                        G = t + (c * 12 | 0) | 0;
                                        k[x >> 2] = k[G >> 2];
                                        k[x + 4 >> 2] = k[G + 4 >> 2];
                                        k[x + 8 >> 2] = k[G + 8 >> 2];
                                        k[G >> 2] = k[y >> 2];
                                        k[G + 4 >> 2] = k[y + 4 >> 2];
                                        k[G + 8 >> 2] = k[y + 8 >> 2];
                                        e = e + 1 | 0;
                                        c = c + -1 | 0;
                                    } while ((e | 0) < (c | 0));
                                }
                            }
                            if ((v | 0) > 0) {
                                c = 0;
                                e = 0;
                                do {
                                    G = t + (c * 12 | 0) | 0;
                                    y = k[G >> 2] | 0;
                                    k[G >> 2] = l[z + y >> 0] << 31 | y;
                                    G = t + (c * 12 | 0) + 4 | 0;
                                    e = (k[G >> 2] | 0) + e | 0;
                                    k[G >> 2] = e;
                                    c = c + 1 | 0;
                                } while ((c | 0) != (v | 0));
                            }
                            if ((u | 0) < (v | 0)) {
                                z = l[a + 97 >> 0] | 0;
                                G = t + (((z & 1 | 0) != 0 ? 0 : u) * 12 | 0) | 0;
                                k[G >> 2] = z << 31 | k[G >> 2];
                            }
                        } else {
                            z = i[a + 97 >> 0] | 0;
                            G = a + 232 | 0;
                            k[a + 228 >> 2] = G;
                            k[A >> 2] = 1;
                            k[G >> 2] = (z & 255) << 31;
                            k[a + 236 >> 2] = k[a + 16 >> 2];
                            k[a + 240 >> 2] = 0;
                        }
                    while (0);
                    c = k[a + 336 >> 2] | 0;
                    if ((c | 0) > 0) {
                        g = k[a + 348 >> 2] | 0;
                        c = g + (c << 3) | 0;
                        e = a + 228 | 0;
                        f = k[e >> 2] | 0;
                        do {
                            G = Eb(k[A >> 2] | 0, f, k[g >> 2] | 0, b) | 0;
                            f = k[e >> 2] | 0;
                            G = f + (G * 12 | 0) + 8 | 0;
                            k[G >> 2] = k[G >> 2] | k[g + 4 >> 2];
                            g = g + 8 | 0;
                        } while (g >>> 0 < c >>> 0);
                    }
                    if ((k[a + 352 >> 2] | 0) > 0 ? (d = k[a + 8 >> 2] | 0, G = k[a + 16 >> 2] | 0, B = d + (G << 1) | 0, C = d, D = a + 228 | 0, (G | 0) > 0) : 0)
                        do {
                            c = m[d >> 1] | 0;
                            if ((c & 65532 | 0) == 8204)
                                E = 44;
                            else
                                switch (c | 0) {
                                case 8234:
                                case 8235:
                                case 8236:
                                case 8237:
                                case 8238:
                                case 8294:
                                case 8295:
                                case 8296:
                                case 8297: {
                                        E = 44;
                                        break;
                                    }
                                default: {
                                    }
                                }
                            if ((E | 0) == 44) {
                                E = 0;
                                G = Eb(k[A >> 2] | 0, k[D >> 2] | 0, d - C >> 1, b) | 0;
                                G = (k[D >> 2] | 0) + (G * 12 | 0) + 8 | 0;
                                k[G >> 2] = (k[G >> 2] | 0) + -1;
                            }
                            d = d + 2 | 0;
                        } while (d >>> 0 < B >>> 0);
                }
            while (0);
        r = F;
        return;
    }
    function Cb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        h = r;
        r = r + 16 | 0;
        f = h;
        k[f >> 2] = 0;
        do
            if (a) {
                e = k[a >> 2] | 0;
                if ((e | 0) != (a | 0)) {
                    if (!e) {
                        g = 5;
                        break;
                    }
                    if ((k[e >> 2] | 0) != (e | 0)) {
                        g = 5;
                        break;
                    }
                }
                Bb(a, f);
                if ((k[f >> 2] | 0) > 0)
                    e = 0;
                else {
                    if ((b | 0) >= 0 ? (k[a + 224 >> 2] | 0) > (b | 0) : 0) {
                        e = k[a + 228 >> 2] | 0;
                        f = k[e + (b * 12 | 0) >> 2] | 0;
                        if (c)
                            k[c >> 2] = f & 2147483647;
                        do
                            if (d)
                                if ((b | 0) > 0) {
                                    k[d >> 2] = (k[e + (b * 12 | 0) + 4 >> 2] | 0) - (k[e + ((b + -1 | 0) * 12 | 0) + 4 >> 2] | 0);
                                    break;
                                } else {
                                    k[d >> 2] = k[e + 4 >> 2];
                                    break;
                                }
                        while (0);
                        e = f >>> 31;
                        break;
                    }
                    k[f >> 2] = 1;
                    e = 0;
                }
            } else
                g = 5;
        while (0);
        if ((g | 0) == 5) {
            k[f >> 2] = 27;
            e = 0;
        }
        r = h;
        return e | 0;
    }
    function Db(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, n = 0, o = 0, p = 0, q = 0;
        a:
            do
                if ((c | 0) != 0 ? (k[c >> 2] | 0) <= 0 : 0) {
                    if (!b) {
                        k[c >> 2] = 1;
                        break;
                    }
                    Ab(a, c) | 0;
                    if ((k[c >> 2] | 0) < 1 ? (q = k[a + 228 >> 2] | 0, n = a + 224 | 0, d = k[n >> 2] | 0, l = q + (d * 12 | 0) | 0, o = a + 20 | 0, (k[o >> 2] | 0) >= 1) : 0) {
                        if ((d | 0) > 0) {
                            h = b;
                            i = q;
                            j = 0;
                            while (1) {
                                d = k[i >> 2] | 0;
                                g = k[i + 4 >> 2] | 0;
                                if ((d | 0) > -1) {
                                    f = j + 1 | 0;
                                    c = h;
                                    e = j;
                                    while (1) {
                                        k[c >> 2] = d;
                                        e = e + 1 | 0;
                                        if ((e | 0) >= (g | 0))
                                            break;
                                        else {
                                            d = d + 1 | 0;
                                            c = c + 4 | 0;
                                        }
                                    }
                                    d = (g | 0) > (f | 0) ? g : f;
                                } else {
                                    f = j + 1 | 0;
                                    d = g - j + (d & 2147483647) | 0;
                                    c = h;
                                    e = j;
                                    while (1) {
                                        d = d + -1 | 0;
                                        k[c >> 2] = d;
                                        e = e + 1 | 0;
                                        if ((e | 0) >= (g | 0))
                                            break;
                                        else
                                            c = c + 4 | 0;
                                    }
                                    d = (g | 0) > (f | 0) ? g : f;
                                }
                                i = i + 12 | 0;
                                if (i >>> 0 >= l >>> 0)
                                    break;
                                else {
                                    h = h + (d - j << 2) | 0;
                                    j = d;
                                }
                            }
                        }
                        if ((k[a + 336 >> 2] | 0) <= 0) {
                            if ((k[a + 352 >> 2] | 0) <= 0)
                                break;
                            p = k[n >> 2] | 0;
                            n = a + 8 | 0;
                            if ((p | 0) > 0) {
                                a = 0;
                                d = 0;
                                o = 0;
                            } else
                                break;
                            while (1) {
                                g = o;
                                o = k[q + (a * 12 | 0) + 4 >> 2] | 0;
                                l = o - g | 0;
                                c = (k[q + (a * 12 | 0) + 8 >> 2] | 0) == 0;
                                do
                                    if (!((d | 0) == (g | 0) & c)) {
                                        if (c) {
                                            f = (o | 0) < (g | 0) ? g : o;
                                            if ((o | 0) > (g | 0)) {
                                                c = g;
                                                e = d;
                                                while (1) {
                                                    k[b + (e << 2) >> 2] = k[b + (c << 2) >> 2];
                                                    c = c + 1 | 0;
                                                    if ((c | 0) == (o | 0))
                                                        break;
                                                    else
                                                        e = e + 1 | 0;
                                                }
                                            }
                                            d = d - g + f | 0;
                                            break;
                                        }
                                        g = k[q + (a * 12 | 0) >> 2] | 0;
                                        f = g & 2147483647;
                                        g = (g | 0) > -1;
                                        h = l + -1 + f | 0;
                                        if ((l | 0) > 0) {
                                            i = k[n >> 2] | 0;
                                            j = 0;
                                            do {
                                                c = g ? j + f | 0 : h - j | 0;
                                                e = m[i + (c << 1) >> 1] | 0;
                                                b:
                                                    do
                                                        if ((e & 65532 | 0) != 8204) {
                                                            switch (e | 0) {
                                                            case 8234:
                                                            case 8235:
                                                            case 8236:
                                                            case 8237:
                                                            case 8238:
                                                            case 8294:
                                                            case 8295:
                                                            case 8296:
                                                            case 8297:
                                                                break b;
                                                            default: {
                                                                }
                                                            }
                                                            k[b + (d << 2) >> 2] = c;
                                                            d = d + 1 | 0;
                                                        }
                                                    while (0);
                                                j = j + 1 | 0;
                                            } while ((j | 0) != (l | 0));
                                        }
                                    } else
                                        d = o;
                                while (0);
                                a = a + 1 | 0;
                                if ((a | 0) == (p | 0))
                                    break a;
                            }
                        }
                        d = k[n >> 2] | 0;
                        if ((d | 0) > 0) {
                            c = 0;
                            e = 0;
                            do {
                                p = k[q + (c * 12 | 0) + 8 >> 2] | 0;
                                e = ((p & 5 | 0) != 0 & 1) + e + ((p & 10 | 0) != 0 & 1) | 0;
                                c = c + 1 | 0;
                            } while ((c | 0) != (d | 0));
                            if ((e | 0) > 0) {
                                c = k[o >> 2] | 0;
                                do {
                                    f = d;
                                    d = d + -1 | 0;
                                    j = k[q + (d * 12 | 0) + 8 >> 2] | 0;
                                    if (j & 10) {
                                        c = c + -1 | 0;
                                        k[b + (c << 2) >> 2] = -1;
                                        e = e + -1 | 0;
                                    }
                                    l = (f | 0) > 1;
                                    if (l)
                                        g = k[q + ((f + -2 | 0) * 12 | 0) + 4 >> 2] | 0;
                                    else
                                        g = 0;
                                    f = k[q + (d * 12 | 0) + 4 >> 2] | 0;
                                    if ((e | 0) > 0 & (f | 0) > (g | 0)) {
                                        h = g + c | 0;
                                        i = f;
                                        do {
                                            i = i + -1 | 0;
                                            c = c + -1 | 0;
                                            k[b + (c << 2) >> 2] = k[b + (i << 2) >> 2];
                                        } while ((i | 0) > (g | 0));
                                        c = h - f | 0;
                                    }
                                    if (j & 5) {
                                        c = c + -1 | 0;
                                        k[b + (c << 2) >> 2] = -1;
                                        e = e + -1 | 0;
                                    }
                                } while (l & (e | 0) > 0);
                            }
                        }
                    }
                }
            while (0);
        return;
    }
    function Eb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0;
        a:
            do
                if ((a | 0) > 0) {
                    e = 0;
                    f = 0;
                    while (1) {
                        i = f;
                        f = k[b + (e * 12 | 0) + 4 >> 2] | 0;
                        h = k[b + (e * 12 | 0) >> 2] & 2147483647;
                        if ((h | 0) <= (c | 0) ? (f - i + h | 0) > (c | 0) : 0)
                            break a;
                        e = e + 1 | 0;
                        if ((e | 0) >= (a | 0)) {
                            g = 5;
                            break;
                        }
                    }
                } else
                    g = 5;
            while (0);
        if ((g | 0) == 5) {
            k[d >> 2] = 27;
            e = 0;
        }
        return e | 0;
    }
    function Fb(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, i = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        p = r;
        r = r + 656 | 0;
        i = p + 32 | 0;
        o = p + 56 | 0;
        m = p + 28 | 0;
        n = p + 24 | 0;
        l = p;
        if (!e) {
            e = 0;
            r = p;
            return e | 0;
        }
        if ((k[e >> 2] | 0) > 0) {
            e = 0;
            r = p;
            return e | 0;
        }
        if (!((a | 0) == 0 | (b | 0) < -1) ? (f = (c | 0) == 0, !((d | 0) < 0 | f & (d | 0) != 0)) : 0) {
            if ((b | 0) == -1) {
                b = a;
                while (1)
                    if (!(j[b >> 1] | 0))
                        break;
                    else
                        b = b + 2 | 0;
                g = b - a >> 1;
            } else
                g = b;
            if ((g | 0) < 1) {
                e = Pb(c, d, 0, e) | 0;
                r = p;
                return e | 0;
            }
            do
                if (!f) {
                    if (!(a >>> 0 <= c >>> 0 & (a + (g << 1) | 0) >>> 0 > c >>> 0) ? !(c >>> 0 <= a >>> 0 & (c + (d << 1) | 0) >>> 0 > a >>> 0) : 0)
                        break;
                    k[e >> 2] = 1;
                    e = 0;
                    r = p;
                    return e | 0;
                }
            while (0);
            k[m >> 2] = 0;
            k[n >> 2] = 0;
            b = Hb(a, g) | 0;
            if ((b | 0) > (d | 0)) {
                k[e >> 2] = 15;
                e = b;
                r = p;
                return e | 0;
            }
            b = (g | 0) > (b | 0) ? g : b;
            if ((b | 0) >= 301) {
                f = Mb(b << 1) | 0;
                if (!f) {
                    k[e >> 2] = 7;
                    e = 0;
                    r = p;
                    return e | 0;
                } else
                    h = f;
            } else {
                b = 300;
                h = o;
            }
            Qc(h | 0, a | 0, g << 1 | 0) | 0;
            if ((b | 0) > (g | 0))
                Nc(h + (g << 1) | 0, 0, b - g << 1 | 0) | 0;
            Ib(h, g, m, n);
            Jb(h, g, k[m >> 2] | 0, k[n >> 2] | 0);
            j[l >> 1] = 8203;
            j[l + 2 >> 1] = 0;
            k[l + 4 >> 2] = 3;
            k[l + 8 >> 2] = 2;
            k[l + 12 >> 2] = 262144;
            k[l + 16 >> 2] = 393216;
            k[l + 20 >> 2] = 0;
            k[i >> 2] = k[l >> 2];
            k[i + 4 >> 2] = k[l + 4 >> 2];
            k[i + 8 >> 2] = k[l + 8 >> 2];
            k[i + 12 >> 2] = k[l + 12 >> 2];
            k[i + 16 >> 2] = k[l + 16 >> 2];
            k[i + 20 >> 2] = k[l + 20 >> 2];
            g = Kb(h, g, e, i) | 0;
            Ib(h, g, m, n);
            Jb(h, g, k[m >> 2] | 0, k[n >> 2] | 0);
            b = (g | 0) > (d | 0);
            f = b ? d : g;
            if ((f | 0) > 0)
                Qc(c | 0, h | 0, f << 1 | 0) | 0;
            if ((h | 0) != (o | 0))
                Ob(h);
            if (b) {
                k[e >> 2] = 15;
                e = g;
                r = p;
                return e | 0;
            } else {
                e = Pb(c, d, g, e) | 0;
                r = p;
                return e | 0;
            }
        }
        k[e >> 2] = 1;
        e = 0;
        r = p;
        return e | 0;
    }
    function Gb(a) {
        a = a | 0;
        var b = 0;
        b = a & 65535;
        if ((a + -1570 & 65535) < 178) {
            a = j[1898 + (b + -1570 << 1) >> 1] | 0;
            return a | 0;
        }
        if (a << 16 >> 16 == 8205) {
            a = 3;
            return a | 0;
        }
        if ((a + -8301 & 65535) < 3) {
            a = 4;
            return a | 0;
        }
        if ((a + 1200 & 65535) < 275) {
            a = l[68158 + (b + -64336) >> 0] | 0;
            return a | 0;
        }
        if ((a + 400 & 65535) >= 141) {
            a = 0;
            return a | 0;
        }
        a = l[68433 + (b + -65136) >> 0] | 0;
        return a | 0;
    }
    function Hb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
        e = b + -1 | 0;
        if ((b | 0) > 0) {
            c = b;
            f = 0;
        } else {
            h = b;
            return h | 0;
        }
        do {
            d = j[a + (f << 1) >> 1] | 0;
            if ((f | 0) < (e | 0) & d << 16 >> 16 == 1604 ? (g = (j[a + (f + 1 << 1) >> 1] | 0) + -1570 << 16 >> 16, (g & 65535) < 6) : 0) {
                if (43 >>> (g & 63) & 1)
                    h = 6;
            } else if ((d & -16) << 16 >> 16 == -400)
                h = 6;
            if ((h | 0) == 6) {
                h = 0;
                c = c + -1 | 0;
            }
            f = f + 1 | 0;
        } while ((f | 0) != (b | 0));
        return c | 0;
    }
    function Ib(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0;
        f = 0;
        while (1) {
            e = (f | 0) < (b | 0);
            if (e & (j[a + (f << 1) >> 1] | 0) == 32)
                f = f + 1 | 0;
            else
                break;
        }
        if (e) {
            e = 0;
            while (1) {
                b = b + -1 | 0;
                if ((j[a + (b << 1) >> 1] | 0) != 32)
                    break;
                else
                    e = e + 1 | 0;
            }
        } else
            e = 0;
        k[c >> 2] = f;
        k[d >> 2] = e;
        return;
    }
    function Jb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0;
        d = b - d + -1 | 0;
        if ((d | 0) <= (c | 0))
            return;
        do {
            f = a + (c << 1) | 0;
            e = j[f >> 1] | 0;
            b = a + (d << 1) | 0;
            j[f >> 1] = j[b >> 1] | 0;
            j[b >> 1] = e;
            c = c + 1 | 0;
            d = d + -1 | 0;
        } while ((c | 0) < (d | 0));
        return;
    }
    function Kb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0;
        z = (b | 0) > 0;
        if (z) {
            h = 0;
            do {
                g = a + (h << 1) | 0;
                e = j[g >> 1] | 0;
                f = e & 65535;
                do
                    if ((e + 1200 & 65535) < 176) {
                        e = j[1264 + (f + -64336 << 1) >> 1] | 0;
                        if (e << 16 >> 16)
                            j[g >> 1] = e;
                    } else if ((e + 400 & 65535) < 141) {
                        j[g >> 1] = j[1616 + (f + -65136 << 1) >> 1] | 0;
                        break;
                    } else {
                        j[g >> 1] = e;
                        break;
                    }
                while (0);
                h = h + 1 | 0;
            } while ((h | 0) != (b | 0));
        }
        e = b + -1 | 0;
        do
            if (b) {
                h = -2;
                t = Gb(j[a + (e << 1) >> 1] | 0) | 0;
                i = e;
                u = 0;
                n = 0;
                o = e;
                q = 0;
                y = 0;
                f = 0;
                e = 0;
                while (1) {
                    r = t & 65535;
                    if ((r & 65280 | 0) == 0 ? ((Gb(j[a + (i << 1) >> 1] | 0) | 0) & 4) == 0 : 0) {
                        s = h;
                        g = t;
                        h = i;
                        r = u;
                    } else
                        A = 13;
                    do
                        if ((A | 0) == 13) {
                            A = 0;
                            g = i + -1 | 0;
                            w = h;
                            h = q;
                            a:
                                while (1) {
                                    p = (w | 0) < 0;
                                    q = g;
                                    x = h;
                                    while (1) {
                                        if (!p)
                                            break a;
                                        if ((q | 0) == -1) {
                                            g = -1;
                                            w = 3000;
                                            h = 0;
                                            continue a;
                                        }
                                        h = Gb(j[a + (q << 1) >> 1] | 0) | 0;
                                        x = (h & 4) == 0;
                                        g = ((x ^ 1) << 31 >> 31) + q | 0;
                                        if (x) {
                                            w = q;
                                            continue a;
                                        } else {
                                            q = g;
                                            x = h;
                                        }
                                    }
                                }
                            if ((n & 16) == 0 | (r & 32 | 0) == 0) {
                                v = t;
                                h = i;
                            } else {
                                h = a + (i << 1) | 0;
                                switch (m[h >> 1] | 0) {
                                case 1570: {
                                        g = 1628;
                                        A = 23;
                                        break;
                                    }
                                case 1571: {
                                        g = 1629;
                                        A = 23;
                                        break;
                                    }
                                case 1573: {
                                        g = 1630;
                                        A = 23;
                                        break;
                                    }
                                case 1575: {
                                        g = 1631;
                                        A = 23;
                                        break;
                                    }
                                default: {
                                        g = 0;
                                        h = i;
                                    }
                                }
                                if ((A | 0) == 23) {
                                    A = 0;
                                    j[h >> 1] = -1;
                                    j[a + (o << 1) >> 1] = g;
                                    h = o;
                                }
                                v = Gb(g) | 0;
                                u = 1;
                                n = y;
                            }
                            if ((h | 0) > 0) {
                                if ((j[a + (h + -1 << 1) >> 1] | 0) == 32) {
                                    g = j[a + (h << 1) >> 1] | 0;
                                    if ((g + -1587 & 65535) < 4)
                                        f = 1;
                                    else
                                        e = g << 16 >> 16 == 1574 ? 1 : e;
                                }
                            } else if (!h) {
                                g = j[a >> 1] | 0;
                                if ((g + -1587 & 65535) < 4)
                                    f = 1;
                                else
                                    e = g << 16 >> 16 == 1574 ? 1 : e;
                            }
                            t = v & 65535;
                            s = t & 3;
                            q = n & 65535;
                            r = x & 65535;
                            i = l[68086 + ((r & 3) << 4) + ((q & 3) << 2) + s >> 0] | 0;
                            if ((s | 0) != 1) {
                                g = a + (h << 1) | 0;
                                p = j[g >> 1] | 0;
                                if ((p + -1611 & 65535) < 8)
                                    if ((q & 2 | 0) != 0 ? !((r & 1 | 0) == 0 | (p & -2) << 16 >> 16 == 1612) : 0) {
                                        s = g;
                                        i = q >>> 4 & 1 ^ 1 | r >>> 5 & 1 ^ 1;
                                    } else {
                                        s = g;
                                        i = 0;
                                    }
                                else
                                    s = g;
                            } else {
                                p = a + (h << 1) | 0;
                                s = p;
                                p = j[p >> 1] | 0;
                                i = i & 1;
                            }
                            g = p & 65535;
                            if ((g ^ 1536) >>> 0 < 256) {
                                if ((p + -1611 & 65535) < 8) {
                                    j[s >> 1] = i + 65136 + (l[68150 + (g + -1611) >> 0] | 0);
                                    s = w;
                                    g = v;
                                    r = u;
                                    q = x;
                                    break;
                                }
                                g = t >>> 8;
                                if (t & 8) {
                                    j[s >> 1] = g + 64336 + i;
                                    s = w;
                                    g = v;
                                    r = u;
                                    q = x;
                                    break;
                                }
                                if ((g | 0) != 0 & (t & 4 | 0) == 0) {
                                    j[s >> 1] = g + 65136 + i;
                                    s = w;
                                    g = v;
                                    r = u;
                                    q = x;
                                } else {
                                    s = w;
                                    g = v;
                                    r = u;
                                    q = x;
                                }
                            } else {
                                s = w;
                                g = v;
                                r = u;
                                q = x;
                            }
                        }
                    while (0);
                    i = (g & 4) == 0;
                    p = i ? n : y;
                    n = i ? g : n;
                    o = i ? h : o;
                    i = h + -1 | 0;
                    g = (h | 0) == 0;
                    if ((i | 0) == (s | 0))
                        if (g)
                            break;
                        else {
                            h = -2;
                            t = q;
                            u = r;
                            y = p;
                            continue;
                        }
                    if (g)
                        break;
                    h = s;
                    t = Gb(j[a + (i << 1) >> 1] | 0) | 0;
                    u = r;
                    y = p;
                }
                if (r) {
                    o = k[d + 4 >> 2] | 0;
                    r = k[d + 8 >> 2] | 0;
                    p = k[d + 12 >> 2] | 0;
                    q = k[d + 16 >> 2] | 0;
                    t = b << 1;
                    s = t + 2 | 0;
                    u = Mb(s) | 0;
                    if (!u) {
                        k[c >> 2] = 7;
                        b = 0;
                        break;
                    }
                    Nc(u | 0, 0, s | 0) | 0;
                    if (z) {
                        g = 0;
                        n = 0;
                        i = 0;
                        while (1) {
                            h = j[a + (n << 1) >> 1] | 0;
                            if (h << 16 >> 16 == -1) {
                                g = g + 1 | 0;
                                h = i + -1 | 0;
                            } else {
                                j[u + (i << 1) >> 1] = h;
                                h = i;
                            }
                            n = n + 1 | 0;
                            if ((n | 0) == (b | 0))
                                break;
                            else
                                i = h + 1 | 0;
                        }
                        if ((g | 0) > -1) {
                            i = 1;
                            A = 54;
                        } else
                            A = 61;
                    } else {
                        i = 0;
                        g = 0;
                        A = 54;
                    }
                    if ((A | 0) == 54) {
                        h = i ? b : 0;
                        while (1) {
                            j[u + (h << 1) >> 1] = 0;
                            if ((g | 0) > 0) {
                                g = g + -1 | 0;
                                h = h + -1 | 0;
                            } else
                                break;
                        }
                        if (i)
                            A = 61;
                        else
                            g = a;
                    }
                    if ((A | 0) == 61) {
                        Qc(a | 0, u | 0, t | 0) | 0;
                        g = a;
                    }
                    while (1)
                        if (!(j[g >> 1] | 0))
                            break;
                        else
                            g = g + 2 | 0;
                    if (o)
                        if (!p) {
                            n = 1;
                            o = 0;
                            A = 66;
                        } else
                            g = g - a >> 1;
                    else {
                        n = (p | 0) == 0;
                        o = 1;
                        A = 66;
                    }
                    if ((A | 0) == 66) {
                        Nc(u | 0, 0, s | 0) | 0;
                        if ((b | 0) > -1) {
                            h = 0;
                            p = b;
                            i = b;
                            while (1) {
                                g = j[a + (p << 1) >> 1] | 0;
                                if (o & g << 16 >> 16 == -1 | n & g << 16 >> 16 == -2) {
                                    h = h + 1 | 0;
                                    g = i + 1 | 0;
                                } else {
                                    j[u + (i << 1) >> 1] = g;
                                    g = i;
                                }
                                if ((p | 0) > 0) {
                                    p = p + -1 | 0;
                                    i = g + -1 | 0;
                                } else
                                    break;
                            }
                            if ((h | 0) > 0) {
                                g = 0;
                                do {
                                    j[u + (g << 1) >> 1] = 32;
                                    g = g + 1 | 0;
                                } while ((g | 0) != (h | 0));
                            }
                            if (z) {
                                Qc(a | 0, u | 0, t | 0) | 0;
                                g = b;
                            } else
                                g = b;
                        } else
                            g = b;
                    }
                    d = (r | 0) == 0;
                    c = (q | 0) == 0;
                    o = d ? 1 : 0;
                    p = d ? c : 1;
                    do
                        if (d | c) {
                            Nc(u | 0, 0, s | 0) | 0;
                            if (z) {
                                g = 0;
                                n = 0;
                                i = 0;
                                while (1) {
                                    h = j[a + (n << 1) >> 1] | 0;
                                    if (o & h << 16 >> 16 == -1 | p & h << 16 >> 16 == -2) {
                                        g = g + 1 | 0;
                                        h = i + -1 | 0;
                                    } else {
                                        j[u + (i << 1) >> 1] = h;
                                        h = i;
                                    }
                                    n = n + 1 | 0;
                                    if ((n | 0) == (b | 0))
                                        break;
                                    else
                                        i = h + 1 | 0;
                                }
                                if ((g | 0) > -1) {
                                    i = 1;
                                    A = 78;
                                }
                            } else {
                                i = 0;
                                g = 0;
                                A = 78;
                            }
                            if ((A | 0) == 78) {
                                h = i ? b : 0;
                                while (1) {
                                    j[u + (h << 1) >> 1] = 32;
                                    if ((g | 0) > 0) {
                                        g = g + -1 | 0;
                                        h = h + -1 | 0;
                                    } else
                                        break;
                                }
                                if (!i)
                                    break;
                            }
                            Qc(a | 0, u | 0, t | 0) | 0;
                        } else
                            b = g;
                    while (0);
                    Ob(u);
                }
            } else {
                b = 0;
                f = 0;
                e = 0;
            }
        while (0);
        if (!(e | f)) {
            a = b;
            return a | 0;
        }
        a = Lb(b) | 0;
        return a | 0;
    }
    function Lb(a) {
        a = a | 0;
        return a | 0;
    }
    function Mb(a) {
        a = a | 0;
        if (!a)
            a = 256;
        else
            a = Fc(a) | 0;
        return a | 0;
    }
    function Nb(a, b) {
        a = a | 0;
        b = b | 0;
        do
            if ((a | 0) != 256)
                if (!b) {
                    Gc(a);
                    a = 256;
                    break;
                } else {
                    a = Hc(a, b) | 0;
                    break;
                }
            else
                a = Mb(b) | 0;
        while (0);
        return a | 0;
    }
    function Ob(a) {
        a = a | 0;
        if ((a | 0) != 256)
            Gc(a);
        return;
    }
    function Pb(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        do
            if ((d | 0) != 0 ? !((c | 0) < 0 | (k[d >> 2] | 0) > 0) : 0) {
                if ((c | 0) < (b | 0)) {
                    j[a + (c << 1) >> 1] = 0;
                    if ((k[d >> 2] | 0) != -124)
                        break;
                    k[d >> 2] = 0;
                    break;
                }
                if ((c | 0) == (b | 0)) {
                    k[d >> 2] = -124;
                    break;
                } else {
                    k[d >> 2] = 15;
                    break;
                }
            }
        while (0);
        return c | 0;
    }
    function Qb(a) {
        a = a | 0;
        do
            if (a >>> 0 >= 55296) {
                if (a >>> 0 < 65536) {
                    a = ((m[2254 + (((a | 0) < 56320 ? 320 : 0) + (a >> 5) << 1) >> 1] | 0) << 2) + (a & 31) | 0;
                    break;
                }
                if (a >>> 0 > 1114111)
                    a = 4536;
                else
                    a = ((m[2254 + ((m[2254 + ((a >> 11) + 2080 << 1) >> 1] | 0) + (a >>> 5 & 63) << 1) >> 1] | 0) << 2) + (a & 31) | 0;
            } else
                a = ((m[2254 + (a >> 5 << 1) >> 1] | 0) << 2) + (a & 31) | 0;
        while (0);
        return (m[2254 + (a << 1) >> 1] | 0) & 31 | 0;
    }
    function Rb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0;
        do
            if (b >>> 0 >= 55296) {
                if (b >>> 0 < 65536) {
                    b = ((m[(k[a + 20 >> 2] | 0) + (((b | 0) < 56320 ? 320 : 0) + (b >> 5) << 1) >> 1] | 0) << 2) + (b & 31) | 0;
                    break;
                }
                if (b >>> 0 > 1114111) {
                    b = (k[a + 32 >> 2] | 0) + 128 | 0;
                    break;
                }
                if ((k[a + 52 >> 2] | 0) > (b | 0)) {
                    c = k[a + 20 >> 2] | 0;
                    b = ((m[c + ((m[c + ((b >> 11) + 2080 << 1) >> 1] | 0) + (b >>> 5 & 63) << 1) >> 1] | 0) << 2) + (b & 31) | 0;
                    break;
                } else {
                    b = k[a + 56 >> 2] | 0;
                    break;
                }
            } else
                b = ((m[(k[a + 20 >> 2] | 0) + (b >> 5 << 1) >> 1] | 0) << 2) + (b & 31) | 0;
        while (0);
        return (m[(k[a + 20 >> 2] | 0) + (b << 1) >> 1] | 0) & 31 | 0;
    }
    function Sb(a) {
        a = a | 0;
        var b = 0;
        do
            if (a >>> 0 >= 55296) {
                if (a >>> 0 < 65536) {
                    b = ((m[43814 + (((a | 0) < 56320 ? 320 : 0) + (a >> 5) << 1) >> 1] | 0) << 2) + (a & 31) | 0;
                    break;
                }
                if (a >>> 0 > 1114111)
                    b = 3624;
                else
                    b = ((m[43814 + ((m[43814 + ((a >> 11) + 2080 << 1) >> 1] | 0) + (a >>> 5 & 63) << 1) >> 1] | 0) << 2) + (a & 31) | 0;
            } else
                b = ((m[43814 + (a >> 5 << 1) >> 1] | 0) << 2) + (a & 31) | 0;
        while (0);
        return Vb(a, j[43814 + (b << 1) >> 1] | 0) | 0;
    }
    function Tb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0;
        do
            if (b >>> 0 >= 55296) {
                if (b >>> 0 < 65536) {
                    b = ((m[(k[a + 20 >> 2] | 0) + (((b | 0) < 56320 ? 320 : 0) + (b >> 5) << 1) >> 1] | 0) << 2) + (b & 31) | 0;
                    break;
                }
                if (b >>> 0 > 1114111) {
                    b = (k[a + 32 >> 2] | 0) + 128 | 0;
                    break;
                }
                if ((k[a + 52 >> 2] | 0) > (b | 0)) {
                    c = k[a + 20 >> 2] | 0;
                    b = ((m[c + ((m[c + ((b >> 11) + 2080 << 1) >> 1] | 0) + (b >>> 5 & 63) << 1) >> 1] | 0) << 2) + (b & 31) | 0;
                    break;
                } else {
                    b = k[a + 56 >> 2] | 0;
                    break;
                }
            } else
                b = ((m[(k[a + 20 >> 2] | 0) + (b >> 5 << 1) >> 1] | 0) << 2) + (b & 31) | 0;
        while (0);
        return (m[(k[a + 20 >> 2] | 0) + (b << 1) >> 1] | 0) >>> 8 & 3 | 0;
    }
    function Ub(a) {
        a = a | 0;
        var b = 0;
        do
            if (a >>> 0 >= 55296) {
                if (a >>> 0 < 65536) {
                    b = ((m[43814 + (((a | 0) < 56320 ? 320 : 0) + (a >> 5) << 1) >> 1] | 0) << 2) + (a & 31) | 0;
                    break;
                }
                if (a >>> 0 > 1114111)
                    b = 3624;
                else
                    b = ((m[43814 + ((m[43814 + ((a >> 11) + 2080 << 1) >> 1] | 0) + (a >>> 5 & 63) << 1) >> 1] | 0) << 2) + (a & 31) | 0;
            } else
                b = ((m[43814 + (a >> 5 << 1) >> 1] | 0) << 2) + (a & 31) | 0;
        while (0);
        b = j[43814 + (b << 1) >> 1] | 0;
        if (b & 768)
            a = Vb(a, b) | 0;
        return a | 0;
    }
    function Vb(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0;
        b = b << 16 >> 16 >> 13;
        a:
            do
                if ((b | 0) == -4) {
                    d = 0;
                    while (1) {
                        if ((d | 0) >= 26)
                            break a;
                        b = k[424 + (d << 2) >> 2] | 0;
                        c = b & 2097151;
                        if ((c | 0) == (a | 0))
                            break;
                        if ((c | 0) > (a | 0))
                            break a;
                        else
                            d = d + 1 | 0;
                    }
                    a = k[424 + (b >>> 21 << 2) >> 2] & 2097151;
                } else
                    a = b + a | 0;
            while (0);
        return a | 0;
    }
    function Wb(a) {
        a = a | 0;
        Gc(a);
        return;
    }
    function Xb(a) {
        a = a | 0;
        return;
    }
    function Yb(a) {
        a = a | 0;
        return;
    }
    function Zb(a) {
        a = a | 0;
        return;
    }
    function _b(a) {
        a = a | 0;
        Wb(a);
        return;
    }
    function $b(a) {
        a = a | 0;
        Wb(a);
        return;
    }
    function ac(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0;
        g = r;
        r = r + 64 | 0;
        f = g;
        if ((a | 0) != (b | 0))
            if ((b | 0) != 0 ? (e = ec(b, 32) | 0, (e | 0) != 0) : 0) {
                b = f;
                d = b + 56 | 0;
                do {
                    k[b >> 2] = 0;
                    b = b + 4 | 0;
                } while ((b | 0) < (d | 0));
                k[f >> 2] = e;
                k[f + 8 >> 2] = a;
                k[f + 12 >> 2] = -1;
                k[f + 48 >> 2] = 1;
                Oa[k[(k[e >> 2] | 0) + 28 >> 2] & 3](e, f, k[c >> 2] | 0, 1);
                if ((k[f + 24 >> 2] | 0) == 1) {
                    k[c >> 2] = k[f + 16 >> 2];
                    b = 1;
                } else
                    b = 0;
            } else
                b = 0;
        else
            b = 1;
        r = g;
        return b | 0;
    }
    function bc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        d = a + 16 | 0;
        e = k[d >> 2] | 0;
        do
            if (e) {
                if ((e | 0) != (b | 0)) {
                    c = a + 36 | 0;
                    k[c >> 2] = (k[c >> 2] | 0) + 1;
                    k[a + 24 >> 2] = 2;
                    i[a + 54 >> 0] = 1;
                    break;
                }
                d = a + 24 | 0;
                if ((k[d >> 2] | 0) == 2)
                    k[d >> 2] = c;
            } else {
                k[d >> 2] = b;
                k[a + 24 >> 2] = c;
                k[a + 36 >> 2] = 1;
            }
        while (0);
        return;
    }
    function cc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        if ((a | 0) == (k[b + 8 >> 2] | 0))
            bc(b, c, d);
        return;
    }
    function dc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        if ((a | 0) == (k[b + 8 >> 2] | 0))
            bc(b, c, d);
        else {
            a = k[a + 8 >> 2] | 0;
            Oa[k[(k[a >> 2] | 0) + 28 >> 2] & 3](a, b, c, d);
        }
        return;
    }
    function ec(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, s = 0;
        s = r;
        r = r + 64 | 0;
        q = s;
        p = k[a >> 2] | 0;
        o = a + (k[p + -8 >> 2] | 0) | 0;
        p = k[p + -4 >> 2] | 0;
        k[q >> 2] = b;
        k[q + 4 >> 2] = a;
        k[q + 8 >> 2] = 16;
        l = q + 12 | 0;
        a = q + 16 | 0;
        c = q + 20 | 0;
        d = q + 24 | 0;
        e = q + 28 | 0;
        f = q + 32 | 0;
        g = q + 40 | 0;
        h = (p | 0) == (b | 0);
        m = l;
        n = m + 40 | 0;
        do {
            k[m >> 2] = 0;
            m = m + 4 | 0;
        } while ((m | 0) < (n | 0));
        j[l + 40 >> 1] = 0;
        i[l + 42 >> 0] = 0;
        a:
            do
                if (h) {
                    k[q + 48 >> 2] = 1;
                    Ma[k[(k[b >> 2] | 0) + 20 >> 2] & 3](b, q, o, o, 1, 0);
                    a = (k[d >> 2] | 0) == 1 ? o : 0;
                } else {
                    Ja[k[(k[p >> 2] | 0) + 24 >> 2] & 3](p, q, o, 1, 0);
                    switch (k[q + 36 >> 2] | 0) {
                    case 0: {
                            a = (k[g >> 2] | 0) == 1 & (k[e >> 2] | 0) == 1 & (k[f >> 2] | 0) == 1 ? k[c >> 2] | 0 : 0;
                            break a;
                        }
                    case 1:
                        break;
                    default: {
                            a = 0;
                            break a;
                        }
                    }
                    if ((k[d >> 2] | 0) != 1 ? !((k[g >> 2] | 0) == 0 & (k[e >> 2] | 0) == 1 & (k[f >> 2] | 0) == 1) : 0) {
                        a = 0;
                        break;
                    }
                    a = k[a >> 2] | 0;
                }
            while (0);
        r = s;
        return a | 0;
    }
    function fc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0;
        i[a + 53 >> 0] = 1;
        do
            if ((k[a + 4 >> 2] | 0) == (c | 0)) {
                i[a + 52 >> 0] = 1;
                c = a + 16 | 0;
                e = k[c >> 2] | 0;
                if (!e) {
                    k[c >> 2] = b;
                    k[a + 24 >> 2] = d;
                    k[a + 36 >> 2] = 1;
                    if (!((d | 0) == 1 ? (k[a + 48 >> 2] | 0) == 1 : 0))
                        break;
                    i[a + 54 >> 0] = 1;
                    break;
                }
                if ((e | 0) != (b | 0)) {
                    d = a + 36 | 0;
                    k[d >> 2] = (k[d >> 2] | 0) + 1;
                    i[a + 54 >> 0] = 1;
                    break;
                }
                e = a + 24 | 0;
                c = k[e >> 2] | 0;
                if ((c | 0) == 2) {
                    k[e >> 2] = d;
                    c = d;
                }
                if ((c | 0) == 1 ? (k[a + 48 >> 2] | 0) == 1 : 0)
                    i[a + 54 >> 0] = 1;
            }
        while (0);
        return;
    }
    function gc(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0;
        a:
            do
                if ((a | 0) == (k[b + 8 >> 2] | 0)) {
                    if ((k[b + 4 >> 2] | 0) == (c | 0) ? (f = b + 28 | 0, (k[f >> 2] | 0) != 1) : 0)
                        k[f >> 2] = d;
                } else {
                    if ((a | 0) != (k[b >> 2] | 0)) {
                        h = k[a + 8 >> 2] | 0;
                        Ja[k[(k[h >> 2] | 0) + 24 >> 2] & 3](h, b, c, d, e);
                        break;
                    }
                    if ((k[b + 16 >> 2] | 0) != (c | 0) ? (g = b + 20 | 0, (k[g >> 2] | 0) != (c | 0)) : 0) {
                        k[b + 32 >> 2] = d;
                        d = b + 44 | 0;
                        if ((k[d >> 2] | 0) == 4)
                            break;
                        f = b + 52 | 0;
                        i[f >> 0] = 0;
                        j = b + 53 | 0;
                        i[j >> 0] = 0;
                        a = k[a + 8 >> 2] | 0;
                        Ma[k[(k[a >> 2] | 0) + 20 >> 2] & 3](a, b, c, c, 1, e);
                        if (i[j >> 0] | 0) {
                            if (!(i[f >> 0] | 0)) {
                                f = 1;
                                h = 13;
                            }
                        } else {
                            f = 0;
                            h = 13;
                        }
                        do
                            if ((h | 0) == 13) {
                                k[g >> 2] = c;
                                j = b + 40 | 0;
                                k[j >> 2] = (k[j >> 2] | 0) + 1;
                                if ((k[b + 36 >> 2] | 0) == 1 ? (k[b + 24 >> 2] | 0) == 2 : 0) {
                                    i[b + 54 >> 0] = 1;
                                    if (f)
                                        break;
                                } else
                                    h = 16;
                                if ((h | 0) == 16 ? f : 0)
                                    break;
                                k[d >> 2] = 4;
                                break a;
                            }
                        while (0);
                        k[d >> 2] = 3;
                        break;
                    }
                    if ((d | 0) == 1)
                        k[b + 32 >> 2] = 1;
                }
            while (0);
        return;
    }
    function hc(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0;
        do
            if ((a | 0) == (k[b + 8 >> 2] | 0)) {
                if ((k[b + 4 >> 2] | 0) == (c | 0) ? (g = b + 28 | 0, (k[g >> 2] | 0) != 1) : 0)
                    k[g >> 2] = d;
            } else if ((a | 0) == (k[b >> 2] | 0)) {
                if ((k[b + 16 >> 2] | 0) != (c | 0) ? (f = b + 20 | 0, (k[f >> 2] | 0) != (c | 0)) : 0) {
                    k[b + 32 >> 2] = d;
                    k[f >> 2] = c;
                    e = b + 40 | 0;
                    k[e >> 2] = (k[e >> 2] | 0) + 1;
                    if ((k[b + 36 >> 2] | 0) == 1 ? (k[b + 24 >> 2] | 0) == 2 : 0)
                        i[b + 54 >> 0] = 1;
                    k[b + 44 >> 2] = 4;
                    break;
                }
                if ((d | 0) == 1)
                    k[b + 32 >> 2] = 1;
            }
        while (0);
        return;
    }
    function ic(a, b, c, d, e, f) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        if ((a | 0) == (k[b + 8 >> 2] | 0))
            fc(b, c, d, e);
        else {
            a = k[a + 8 >> 2] | 0;
            Ma[k[(k[a >> 2] | 0) + 20 >> 2] & 3](a, b, c, d, e, f);
        }
        return;
    }
    function jc(a, b, c, d, e, f) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        if ((a | 0) == (k[b + 8 >> 2] | 0))
            fc(b, c, d, e);
        return;
    }
    function kc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        e = r;
        r = r + 16 | 0;
        d = e;
        k[d >> 2] = k[c >> 2];
        a = Ia[k[(k[a >> 2] | 0) + 16 >> 2] & 7](a, b, d) | 0;
        if (a)
            k[c >> 2] = k[d >> 2];
        r = e;
        return a & 1 | 0;
    }
    function lc(a) {
        a = a | 0;
        if (!a)
            a = 0;
        else
            a = (ec(a, 64) | 0) != 0;
        return a & 1 | 0;
    }
    function mc() {
        var a = 0;
        if (!(k[152] | 0))
            a = 652;
        else {
            a = (ua() | 0) + 60 | 0;
            a = k[a >> 2] | 0;
        }
        return a | 0;
    }
    function nc(a) {
        a = a | 0;
        var b = 0, c = 0;
        b = 0;
        while (1) {
            if ((l[69484 + b >> 0] | 0) == (a | 0)) {
                c = 2;
                break;
            }
            b = b + 1 | 0;
            if ((b | 0) == 87) {
                b = 87;
                a = 69572;
                c = 5;
                break;
            }
        }
        if ((c | 0) == 2)
            if (!b)
                b = 69572;
            else {
                a = 69572;
                c = 5;
            }
        if ((c | 0) == 5)
            while (1) {
                do {
                    c = a;
                    a = a + 1 | 0;
                } while ((i[c >> 0] | 0) != 0);
                b = b + -1 | 0;
                if (!b) {
                    b = a;
                    break;
                } else
                    c = 5;
            }
        return b | 0;
    }
    function oc(a) {
        a = a | 0;
        var b = 0;
        if (a >>> 0 > 4294963200) {
            b = mc() | 0;
            k[b >> 2] = 0 - a;
            a = -1;
        }
        return a | 0;
    }
    function pc(a, b) {
        a = +a;
        b = b | 0;
        var c = 0, d = 0, e = 0;
        p[t >> 3] = a;
        c = k[t >> 2] | 0;
        d = k[t + 4 >> 2] | 0;
        e = Oc(c | 0, d | 0, 52) | 0;
        e = e & 2047;
        switch (e | 0) {
        case 0: {
                if (a != 0) {
                    a = +pc(a * 18446744073709552000, b);
                    c = (k[b >> 2] | 0) + -64 | 0;
                } else
                    c = 0;
                k[b >> 2] = c;
                break;
            }
        case 2047:
            break;
        default: {
                k[b >> 2] = e + -1022;
                k[t >> 2] = c;
                k[t + 4 >> 2] = d & -2146435073 | 1071644672;
                a = +p[t >> 3];
            }
        }
        return +a;
    }
    function qc(a, b) {
        a = a | 0;
        b = b | 0;
        do
            if (a) {
                if (b >>> 0 < 128) {
                    i[a >> 0] = b;
                    a = 1;
                    break;
                }
                if (b >>> 0 < 2048) {
                    i[a >> 0] = b >>> 6 | 192;
                    i[a + 1 >> 0] = b & 63 | 128;
                    a = 2;
                    break;
                }
                if (b >>> 0 < 55296 | (b & -8192 | 0) == 57344) {
                    i[a >> 0] = b >>> 12 | 224;
                    i[a + 1 >> 0] = b >>> 6 & 63 | 128;
                    i[a + 2 >> 0] = b & 63 | 128;
                    a = 3;
                    break;
                }
                if ((b + -65536 | 0) >>> 0 < 1048576) {
                    i[a >> 0] = b >>> 18 | 240;
                    i[a + 1 >> 0] = b >>> 12 & 63 | 128;
                    i[a + 2 >> 0] = b >>> 6 & 63 | 128;
                    i[a + 3 >> 0] = b & 63 | 128;
                    a = 4;
                    break;
                } else {
                    a = mc() | 0;
                    k[a >> 2] = 84;
                    a = -1;
                    break;
                }
            } else
                a = 1;
        while (0);
        return a | 0;
    }
    function rc(a) {
        a = a | 0;
        var b = 0, c = 0;
        b = r;
        r = r + 16 | 0;
        c = b;
        k[c >> 2] = k[a + 60 >> 2];
        a = oc(va(6, c | 0) | 0) | 0;
        r = b;
        return a | 0;
    }
    function sc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0;
        e = r;
        r = r + 32 | 0;
        f = e;
        d = e + 20 | 0;
        k[f >> 2] = k[a + 60 >> 2];
        k[f + 4 >> 2] = 0;
        k[f + 8 >> 2] = b;
        k[f + 12 >> 2] = d;
        k[f + 16 >> 2] = c;
        if ((oc(Da(140, f | 0) | 0) | 0) < 0) {
            k[d >> 2] = -1;
            a = -1;
        } else
            a = k[d >> 2] | 0;
        r = e;
        return a | 0;
    }
    function tc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        p = r;
        r = r + 48 | 0;
        m = p + 16 | 0;
        l = p;
        i = p + 32 | 0;
        n = a + 28 | 0;
        g = k[n >> 2] | 0;
        k[i >> 2] = g;
        o = a + 20 | 0;
        g = (k[o >> 2] | 0) - g | 0;
        k[i + 4 >> 2] = g;
        k[i + 8 >> 2] = b;
        k[i + 12 >> 2] = c;
        h = a + 60 | 0;
        j = a + 44 | 0;
        e = 2;
        b = g + c | 0;
        while (1) {
            if (!(k[152] | 0)) {
                k[m >> 2] = k[h >> 2];
                k[m + 4 >> 2] = i;
                k[m + 8 >> 2] = e;
                f = oc(Fa(146, m | 0) | 0) | 0;
            } else {
                wa(6, a | 0);
                k[l >> 2] = k[h >> 2];
                k[l + 4 >> 2] = i;
                k[l + 8 >> 2] = e;
                f = oc(Fa(146, l | 0) | 0) | 0;
                ta(0);
            }
            if ((b | 0) == (f | 0)) {
                b = 6;
                break;
            }
            if ((f | 0) < 0) {
                b = 8;
                break;
            }
            b = b - f | 0;
            d = k[i + 4 >> 2] | 0;
            if (f >>> 0 <= d >>> 0)
                if ((e | 0) == 2) {
                    k[n >> 2] = (k[n >> 2] | 0) + f;
                    g = d;
                    d = i;
                    e = 2;
                } else {
                    g = d;
                    d = i;
                }
            else {
                g = k[j >> 2] | 0;
                k[n >> 2] = g;
                k[o >> 2] = g;
                g = k[i + 12 >> 2] | 0;
                f = f - d | 0;
                d = i + 8 | 0;
                e = e + -1 | 0;
            }
            k[d >> 2] = (k[d >> 2] | 0) + f;
            k[d + 4 >> 2] = g - f;
            i = d;
        }
        if ((b | 0) == 6) {
            m = k[j >> 2] | 0;
            k[a + 16 >> 2] = m + (k[a + 48 >> 2] | 0);
            a = m;
            k[n >> 2] = a;
            k[o >> 2] = a;
        } else if ((b | 0) == 8) {
            k[a + 16 >> 2] = 0;
            k[n >> 2] = 0;
            k[o >> 2] = 0;
            k[a >> 2] = k[a >> 2] | 32;
            if ((e | 0) == 2)
                c = 0;
            else
                c = c - (k[i + 4 >> 2] | 0) | 0;
        }
        r = p;
        return c | 0;
    }
    function uc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        e = r;
        r = r + 80 | 0;
        d = e;
        k[a + 36 >> 2] = 4;
        if ((k[a >> 2] & 64 | 0) == 0 ? (k[d >> 2] = k[a + 60 >> 2], k[d + 4 >> 2] = 21505, k[d + 8 >> 2] = e + 12, (Ca(54, d | 0) | 0) != 0) : 0)
            i[a + 75 >> 0] = -1;
        d = tc(a, b, c) | 0;
        r = e;
        return d | 0;
    }
    function vc(a) {
        a = a | 0;
        var b = 0, c = 0;
        b = a + 74 | 0;
        c = i[b >> 0] | 0;
        i[b >> 0] = c + 255 | c;
        b = k[a >> 2] | 0;
        if (!(b & 8)) {
            k[a + 8 >> 2] = 0;
            k[a + 4 >> 2] = 0;
            b = k[a + 44 >> 2] | 0;
            k[a + 28 >> 2] = b;
            k[a + 20 >> 2] = b;
            k[a + 16 >> 2] = b + (k[a + 48 >> 2] | 0);
            b = 0;
        } else {
            k[a >> 2] = b | 32;
            b = -1;
        }
        return b | 0;
    }
    function wc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0;
        d = c + 16 | 0;
        e = k[d >> 2] | 0;
        if (!e)
            if (!(vc(c) | 0)) {
                e = k[d >> 2] | 0;
                f = 4;
            } else
                d = 0;
        else
            f = 4;
        a:
            do
                if ((f | 0) == 4) {
                    g = c + 20 | 0;
                    f = k[g >> 2] | 0;
                    if ((e - f | 0) >>> 0 < b >>> 0) {
                        d = Ia[k[c + 36 >> 2] & 7](c, a, b) | 0;
                        break;
                    }
                    b:
                        do
                            if ((i[c + 75 >> 0] | 0) > -1) {
                                d = b;
                                while (1) {
                                    if (!d) {
                                        e = f;
                                        d = 0;
                                        break b;
                                    }
                                    e = d + -1 | 0;
                                    if ((i[a + e >> 0] | 0) == 10)
                                        break;
                                    else
                                        d = e;
                                }
                                if ((Ia[k[c + 36 >> 2] & 7](c, a, d) | 0) >>> 0 < d >>> 0)
                                    break a;
                                b = b - d | 0;
                                a = a + d | 0;
                                e = k[g >> 2] | 0;
                            } else {
                                e = f;
                                d = 0;
                            }
                        while (0);
                    Qc(e | 0, a | 0, b | 0) | 0;
                    k[g >> 2] = (k[g >> 2] | 0) + b;
                    d = d + b | 0;
                }
            while (0);
        return d | 0;
    }
    function xc(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0;
        c = r;
        r = r + 16 | 0;
        d = c;
        k[d >> 2] = b;
        yc(656, a, d) | 0;
        r = c;
        return;
    }
    function yc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
        q = r;
        r = r + 224 | 0;
        m = q + 80 | 0;
        p = q + 96 | 0;
        o = q;
        n = q + 136 | 0;
        d = p;
        e = d + 40 | 0;
        do {
            k[d >> 2] = 0;
            d = d + 4 | 0;
        } while ((d | 0) < (e | 0));
        k[m >> 2] = k[c >> 2];
        if ((Bc(0, b, m, o, p) | 0) < 0)
            c = -1;
        else {
            c = k[a >> 2] | 0;
            l = c & 32;
            if ((i[a + 74 >> 0] | 0) < 1)
                k[a >> 2] = c & -33;
            j = a + 48 | 0;
            if (!(k[j >> 2] | 0)) {
                d = a + 44 | 0;
                e = k[d >> 2] | 0;
                k[d >> 2] = n;
                f = a + 28 | 0;
                k[f >> 2] = n;
                g = a + 20 | 0;
                k[g >> 2] = n;
                k[j >> 2] = 80;
                h = a + 16 | 0;
                k[h >> 2] = n + 80;
                c = Bc(a, b, m, o, p) | 0;
                if (e) {
                    Ia[k[a + 36 >> 2] & 7](a, 0, 0) | 0;
                    c = (k[g >> 2] | 0) == 0 ? -1 : c;
                    k[d >> 2] = e;
                    k[j >> 2] = 0;
                    k[h >> 2] = 0;
                    k[f >> 2] = 0;
                    k[g >> 2] = 0;
                }
            } else
                c = Bc(a, b, m, o, p) | 0;
            p = k[a >> 2] | 0;
            k[a >> 2] = p | l;
            c = (p & 32 | 0) == 0 ? c : -1;
        }
        r = q;
        return c | 0;
    }
    function zc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0;
        f = b & 255;
        d = (c | 0) != 0;
        a:
            do
                if (d & (a & 3 | 0) != 0) {
                    e = b & 255;
                    while (1) {
                        if ((i[a >> 0] | 0) == e << 24 >> 24)
                            break a;
                        a = a + 1 | 0;
                        c = c + -1 | 0;
                        d = (c | 0) != 0;
                        if (!(d & (a & 3 | 0) != 0)) {
                            g = 5;
                            break;
                        }
                    }
                } else
                    g = 5;
            while (0);
        b:
            do
                if ((g | 0) == 5)
                    if (d) {
                        e = b & 255;
                        if ((i[a >> 0] | 0) != e << 24 >> 24) {
                            d = ha(f, 16843009) | 0;
                            c:
                                do
                                    if (c >>> 0 > 3)
                                        while (1) {
                                            f = k[a >> 2] ^ d;
                                            if ((f & -2139062144 ^ -2139062144) & f + -16843009)
                                                break;
                                            a = a + 4 | 0;
                                            c = c + -4 | 0;
                                            if (c >>> 0 <= 3) {
                                                g = 11;
                                                break c;
                                            }
                                        }
                                    else
                                        g = 11;
                                while (0);
                            if ((g | 0) == 11)
                                if (!c) {
                                    c = 0;
                                    break;
                                }
                            while (1) {
                                if ((i[a >> 0] | 0) == e << 24 >> 24)
                                    break b;
                                a = a + 1 | 0;
                                c = c + -1 | 0;
                                if (!c) {
                                    c = 0;
                                    break;
                                }
                            }
                        }
                    } else
                        c = 0;
            while (0);
        return ((c | 0) != 0 ? a : 0) | 0;
    }
    function Ac(a) {
        a = a | 0;
        return;
    }
    function Bc(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, m = 0, n = 0, o = 0, q = 0, s = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0;
        ga = r;
        r = r + 624 | 0;
        ba = ga + 24 | 0;
        da = ga + 16 | 0;
        ca = ga + 588 | 0;
        Y = ga + 576 | 0;
        aa = ga;
        V = ga + 536 | 0;
        fa = ga + 8 | 0;
        ea = ga + 528 | 0;
        M = (a | 0) != 0;
        N = V + 40 | 0;
        U = N;
        V = V + 39 | 0;
        W = fa + 4 | 0;
        X = Y + 12 | 0;
        Y = Y + 11 | 0;
        Z = ca;
        _ = X;
        $ = _ - Z | 0;
        O = -2 - Z | 0;
        P = _ + 2 | 0;
        Q = ba + 288 | 0;
        R = ca + 9 | 0;
        S = R;
        T = ca + 8 | 0;
        f = 0;
        g = 0;
        q = 0;
        a:
            while (1) {
                do
                    if ((f | 0) > -1)
                        if ((g | 0) > (2147483647 - f | 0)) {
                            f = mc() | 0;
                            k[f >> 2] = 75;
                            f = -1;
                            break;
                        } else {
                            f = g + f | 0;
                            break;
                        }
                while (0);
                g = i[b >> 0] | 0;
                if (!(g << 24 >> 24)) {
                    K = 245;
                    break;
                } else
                    h = b;
                b:
                    while (1) {
                        switch (g << 24 >> 24) {
                        case 37: {
                                g = h;
                                K = 9;
                                break b;
                            }
                        case 0: {
                                g = h;
                                break b;
                            }
                        default: {
                            }
                        }
                        J = h + 1 | 0;
                        g = i[J >> 0] | 0;
                        h = J;
                    }
                c:
                    do
                        if ((K | 0) == 9)
                            while (1) {
                                K = 0;
                                if ((i[g + 1 >> 0] | 0) != 37)
                                    break c;
                                h = h + 1 | 0;
                                g = g + 2 | 0;
                                if ((i[g >> 0] | 0) == 37)
                                    K = 9;
                                else
                                    break;
                            }
                    while (0);
                y = h - b | 0;
                if (M ? (k[a >> 2] & 32 | 0) == 0 : 0)
                    wc(b, y, a) | 0;
                if ((h | 0) != (b | 0)) {
                    b = g;
                    g = y;
                    continue;
                }
                o = g + 1 | 0;
                h = i[o >> 0] | 0;
                n = (h << 24 >> 24) + -48 | 0;
                if (n >>> 0 < 10) {
                    J = (i[g + 2 >> 0] | 0) == 36;
                    o = J ? g + 3 | 0 : o;
                    h = i[o >> 0] | 0;
                    u = J ? n : -1;
                    q = J ? 1 : q;
                } else
                    u = -1;
                g = h << 24 >> 24;
                d:
                    do
                        if ((g & -32 | 0) == 32) {
                            n = 0;
                            while (1) {
                                if (!(1 << g + -32 & 75913)) {
                                    s = n;
                                    break d;
                                }
                                n = 1 << (h << 24 >> 24) + -32 | n;
                                o = o + 1 | 0;
                                h = i[o >> 0] | 0;
                                g = h << 24 >> 24;
                                if ((g & -32 | 0) != 32) {
                                    s = n;
                                    break;
                                }
                            }
                        } else
                            s = 0;
                    while (0);
                do
                    if (h << 24 >> 24 == 42) {
                        h = o + 1 | 0;
                        g = (i[h >> 0] | 0) + -48 | 0;
                        if (g >>> 0 < 10 ? (i[o + 2 >> 0] | 0) == 36 : 0) {
                            k[e + (g << 2) >> 2] = 10;
                            q = 1;
                            g = o + 3 | 0;
                            n = k[d + ((i[h >> 0] | 0) + -48 << 3) >> 2] | 0;
                        } else {
                            if (q) {
                                f = -1;
                                break a;
                            }
                            if (!M) {
                                w = s;
                                q = 0;
                                J = 0;
                                break;
                            }
                            q = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                            n = k[q >> 2] | 0;
                            k[c >> 2] = q + 4;
                            q = 0;
                            g = h;
                        }
                        if ((n | 0) < 0) {
                            w = s | 8192;
                            h = g;
                            J = 0 - n | 0;
                        } else {
                            w = s;
                            h = g;
                            J = n;
                        }
                    } else {
                        g = (h << 24 >> 24) + -48 | 0;
                        if (g >>> 0 < 10) {
                            h = o;
                            n = 0;
                            do {
                                n = (n * 10 | 0) + g | 0;
                                h = h + 1 | 0;
                                g = (i[h >> 0] | 0) + -48 | 0;
                            } while (g >>> 0 < 10);
                            if ((n | 0) < 0) {
                                f = -1;
                                break a;
                            } else {
                                w = s;
                                J = n;
                            }
                        } else {
                            w = s;
                            h = o;
                            J = 0;
                        }
                    }
                while (0);
                e:
                    do
                        if ((i[h >> 0] | 0) == 46) {
                            n = h + 1 | 0;
                            g = i[n >> 0] | 0;
                            if (g << 24 >> 24 != 42) {
                                o = (g << 24 >> 24) + -48 | 0;
                                if (o >>> 0 < 10) {
                                    g = n;
                                    h = 0;
                                } else {
                                    g = n;
                                    o = 0;
                                    break;
                                }
                                while (1) {
                                    h = (h * 10 | 0) + o | 0;
                                    g = g + 1 | 0;
                                    o = (i[g >> 0] | 0) + -48 | 0;
                                    if (o >>> 0 >= 10) {
                                        o = h;
                                        break e;
                                    }
                                }
                            }
                            n = h + 2 | 0;
                            g = (i[n >> 0] | 0) + -48 | 0;
                            if (g >>> 0 < 10 ? (i[h + 3 >> 0] | 0) == 36 : 0) {
                                k[e + (g << 2) >> 2] = 10;
                                g = h + 4 | 0;
                                o = k[d + ((i[n >> 0] | 0) + -48 << 3) >> 2] | 0;
                                break;
                            }
                            if (q) {
                                f = -1;
                                break a;
                            }
                            if (M) {
                                g = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                o = k[g >> 2] | 0;
                                k[c >> 2] = g + 4;
                                g = n;
                            } else {
                                g = n;
                                o = 0;
                            }
                        } else {
                            g = h;
                            o = -1;
                        }
                    while (0);
                v = 0;
                while (1) {
                    h = (i[g >> 0] | 0) + -65 | 0;
                    if (h >>> 0 > 57) {
                        f = -1;
                        break a;
                    }
                    I = g + 1 | 0;
                    h = i[72408 + (v * 58 | 0) + h >> 0] | 0;
                    n = h & 255;
                    if ((n + -1 | 0) >>> 0 < 8) {
                        g = I;
                        v = n;
                    } else
                        break;
                }
                if (!(h << 24 >> 24)) {
                    f = -1;
                    break;
                }
                s = (u | 0) > -1;
                do
                    if (h << 24 >> 24 == 19)
                        if (s) {
                            f = -1;
                            break a;
                        } else
                            K = 52;
                    else {
                        if (s) {
                            k[e + (u << 2) >> 2] = n;
                            G = d + (u << 3) | 0;
                            H = k[G + 4 >> 2] | 0;
                            K = aa;
                            k[K >> 2] = k[G >> 2];
                            k[K + 4 >> 2] = H;
                            K = 52;
                            break;
                        }
                        if (!M) {
                            f = 0;
                            break a;
                        }
                        Cc(aa, n, c);
                    }
                while (0);
                if ((K | 0) == 52 ? (K = 0, !M) : 0) {
                    b = I;
                    g = y;
                    continue;
                }
                u = i[g >> 0] | 0;
                u = (v | 0) != 0 & (u & 15 | 0) == 3 ? u & -33 : u;
                h = w & -65537;
                H = (w & 8192 | 0) == 0 ? w : h;
                f:
                    do
                        switch (u | 0) {
                        case 110:
                            switch (v | 0) {
                            case 0: {
                                    k[k[aa >> 2] >> 2] = f;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            case 1: {
                                    k[k[aa >> 2] >> 2] = f;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            case 2: {
                                    b = k[aa >> 2] | 0;
                                    k[b >> 2] = f;
                                    k[b + 4 >> 2] = ((f | 0) < 0) << 31 >> 31;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            case 3: {
                                    j[k[aa >> 2] >> 1] = f;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            case 4: {
                                    i[k[aa >> 2] >> 0] = f;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            case 6: {
                                    k[k[aa >> 2] >> 2] = f;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            case 7: {
                                    b = k[aa >> 2] | 0;
                                    k[b >> 2] = f;
                                    k[b + 4 >> 2] = ((f | 0) < 0) << 31 >> 31;
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            default: {
                                    b = I;
                                    g = y;
                                    continue a;
                                }
                            }
                        case 112: {
                                s = H | 8;
                                o = o >>> 0 > 8 ? o : 8;
                                u = 120;
                                K = 64;
                                break;
                            }
                        case 88:
                        case 120: {
                                s = H;
                                K = 64;
                                break;
                            }
                        case 111: {
                                h = aa;
                                g = k[h >> 2] | 0;
                                h = k[h + 4 >> 2] | 0;
                                if ((g | 0) == 0 & (h | 0) == 0)
                                    b = N;
                                else {
                                    b = N;
                                    do {
                                        b = b + -1 | 0;
                                        i[b >> 0] = g & 7 | 48;
                                        g = Oc(g | 0, h | 0, 3) | 0;
                                        h = L;
                                    } while (!((g | 0) == 0 & (h | 0) == 0));
                                }
                                if (!(H & 8)) {
                                    g = H;
                                    s = 0;
                                    n = 72888;
                                    K = 77;
                                } else {
                                    s = U - b + 1 | 0;
                                    g = H;
                                    o = (o | 0) < (s | 0) ? s : o;
                                    s = 0;
                                    n = 72888;
                                    K = 77;
                                }
                                break;
                            }
                        case 105:
                        case 100: {
                                g = aa;
                                b = k[g >> 2] | 0;
                                g = k[g + 4 >> 2] | 0;
                                if ((g | 0) < 0) {
                                    b = Lc(0, 0, b | 0, g | 0) | 0;
                                    g = L;
                                    h = aa;
                                    k[h >> 2] = b;
                                    k[h + 4 >> 2] = g;
                                    h = 1;
                                    n = 72888;
                                    K = 76;
                                    break f;
                                }
                                if (!(H & 2048)) {
                                    n = H & 1;
                                    h = n;
                                    n = (n | 0) == 0 ? 72888 : 72890;
                                    K = 76;
                                } else {
                                    h = 1;
                                    n = 72889;
                                    K = 76;
                                }
                                break;
                            }
                        case 117: {
                                g = aa;
                                b = k[g >> 2] | 0;
                                g = k[g + 4 >> 2] | 0;
                                h = 0;
                                n = 72888;
                                K = 76;
                                break;
                            }
                        case 99: {
                                i[V >> 0] = k[aa >> 2];
                                b = V;
                                u = 1;
                                w = 0;
                                v = 72888;
                                g = N;
                                break;
                            }
                        case 109: {
                                g = mc() | 0;
                                g = nc(k[g >> 2] | 0) | 0;
                                K = 82;
                                break;
                            }
                        case 115: {
                                g = k[aa >> 2] | 0;
                                g = (g | 0) != 0 ? g : 72898;
                                K = 82;
                                break;
                            }
                        case 67: {
                                k[fa >> 2] = k[aa >> 2];
                                k[W >> 2] = 0;
                                k[aa >> 2] = fa;
                                h = fa;
                                o = -1;
                                K = 87;
                                break;
                            }
                        case 83:
                            if (!o) {
                                Ec(a, 32, J, 0, H);
                                g = 0;
                                K = 98;
                                break f;
                            } else {
                                h = k[aa >> 2] | 0;
                                K = 87;
                                break f;
                            }
                        case 65:
                        case 71:
                        case 70:
                        case 69:
                        case 97:
                        case 103:
                        case 102:
                        case 101: {
                                m = +p[aa >> 3];
                                k[da >> 2] = 0;
                                p[t >> 3] = m;
                                if ((k[t + 4 >> 2] | 0) >= 0)
                                    if (!(H & 2048)) {
                                        G = H & 1;
                                        F = G;
                                        G = (G | 0) == 0 ? 72906 : 72911;
                                    } else {
                                        F = 1;
                                        G = 72908;
                                    }
                                else {
                                    m = -m;
                                    F = 1;
                                    G = 72905;
                                }
                                p[t >> 3] = m;
                                E = k[t + 4 >> 2] & 2146435072;
                                do
                                    if (E >>> 0 < 2146435072 | (E | 0) == 2146435072 & 0 < 0) {
                                        x = +pc(m, da) * 2;
                                        g = x != 0;
                                        if (g)
                                            k[da >> 2] = (k[da >> 2] | 0) + -1;
                                        C = u | 32;
                                        if ((C | 0) == 97) {
                                            v = u & 32;
                                            y = (v | 0) == 0 ? G : G + 9 | 0;
                                            w = F | 2;
                                            b = 12 - o | 0;
                                            do
                                                if (!(o >>> 0 > 11 | (b | 0) == 0)) {
                                                    m = 8;
                                                    do {
                                                        b = b + -1 | 0;
                                                        m = m * 16;
                                                    } while ((b | 0) != 0);
                                                    if ((i[y >> 0] | 0) == 45) {
                                                        m = -(m + (-x - m));
                                                        break;
                                                    } else {
                                                        m = x + m - m;
                                                        break;
                                                    }
                                                } else
                                                    m = x;
                                            while (0);
                                            g = k[da >> 2] | 0;
                                            b = (g | 0) < 0 ? 0 - g | 0 : g;
                                            b = Dc(b, ((b | 0) < 0) << 31 >> 31, X) | 0;
                                            if ((b | 0) == (X | 0)) {
                                                i[Y >> 0] = 48;
                                                b = Y;
                                            }
                                            i[b + -1 >> 0] = (g >> 31 & 2) + 43;
                                            s = b + -2 | 0;
                                            i[s >> 0] = u + 15;
                                            n = (o | 0) < 1;
                                            h = (H & 8 | 0) == 0;
                                            g = ca;
                                            while (1) {
                                                G = ~~m;
                                                b = g + 1 | 0;
                                                i[g >> 0] = l[72872 + G >> 0] | v;
                                                m = (m - +(G | 0)) * 16;
                                                do
                                                    if ((b - Z | 0) == 1) {
                                                        if (h & (n & m == 0))
                                                            break;
                                                        i[b >> 0] = 46;
                                                        b = g + 2 | 0;
                                                    }
                                                while (0);
                                                if (!(m != 0))
                                                    break;
                                                else
                                                    g = b;
                                            }
                                            h = s;
                                            o = (o | 0) != 0 & (O + b | 0) < (o | 0) ? P + o - h | 0 : $ - h + b | 0;
                                            n = o + w | 0;
                                            Ec(a, 32, J, n, H);
                                            if (!(k[a >> 2] & 32))
                                                wc(y, w, a) | 0;
                                            Ec(a, 48, J, n, H ^ 65536);
                                            g = b - Z | 0;
                                            if (!(k[a >> 2] & 32))
                                                wc(ca, g, a) | 0;
                                            b = _ - h | 0;
                                            Ec(a, 48, o - (g + b) | 0, 0, 0);
                                            if (!(k[a >> 2] & 32))
                                                wc(s, b, a) | 0;
                                            Ec(a, 32, J, n, H ^ 8192);
                                            g = (n | 0) < (J | 0) ? J : n;
                                            break;
                                        }
                                        b = (o | 0) < 0 ? 6 : o;
                                        if (g) {
                                            g = (k[da >> 2] | 0) + -28 | 0;
                                            k[da >> 2] = g;
                                            m = x * 268435456;
                                        } else {
                                            m = x;
                                            g = k[da >> 2] | 0;
                                        }
                                        E = (g | 0) < 0 ? ba : Q;
                                        D = E;
                                        h = E;
                                        do {
                                            B = ~~m >>> 0;
                                            k[h >> 2] = B;
                                            h = h + 4 | 0;
                                            m = (m - +(B >>> 0)) * 1000000000;
                                        } while (m != 0);
                                        g = k[da >> 2] | 0;
                                        if ((g | 0) > 0) {
                                            n = E;
                                            o = h;
                                            while (1) {
                                                s = (g | 0) > 29 ? 29 : g;
                                                g = o + -4 | 0;
                                                do
                                                    if (g >>> 0 >= n >>> 0) {
                                                        h = 0;
                                                        do {
                                                            A = Pc(k[g >> 2] | 0, 0, s | 0) | 0;
                                                            A = Mc(A | 0, L | 0, h | 0, 0) | 0;
                                                            B = L;
                                                            z = Yc(A | 0, B | 0, 1000000000, 0) | 0;
                                                            k[g >> 2] = z;
                                                            h = Xc(A | 0, B | 0, 1000000000, 0) | 0;
                                                            g = g + -4 | 0;
                                                        } while (g >>> 0 >= n >>> 0);
                                                        if (!h)
                                                            break;
                                                        n = n + -4 | 0;
                                                        k[n >> 2] = h;
                                                    }
                                                while (0);
                                                h = o;
                                                while (1) {
                                                    if (h >>> 0 <= n >>> 0)
                                                        break;
                                                    g = h + -4 | 0;
                                                    if (!(k[g >> 2] | 0))
                                                        h = g;
                                                    else
                                                        break;
                                                }
                                                g = (k[da >> 2] | 0) - s | 0;
                                                k[da >> 2] = g;
                                                if ((g | 0) > 0)
                                                    o = h;
                                                else
                                                    break;
                                            }
                                        } else
                                            n = E;
                                        if ((g | 0) < 0) {
                                            y = ((b + 25 | 0) / 9 | 0) + 1 | 0;
                                            z = (C | 0) == 102;
                                            do {
                                                w = 0 - g | 0;
                                                w = (w | 0) > 9 ? 9 : w;
                                                do
                                                    if (n >>> 0 < h >>> 0) {
                                                        g = (1 << w) + -1 | 0;
                                                        o = 1000000000 >>> w;
                                                        v = 0;
                                                        s = n;
                                                        do {
                                                            B = k[s >> 2] | 0;
                                                            k[s >> 2] = (B >>> w) + v;
                                                            v = ha(B & g, o) | 0;
                                                            s = s + 4 | 0;
                                                        } while (s >>> 0 < h >>> 0);
                                                        g = (k[n >> 2] | 0) == 0 ? n + 4 | 0 : n;
                                                        if (!v) {
                                                            n = g;
                                                            g = h;
                                                            break;
                                                        }
                                                        k[h >> 2] = v;
                                                        n = g;
                                                        g = h + 4 | 0;
                                                    } else {
                                                        n = (k[n >> 2] | 0) == 0 ? n + 4 | 0 : n;
                                                        g = h;
                                                    }
                                                while (0);
                                                h = z ? E : n;
                                                h = (g - h >> 2 | 0) > (y | 0) ? h + (y << 2) | 0 : g;
                                                g = (k[da >> 2] | 0) + w | 0;
                                                k[da >> 2] = g;
                                            } while ((g | 0) < 0);
                                            s = n;
                                            B = h;
                                        } else {
                                            s = n;
                                            B = h;
                                        }
                                        do
                                            if (s >>> 0 < B >>> 0) {
                                                g = (D - s >> 2) * 9 | 0;
                                                n = k[s >> 2] | 0;
                                                if (n >>> 0 < 10)
                                                    break;
                                                else
                                                    h = 10;
                                                do {
                                                    h = h * 10 | 0;
                                                    g = g + 1 | 0;
                                                } while (n >>> 0 >= h >>> 0);
                                            } else
                                                g = 0;
                                        while (0);
                                        z = (C | 0) == 103;
                                        A = (b | 0) != 0;
                                        h = b - ((C | 0) != 102 ? g : 0) + ((A & z) << 31 >> 31) | 0;
                                        if ((h | 0) < (((B - D >> 2) * 9 | 0) + -9 | 0)) {
                                            o = h + 9216 | 0;
                                            y = (o | 0) / 9 | 0;
                                            h = E + (y + -1023 << 2) | 0;
                                            o = ((o | 0) % 9 | 0) + 1 | 0;
                                            if ((o | 0) < 9) {
                                                n = 10;
                                                do {
                                                    n = n * 10 | 0;
                                                    o = o + 1 | 0;
                                                } while ((o | 0) != 9);
                                            } else
                                                n = 10;
                                            v = k[h >> 2] | 0;
                                            w = (v >>> 0) % (n >>> 0) | 0;
                                            if ((w | 0) == 0 ? (E + (y + -1022 << 2) | 0) == (B | 0) : 0)
                                                n = s;
                                            else
                                                K = 163;
                                            do
                                                if ((K | 0) == 163) {
                                                    K = 0;
                                                    x = (((v >>> 0) / (n >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992 : 9007199254740994;
                                                    o = (n | 0) / 2 | 0;
                                                    do
                                                        if (w >>> 0 < o >>> 0)
                                                            m = 0.5;
                                                        else {
                                                            if ((w | 0) == (o | 0) ? (E + (y + -1022 << 2) | 0) == (B | 0) : 0) {
                                                                m = 1;
                                                                break;
                                                            }
                                                            m = 1.5;
                                                        }
                                                    while (0);
                                                    do
                                                        if (F) {
                                                            if ((i[G >> 0] | 0) != 45)
                                                                break;
                                                            x = -x;
                                                            m = -m;
                                                        }
                                                    while (0);
                                                    o = v - w | 0;
                                                    k[h >> 2] = o;
                                                    if (!(x + m != x)) {
                                                        n = s;
                                                        break;
                                                    }
                                                    C = o + n | 0;
                                                    k[h >> 2] = C;
                                                    if (C >>> 0 > 999999999) {
                                                        g = s;
                                                        while (1) {
                                                            n = h + -4 | 0;
                                                            k[h >> 2] = 0;
                                                            if (n >>> 0 < g >>> 0) {
                                                                g = g + -4 | 0;
                                                                k[g >> 2] = 0;
                                                            }
                                                            C = (k[n >> 2] | 0) + 1 | 0;
                                                            k[n >> 2] = C;
                                                            if (C >>> 0 > 999999999)
                                                                h = n;
                                                            else {
                                                                s = g;
                                                                h = n;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    g = (D - s >> 2) * 9 | 0;
                                                    o = k[s >> 2] | 0;
                                                    if (o >>> 0 < 10) {
                                                        n = s;
                                                        break;
                                                    } else
                                                        n = 10;
                                                    do {
                                                        n = n * 10 | 0;
                                                        g = g + 1 | 0;
                                                    } while (o >>> 0 >= n >>> 0);
                                                    n = s;
                                                }
                                            while (0);
                                            h = h + 4 | 0;
                                            C = n;
                                            h = B >>> 0 > h >>> 0 ? h : B;
                                        } else {
                                            C = s;
                                            h = B;
                                        }
                                        w = 0 - g | 0;
                                        B = h;
                                        while (1) {
                                            if (B >>> 0 <= C >>> 0) {
                                                y = 0;
                                                break;
                                            }
                                            h = B + -4 | 0;
                                            if (!(k[h >> 2] | 0))
                                                B = h;
                                            else {
                                                y = 1;
                                                break;
                                            }
                                        }
                                        do
                                            if (z) {
                                                b = (A & 1 ^ 1) + b | 0;
                                                if ((b | 0) > (g | 0) & (g | 0) > -5) {
                                                    u = u + -1 | 0;
                                                    b = b + -1 - g | 0;
                                                } else {
                                                    u = u + -2 | 0;
                                                    b = b + -1 | 0;
                                                }
                                                h = H & 8;
                                                if (h)
                                                    break;
                                                do
                                                    if (y) {
                                                        h = k[B + -4 >> 2] | 0;
                                                        if (!h) {
                                                            n = 9;
                                                            break;
                                                        }
                                                        if (!((h >>> 0) % 10 | 0)) {
                                                            o = 10;
                                                            n = 0;
                                                        } else {
                                                            n = 0;
                                                            break;
                                                        }
                                                        do {
                                                            o = o * 10 | 0;
                                                            n = n + 1 | 0;
                                                        } while (((h >>> 0) % (o >>> 0) | 0 | 0) == 0);
                                                    } else
                                                        n = 9;
                                                while (0);
                                                h = ((B - D >> 2) * 9 | 0) + -9 | 0;
                                                if ((u | 32 | 0) == 102) {
                                                    h = h - n | 0;
                                                    h = (h | 0) < 0 ? 0 : h;
                                                    b = (b | 0) < (h | 0) ? b : h;
                                                    h = 0;
                                                    break;
                                                } else {
                                                    h = h + g - n | 0;
                                                    h = (h | 0) < 0 ? 0 : h;
                                                    b = (b | 0) < (h | 0) ? b : h;
                                                    h = 0;
                                                    break;
                                                }
                                            } else
                                                h = H & 8;
                                        while (0);
                                        v = b | h;
                                        o = (v | 0) != 0 & 1;
                                        s = (u | 32 | 0) == 102;
                                        if (s) {
                                            g = (g | 0) > 0 ? g : 0;
                                            u = 0;
                                        } else {
                                            n = (g | 0) < 0 ? w : g;
                                            n = Dc(n, ((n | 0) < 0) << 31 >> 31, X) | 0;
                                            if ((_ - n | 0) < 2)
                                                do {
                                                    n = n + -1 | 0;
                                                    i[n >> 0] = 48;
                                                } while ((_ - n | 0) < 2);
                                            i[n + -1 >> 0] = (g >> 31 & 2) + 43;
                                            D = n + -2 | 0;
                                            i[D >> 0] = u;
                                            g = _ - D | 0;
                                            u = D;
                                        }
                                        w = F + 1 + b + o + g | 0;
                                        Ec(a, 32, J, w, H);
                                        if (!(k[a >> 2] & 32))
                                            wc(G, F, a) | 0;
                                        Ec(a, 48, J, w, H ^ 65536);
                                        do
                                            if (s) {
                                                n = C >>> 0 > E >>> 0 ? E : C;
                                                h = n;
                                                do {
                                                    g = Dc(k[h >> 2] | 0, 0, R) | 0;
                                                    do
                                                        if ((h | 0) == (n | 0)) {
                                                            if ((g | 0) != (R | 0))
                                                                break;
                                                            i[T >> 0] = 48;
                                                            g = T;
                                                        } else {
                                                            if (g >>> 0 <= ca >>> 0)
                                                                break;
                                                            do {
                                                                g = g + -1 | 0;
                                                                i[g >> 0] = 48;
                                                            } while (g >>> 0 > ca >>> 0);
                                                        }
                                                    while (0);
                                                    if (!(k[a >> 2] & 32))
                                                        wc(g, S - g | 0, a) | 0;
                                                    h = h + 4 | 0;
                                                } while (h >>> 0 <= E >>> 0);
                                                do
                                                    if (v) {
                                                        if (k[a >> 2] & 32)
                                                            break;
                                                        wc(72940, 1, a) | 0;
                                                    }
                                                while (0);
                                                if ((b | 0) > 0 & h >>> 0 < B >>> 0)
                                                    while (1) {
                                                        g = Dc(k[h >> 2] | 0, 0, R) | 0;
                                                        if (g >>> 0 > ca >>> 0)
                                                            do {
                                                                g = g + -1 | 0;
                                                                i[g >> 0] = 48;
                                                            } while (g >>> 0 > ca >>> 0);
                                                        if (!(k[a >> 2] & 32))
                                                            wc(g, (b | 0) > 9 ? 9 : b, a) | 0;
                                                        h = h + 4 | 0;
                                                        g = b + -9 | 0;
                                                        if (!((b | 0) > 9 & h >>> 0 < B >>> 0)) {
                                                            b = g;
                                                            break;
                                                        } else
                                                            b = g;
                                                    }
                                                Ec(a, 48, b + 9 | 0, 9, 0);
                                            } else {
                                                s = y ? B : C + 4 | 0;
                                                if ((b | 0) > -1) {
                                                    o = (h | 0) == 0;
                                                    n = C;
                                                    do {
                                                        g = Dc(k[n >> 2] | 0, 0, R) | 0;
                                                        if ((g | 0) == (R | 0)) {
                                                            i[T >> 0] = 48;
                                                            g = T;
                                                        }
                                                        do
                                                            if ((n | 0) == (C | 0)) {
                                                                h = g + 1 | 0;
                                                                if (!(k[a >> 2] & 32))
                                                                    wc(g, 1, a) | 0;
                                                                if (o & (b | 0) < 1) {
                                                                    g = h;
                                                                    break;
                                                                }
                                                                if (k[a >> 2] & 32) {
                                                                    g = h;
                                                                    break;
                                                                }
                                                                wc(72940, 1, a) | 0;
                                                                g = h;
                                                            } else {
                                                                if (g >>> 0 <= ca >>> 0)
                                                                    break;
                                                                do {
                                                                    g = g + -1 | 0;
                                                                    i[g >> 0] = 48;
                                                                } while (g >>> 0 > ca >>> 0);
                                                            }
                                                        while (0);
                                                        h = S - g | 0;
                                                        if (!(k[a >> 2] & 32))
                                                            wc(g, (b | 0) > (h | 0) ? h : b, a) | 0;
                                                        b = b - h | 0;
                                                        n = n + 4 | 0;
                                                    } while (n >>> 0 < s >>> 0 & (b | 0) > -1);
                                                }
                                                Ec(a, 48, b + 18 | 0, 18, 0);
                                                if (k[a >> 2] & 32)
                                                    break;
                                                wc(u, _ - u | 0, a) | 0;
                                            }
                                        while (0);
                                        Ec(a, 32, J, w, H ^ 8192);
                                        g = (w | 0) < (J | 0) ? J : w;
                                    } else {
                                        s = (u & 32 | 0) != 0;
                                        o = m != m | 0 != 0;
                                        g = o ? 0 : F;
                                        n = g + 3 | 0;
                                        Ec(a, 32, J, n, h);
                                        b = k[a >> 2] | 0;
                                        if (!(b & 32)) {
                                            wc(G, g, a) | 0;
                                            b = k[a >> 2] | 0;
                                        }
                                        if (!(b & 32))
                                            wc(o ? s ? 72932 : 72936 : s ? 72924 : 72928, 3, a) | 0;
                                        Ec(a, 32, J, n, H ^ 8192);
                                        g = (n | 0) < (J | 0) ? J : n;
                                    }
                                while (0);
                                b = I;
                                continue a;
                            }
                        default: {
                                h = H;
                                u = o;
                                w = 0;
                                v = 72888;
                                g = N;
                            }
                        }
                    while (0);
                g:
                    do
                        if ((K | 0) == 64) {
                            h = aa;
                            g = k[h >> 2] | 0;
                            h = k[h + 4 >> 2] | 0;
                            n = u & 32;
                            if (!((g | 0) == 0 & (h | 0) == 0)) {
                                b = N;
                                do {
                                    b = b + -1 | 0;
                                    i[b >> 0] = l[72872 + (g & 15) >> 0] | n;
                                    g = Oc(g | 0, h | 0, 4) | 0;
                                    h = L;
                                } while (!((g | 0) == 0 & (h | 0) == 0));
                                K = aa;
                                if ((s & 8 | 0) == 0 | (k[K >> 2] | 0) == 0 & (k[K + 4 >> 2] | 0) == 0) {
                                    g = s;
                                    s = 0;
                                    n = 72888;
                                    K = 77;
                                } else {
                                    g = s;
                                    s = 2;
                                    n = 72888 + (u >> 4) | 0;
                                    K = 77;
                                }
                            } else {
                                b = N;
                                g = s;
                                s = 0;
                                n = 72888;
                                K = 77;
                            }
                        } else if ((K | 0) == 76) {
                            b = Dc(b, g, N) | 0;
                            g = H;
                            s = h;
                            K = 77;
                        } else if ((K | 0) == 82) {
                            K = 0;
                            H = zc(g, 0, o) | 0;
                            G = (H | 0) == 0;
                            b = g;
                            u = G ? o : H - g | 0;
                            w = 0;
                            v = 72888;
                            g = G ? g + o | 0 : H;
                        } else if ((K | 0) == 87) {
                            K = 0;
                            g = 0;
                            b = 0;
                            s = h;
                            while (1) {
                                n = k[s >> 2] | 0;
                                if (!n)
                                    break;
                                b = qc(ea, n) | 0;
                                if ((b | 0) < 0 | b >>> 0 > (o - g | 0) >>> 0)
                                    break;
                                g = b + g | 0;
                                if (o >>> 0 > g >>> 0)
                                    s = s + 4 | 0;
                                else
                                    break;
                            }
                            if ((b | 0) < 0) {
                                f = -1;
                                break a;
                            }
                            Ec(a, 32, J, g, H);
                            if (!g) {
                                g = 0;
                                K = 98;
                            } else {
                                n = 0;
                                while (1) {
                                    b = k[h >> 2] | 0;
                                    if (!b) {
                                        K = 98;
                                        break g;
                                    }
                                    b = qc(ea, b) | 0;
                                    n = b + n | 0;
                                    if ((n | 0) > (g | 0)) {
                                        K = 98;
                                        break g;
                                    }
                                    if (!(k[a >> 2] & 32))
                                        wc(ea, b, a) | 0;
                                    if (n >>> 0 >= g >>> 0) {
                                        K = 98;
                                        break;
                                    } else
                                        h = h + 4 | 0;
                                }
                            }
                        }
                    while (0);
                if ((K | 0) == 98) {
                    K = 0;
                    Ec(a, 32, J, g, H ^ 8192);
                    b = I;
                    g = (J | 0) > (g | 0) ? J : g;
                    continue;
                }
                if ((K | 0) == 77) {
                    K = 0;
                    h = (o | 0) > -1 ? g & -65537 : g;
                    g = aa;
                    g = (k[g >> 2] | 0) != 0 | (k[g + 4 >> 2] | 0) != 0;
                    if ((o | 0) != 0 | g) {
                        u = (g & 1 ^ 1) + (U - b) | 0;
                        u = (o | 0) > (u | 0) ? o : u;
                        w = s;
                        v = n;
                        g = N;
                    } else {
                        b = N;
                        u = 0;
                        w = s;
                        v = n;
                        g = N;
                    }
                }
                s = g - b | 0;
                n = (u | 0) < (s | 0) ? s : u;
                o = w + n | 0;
                g = (J | 0) < (o | 0) ? o : J;
                Ec(a, 32, g, o, h);
                if (!(k[a >> 2] & 32))
                    wc(v, w, a) | 0;
                Ec(a, 48, g, o, h ^ 65536);
                Ec(a, 48, n, s, 0);
                if (!(k[a >> 2] & 32))
                    wc(b, s, a) | 0;
                Ec(a, 32, g, o, h ^ 8192);
                b = I;
            }
        h:
            do
                if ((K | 0) == 245)
                    if (!a)
                        if (!q)
                            f = 0;
                        else {
                            f = 1;
                            while (1) {
                                b = k[e + (f << 2) >> 2] | 0;
                                if (!b)
                                    break;
                                Cc(d + (f << 3) | 0, b, c);
                                f = f + 1 | 0;
                                if ((f | 0) >= 10) {
                                    f = 1;
                                    break h;
                                }
                            }
                            while (1) {
                                f = f + 1 | 0;
                                if ((f | 0) >= 10) {
                                    f = 1;
                                    break h;
                                }
                                if (k[e + (f << 2) >> 2] | 0) {
                                    f = -1;
                                    break;
                                }
                            }
                        }
            while (0);
        r = ga;
        return f | 0;
    }
    function Cc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0;
        a:
            do
                if (b >>> 0 <= 20)
                    do
                        switch (b | 0) {
                        case 9: {
                                d = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                b = k[d >> 2] | 0;
                                k[c >> 2] = d + 4;
                                k[a >> 2] = b;
                                break a;
                            }
                        case 10: {
                                d = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                b = k[d >> 2] | 0;
                                k[c >> 2] = d + 4;
                                d = a;
                                k[d >> 2] = b;
                                k[d + 4 >> 2] = ((b | 0) < 0) << 31 >> 31;
                                break a;
                            }
                        case 11: {
                                d = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                b = k[d >> 2] | 0;
                                k[c >> 2] = d + 4;
                                d = a;
                                k[d >> 2] = b;
                                k[d + 4 >> 2] = 0;
                                break a;
                            }
                        case 12: {
                                d = (k[c >> 2] | 0) + (8 - 1) & ~(8 - 1);
                                b = d;
                                e = k[b >> 2] | 0;
                                b = k[b + 4 >> 2] | 0;
                                k[c >> 2] = d + 8;
                                d = a;
                                k[d >> 2] = e;
                                k[d + 4 >> 2] = b;
                                break a;
                            }
                        case 13: {
                                e = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                d = k[e >> 2] | 0;
                                k[c >> 2] = e + 4;
                                d = (d & 65535) << 16 >> 16;
                                e = a;
                                k[e >> 2] = d;
                                k[e + 4 >> 2] = ((d | 0) < 0) << 31 >> 31;
                                break a;
                            }
                        case 14: {
                                e = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                d = k[e >> 2] | 0;
                                k[c >> 2] = e + 4;
                                e = a;
                                k[e >> 2] = d & 65535;
                                k[e + 4 >> 2] = 0;
                                break a;
                            }
                        case 15: {
                                e = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                d = k[e >> 2] | 0;
                                k[c >> 2] = e + 4;
                                d = (d & 255) << 24 >> 24;
                                e = a;
                                k[e >> 2] = d;
                                k[e + 4 >> 2] = ((d | 0) < 0) << 31 >> 31;
                                break a;
                            }
                        case 16: {
                                e = (k[c >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                d = k[e >> 2] | 0;
                                k[c >> 2] = e + 4;
                                e = a;
                                k[e >> 2] = d & 255;
                                k[e + 4 >> 2] = 0;
                                break a;
                            }
                        case 17: {
                                e = (k[c >> 2] | 0) + (8 - 1) & ~(8 - 1);
                                f = +p[e >> 3];
                                k[c >> 2] = e + 8;
                                p[a >> 3] = f;
                                break a;
                            }
                        case 18: {
                                e = (k[c >> 2] | 0) + (8 - 1) & ~(8 - 1);
                                f = +p[e >> 3];
                                k[c >> 2] = e + 8;
                                p[a >> 3] = f;
                                break a;
                            }
                        default:
                            break a;
                        }
                    while (0);
            while (0);
        return;
    }
    function Dc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0;
        if (b >>> 0 > 0 | (b | 0) == 0 & a >>> 0 > 4294967295)
            while (1) {
                d = Yc(a | 0, b | 0, 10, 0) | 0;
                c = c + -1 | 0;
                i[c >> 0] = d | 48;
                d = a;
                a = Xc(a | 0, b | 0, 10, 0) | 0;
                if (!(b >>> 0 > 9 | (b | 0) == 9 & d >>> 0 > 4294967295))
                    break;
                else
                    b = L;
            }
        if (a)
            while (1) {
                c = c + -1 | 0;
                i[c >> 0] = (a >>> 0) % 10 | 0 | 48;
                if (a >>> 0 < 10)
                    break;
                else
                    a = (a >>> 0) / 10 | 0;
            }
        return c | 0;
    }
    function Ec(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0;
        g = r;
        r = r + 256 | 0;
        f = g;
        do
            if ((c | 0) > (d | 0) & (e & 73728 | 0) == 0) {
                e = c - d | 0;
                Nc(f | 0, b | 0, (e >>> 0 > 256 ? 256 : e) | 0) | 0;
                d = k[a >> 2] | 0;
                c = (d & 32 | 0) == 0;
                if (e >>> 0 > 255) {
                    b = e;
                    do {
                        if (c) {
                            wc(f, 256, a) | 0;
                            d = k[a >> 2] | 0;
                        }
                        b = b + -256 | 0;
                        c = (d & 32 | 0) == 0;
                    } while (b >>> 0 > 255);
                    if (c)
                        e = e & 255;
                    else
                        break;
                } else if (!c)
                    break;
                wc(f, e, a) | 0;
            }
        while (0);
        r = g;
        return;
    }
    function Fc(a) {
        a = a | 0;
        var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0;
        do
            if (a >>> 0 < 245) {
                o = a >>> 0 < 11 ? 16 : a + 11 & -8;
                a = o >>> 3;
                h = k[192] | 0;
                b = h >>> a;
                if (b & 3) {
                    b = (b & 1 ^ 1) + a | 0;
                    d = b << 1;
                    c = 808 + (d << 2) | 0;
                    d = 808 + (d + 2 << 2) | 0;
                    e = k[d >> 2] | 0;
                    f = e + 8 | 0;
                    g = k[f >> 2] | 0;
                    do
                        if ((c | 0) != (g | 0)) {
                            if (g >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            a = g + 12 | 0;
                            if ((k[a >> 2] | 0) == (e | 0)) {
                                k[a >> 2] = c;
                                k[d >> 2] = g;
                                break;
                            } else
                                xa();
                        } else
                            k[192] = h & ~(1 << b);
                    while (0);
                    L = b << 3;
                    k[e + 4 >> 2] = L | 3;
                    L = e + (L | 4) | 0;
                    k[L >> 2] = k[L >> 2] | 1;
                    L = f;
                    return L | 0;
                }
                g = k[194] | 0;
                if (o >>> 0 > g >>> 0) {
                    if (b) {
                        d = 2 << a;
                        d = b << a & (d | 0 - d);
                        d = (d & 0 - d) + -1 | 0;
                        i = d >>> 12 & 16;
                        d = d >>> i;
                        e = d >>> 5 & 8;
                        d = d >>> e;
                        f = d >>> 2 & 4;
                        d = d >>> f;
                        c = d >>> 1 & 2;
                        d = d >>> c;
                        b = d >>> 1 & 1;
                        b = (e | i | f | c | b) + (d >>> b) | 0;
                        d = b << 1;
                        c = 808 + (d << 2) | 0;
                        d = 808 + (d + 2 << 2) | 0;
                        f = k[d >> 2] | 0;
                        i = f + 8 | 0;
                        e = k[i >> 2] | 0;
                        do
                            if ((c | 0) != (e | 0)) {
                                if (e >>> 0 < (k[196] | 0) >>> 0)
                                    xa();
                                a = e + 12 | 0;
                                if ((k[a >> 2] | 0) == (f | 0)) {
                                    k[a >> 2] = c;
                                    k[d >> 2] = e;
                                    j = k[194] | 0;
                                    break;
                                } else
                                    xa();
                            } else {
                                k[192] = h & ~(1 << b);
                                j = g;
                            }
                        while (0);
                        L = b << 3;
                        g = L - o | 0;
                        k[f + 4 >> 2] = o | 3;
                        h = f + o | 0;
                        k[f + (o | 4) >> 2] = g | 1;
                        k[f + L >> 2] = g;
                        if (j) {
                            e = k[197] | 0;
                            c = j >>> 3;
                            a = c << 1;
                            d = 808 + (a << 2) | 0;
                            b = k[192] | 0;
                            c = 1 << c;
                            if (b & c) {
                                b = 808 + (a + 2 << 2) | 0;
                                a = k[b >> 2] | 0;
                                if (a >>> 0 < (k[196] | 0) >>> 0)
                                    xa();
                                else {
                                    l = b;
                                    m = a;
                                }
                            } else {
                                k[192] = b | c;
                                l = 808 + (a + 2 << 2) | 0;
                                m = d;
                            }
                            k[l >> 2] = e;
                            k[m + 12 >> 2] = e;
                            k[e + 8 >> 2] = m;
                            k[e + 12 >> 2] = d;
                        }
                        k[194] = g;
                        k[197] = h;
                        L = i;
                        return L | 0;
                    }
                    a = k[193] | 0;
                    if (a) {
                        h = (a & 0 - a) + -1 | 0;
                        K = h >>> 12 & 16;
                        h = h >>> K;
                        J = h >>> 5 & 8;
                        h = h >>> J;
                        L = h >>> 2 & 4;
                        h = h >>> L;
                        b = h >>> 1 & 2;
                        h = h >>> b;
                        i = h >>> 1 & 1;
                        i = k[1072 + ((J | K | L | b | i) + (h >>> i) << 2) >> 2] | 0;
                        h = (k[i + 4 >> 2] & -8) - o | 0;
                        b = i;
                        while (1) {
                            a = k[b + 16 >> 2] | 0;
                            if (!a) {
                                a = k[b + 20 >> 2] | 0;
                                if (!a)
                                    break;
                            }
                            b = (k[a + 4 >> 2] & -8) - o | 0;
                            L = b >>> 0 < h >>> 0;
                            h = L ? b : h;
                            b = a;
                            i = L ? a : i;
                        }
                        e = k[196] | 0;
                        if (i >>> 0 < e >>> 0)
                            xa();
                        g = i + o | 0;
                        if (i >>> 0 >= g >>> 0)
                            xa();
                        f = k[i + 24 >> 2] | 0;
                        c = k[i + 12 >> 2] | 0;
                        do
                            if ((c | 0) == (i | 0)) {
                                b = i + 20 | 0;
                                a = k[b >> 2] | 0;
                                if (!a) {
                                    b = i + 16 | 0;
                                    a = k[b >> 2] | 0;
                                    if (!a) {
                                        n = 0;
                                        break;
                                    }
                                }
                                while (1) {
                                    c = a + 20 | 0;
                                    d = k[c >> 2] | 0;
                                    if (d) {
                                        a = d;
                                        b = c;
                                        continue;
                                    }
                                    c = a + 16 | 0;
                                    d = k[c >> 2] | 0;
                                    if (!d)
                                        break;
                                    else {
                                        a = d;
                                        b = c;
                                    }
                                }
                                if (b >>> 0 < e >>> 0)
                                    xa();
                                else {
                                    k[b >> 2] = 0;
                                    n = a;
                                    break;
                                }
                            } else {
                                d = k[i + 8 >> 2] | 0;
                                if (d >>> 0 < e >>> 0)
                                    xa();
                                a = d + 12 | 0;
                                if ((k[a >> 2] | 0) != (i | 0))
                                    xa();
                                b = c + 8 | 0;
                                if ((k[b >> 2] | 0) == (i | 0)) {
                                    k[a >> 2] = c;
                                    k[b >> 2] = d;
                                    n = c;
                                    break;
                                } else
                                    xa();
                            }
                        while (0);
                        do
                            if (f) {
                                a = k[i + 28 >> 2] | 0;
                                b = 1072 + (a << 2) | 0;
                                if ((i | 0) == (k[b >> 2] | 0)) {
                                    k[b >> 2] = n;
                                    if (!n) {
                                        k[193] = k[193] & ~(1 << a);
                                        break;
                                    }
                                } else {
                                    if (f >>> 0 < (k[196] | 0) >>> 0)
                                        xa();
                                    a = f + 16 | 0;
                                    if ((k[a >> 2] | 0) == (i | 0))
                                        k[a >> 2] = n;
                                    else
                                        k[f + 20 >> 2] = n;
                                    if (!n)
                                        break;
                                }
                                b = k[196] | 0;
                                if (n >>> 0 < b >>> 0)
                                    xa();
                                k[n + 24 >> 2] = f;
                                a = k[i + 16 >> 2] | 0;
                                do
                                    if (a)
                                        if (a >>> 0 < b >>> 0)
                                            xa();
                                        else {
                                            k[n + 16 >> 2] = a;
                                            k[a + 24 >> 2] = n;
                                            break;
                                        }
                                while (0);
                                a = k[i + 20 >> 2] | 0;
                                if (a)
                                    if (a >>> 0 < (k[196] | 0) >>> 0)
                                        xa();
                                    else {
                                        k[n + 20 >> 2] = a;
                                        k[a + 24 >> 2] = n;
                                        break;
                                    }
                            }
                        while (0);
                        if (h >>> 0 < 16) {
                            L = h + o | 0;
                            k[i + 4 >> 2] = L | 3;
                            L = i + (L + 4) | 0;
                            k[L >> 2] = k[L >> 2] | 1;
                        } else {
                            k[i + 4 >> 2] = o | 3;
                            k[i + (o | 4) >> 2] = h | 1;
                            k[i + (h + o) >> 2] = h;
                            a = k[194] | 0;
                            if (a) {
                                e = k[197] | 0;
                                c = a >>> 3;
                                a = c << 1;
                                d = 808 + (a << 2) | 0;
                                b = k[192] | 0;
                                c = 1 << c;
                                if (b & c) {
                                    a = 808 + (a + 2 << 2) | 0;
                                    b = k[a >> 2] | 0;
                                    if (b >>> 0 < (k[196] | 0) >>> 0)
                                        xa();
                                    else {
                                        p = a;
                                        q = b;
                                    }
                                } else {
                                    k[192] = b | c;
                                    p = 808 + (a + 2 << 2) | 0;
                                    q = d;
                                }
                                k[p >> 2] = e;
                                k[q + 12 >> 2] = e;
                                k[e + 8 >> 2] = q;
                                k[e + 12 >> 2] = d;
                            }
                            k[194] = h;
                            k[197] = g;
                        }
                        L = i + 8 | 0;
                        return L | 0;
                    }
                }
            } else if (a >>> 0 <= 4294967231) {
                a = a + 11 | 0;
                o = a & -8;
                i = k[193] | 0;
                if (i) {
                    b = 0 - o | 0;
                    a = a >>> 8;
                    if (a)
                        if (o >>> 0 > 16777215)
                            h = 31;
                        else {
                            q = (a + 1048320 | 0) >>> 16 & 8;
                            x = a << q;
                            p = (x + 520192 | 0) >>> 16 & 4;
                            x = x << p;
                            h = (x + 245760 | 0) >>> 16 & 2;
                            h = 14 - (p | q | h) + (x << h >>> 15) | 0;
                            h = o >>> (h + 7 | 0) & 1 | h << 1;
                        }
                    else
                        h = 0;
                    a = k[1072 + (h << 2) >> 2] | 0;
                    a:
                        do
                            if (!a) {
                                c = 0;
                                a = 0;
                                x = 86;
                            } else {
                                e = b;
                                c = 0;
                                f = o << ((h | 0) == 31 ? 0 : 25 - (h >>> 1) | 0);
                                g = a;
                                a = 0;
                                while (1) {
                                    d = k[g + 4 >> 2] & -8;
                                    b = d - o | 0;
                                    if (b >>> 0 < e >>> 0)
                                        if ((d | 0) == (o | 0)) {
                                            d = g;
                                            a = g;
                                            x = 90;
                                            break a;
                                        } else
                                            a = g;
                                    else
                                        b = e;
                                    x = k[g + 20 >> 2] | 0;
                                    g = k[g + 16 + (f >>> 31 << 2) >> 2] | 0;
                                    c = (x | 0) == 0 | (x | 0) == (g | 0) ? c : x;
                                    if (!g) {
                                        x = 86;
                                        break;
                                    } else {
                                        e = b;
                                        f = f << 1;
                                    }
                                }
                            }
                        while (0);
                    if ((x | 0) == 86) {
                        if ((c | 0) == 0 & (a | 0) == 0) {
                            a = 2 << h;
                            a = (a | 0 - a) & i;
                            if (!a)
                                break;
                            a = (a & 0 - a) + -1 | 0;
                            n = a >>> 12 & 16;
                            a = a >>> n;
                            m = a >>> 5 & 8;
                            a = a >>> m;
                            p = a >>> 2 & 4;
                            a = a >>> p;
                            q = a >>> 1 & 2;
                            a = a >>> q;
                            c = a >>> 1 & 1;
                            c = k[1072 + ((m | n | p | q | c) + (a >>> c) << 2) >> 2] | 0;
                            a = 0;
                        }
                        if (!c) {
                            h = b;
                            i = a;
                        } else {
                            d = c;
                            x = 90;
                        }
                    }
                    if ((x | 0) == 90)
                        while (1) {
                            x = 0;
                            q = (k[d + 4 >> 2] & -8) - o | 0;
                            c = q >>> 0 < b >>> 0;
                            b = c ? q : b;
                            a = c ? d : a;
                            c = k[d + 16 >> 2] | 0;
                            if (c) {
                                d = c;
                                x = 90;
                                continue;
                            }
                            d = k[d + 20 >> 2] | 0;
                            if (!d) {
                                h = b;
                                i = a;
                                break;
                            } else
                                x = 90;
                        }
                    if ((i | 0) != 0 ? h >>> 0 < ((k[194] | 0) - o | 0) >>> 0 : 0) {
                        e = k[196] | 0;
                        if (i >>> 0 < e >>> 0)
                            xa();
                        g = i + o | 0;
                        if (i >>> 0 >= g >>> 0)
                            xa();
                        f = k[i + 24 >> 2] | 0;
                        c = k[i + 12 >> 2] | 0;
                        do
                            if ((c | 0) == (i | 0)) {
                                b = i + 20 | 0;
                                a = k[b >> 2] | 0;
                                if (!a) {
                                    b = i + 16 | 0;
                                    a = k[b >> 2] | 0;
                                    if (!a) {
                                        s = 0;
                                        break;
                                    }
                                }
                                while (1) {
                                    c = a + 20 | 0;
                                    d = k[c >> 2] | 0;
                                    if (d) {
                                        a = d;
                                        b = c;
                                        continue;
                                    }
                                    c = a + 16 | 0;
                                    d = k[c >> 2] | 0;
                                    if (!d)
                                        break;
                                    else {
                                        a = d;
                                        b = c;
                                    }
                                }
                                if (b >>> 0 < e >>> 0)
                                    xa();
                                else {
                                    k[b >> 2] = 0;
                                    s = a;
                                    break;
                                }
                            } else {
                                d = k[i + 8 >> 2] | 0;
                                if (d >>> 0 < e >>> 0)
                                    xa();
                                a = d + 12 | 0;
                                if ((k[a >> 2] | 0) != (i | 0))
                                    xa();
                                b = c + 8 | 0;
                                if ((k[b >> 2] | 0) == (i | 0)) {
                                    k[a >> 2] = c;
                                    k[b >> 2] = d;
                                    s = c;
                                    break;
                                } else
                                    xa();
                            }
                        while (0);
                        do
                            if (f) {
                                a = k[i + 28 >> 2] | 0;
                                b = 1072 + (a << 2) | 0;
                                if ((i | 0) == (k[b >> 2] | 0)) {
                                    k[b >> 2] = s;
                                    if (!s) {
                                        k[193] = k[193] & ~(1 << a);
                                        break;
                                    }
                                } else {
                                    if (f >>> 0 < (k[196] | 0) >>> 0)
                                        xa();
                                    a = f + 16 | 0;
                                    if ((k[a >> 2] | 0) == (i | 0))
                                        k[a >> 2] = s;
                                    else
                                        k[f + 20 >> 2] = s;
                                    if (!s)
                                        break;
                                }
                                b = k[196] | 0;
                                if (s >>> 0 < b >>> 0)
                                    xa();
                                k[s + 24 >> 2] = f;
                                a = k[i + 16 >> 2] | 0;
                                do
                                    if (a)
                                        if (a >>> 0 < b >>> 0)
                                            xa();
                                        else {
                                            k[s + 16 >> 2] = a;
                                            k[a + 24 >> 2] = s;
                                            break;
                                        }
                                while (0);
                                a = k[i + 20 >> 2] | 0;
                                if (a)
                                    if (a >>> 0 < (k[196] | 0) >>> 0)
                                        xa();
                                    else {
                                        k[s + 20 >> 2] = a;
                                        k[a + 24 >> 2] = s;
                                        break;
                                    }
                            }
                        while (0);
                        b:
                            do
                                if (h >>> 0 >= 16) {
                                    k[i + 4 >> 2] = o | 3;
                                    k[i + (o | 4) >> 2] = h | 1;
                                    k[i + (h + o) >> 2] = h;
                                    a = h >>> 3;
                                    if (h >>> 0 < 256) {
                                        b = a << 1;
                                        d = 808 + (b << 2) | 0;
                                        c = k[192] | 0;
                                        a = 1 << a;
                                        if (c & a) {
                                            a = 808 + (b + 2 << 2) | 0;
                                            b = k[a >> 2] | 0;
                                            if (b >>> 0 < (k[196] | 0) >>> 0)
                                                xa();
                                            else {
                                                t = a;
                                                u = b;
                                            }
                                        } else {
                                            k[192] = c | a;
                                            t = 808 + (b + 2 << 2) | 0;
                                            u = d;
                                        }
                                        k[t >> 2] = g;
                                        k[u + 12 >> 2] = g;
                                        k[i + (o + 8) >> 2] = u;
                                        k[i + (o + 12) >> 2] = d;
                                        break;
                                    }
                                    a = h >>> 8;
                                    if (a)
                                        if (h >>> 0 > 16777215)
                                            d = 31;
                                        else {
                                            K = (a + 1048320 | 0) >>> 16 & 8;
                                            L = a << K;
                                            J = (L + 520192 | 0) >>> 16 & 4;
                                            L = L << J;
                                            d = (L + 245760 | 0) >>> 16 & 2;
                                            d = 14 - (J | K | d) + (L << d >>> 15) | 0;
                                            d = h >>> (d + 7 | 0) & 1 | d << 1;
                                        }
                                    else
                                        d = 0;
                                    a = 1072 + (d << 2) | 0;
                                    k[i + (o + 28) >> 2] = d;
                                    k[i + (o + 20) >> 2] = 0;
                                    k[i + (o + 16) >> 2] = 0;
                                    b = k[193] | 0;
                                    c = 1 << d;
                                    if (!(b & c)) {
                                        k[193] = b | c;
                                        k[a >> 2] = g;
                                        k[i + (o + 24) >> 2] = a;
                                        k[i + (o + 12) >> 2] = g;
                                        k[i + (o + 8) >> 2] = g;
                                        break;
                                    }
                                    a = k[a >> 2] | 0;
                                    c:
                                        do
                                            if ((k[a + 4 >> 2] & -8 | 0) != (h | 0)) {
                                                d = h << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                                                while (1) {
                                                    c = a + 16 + (d >>> 31 << 2) | 0;
                                                    b = k[c >> 2] | 0;
                                                    if (!b)
                                                        break;
                                                    if ((k[b + 4 >> 2] & -8 | 0) == (h | 0)) {
                                                        w = b;
                                                        break c;
                                                    } else {
                                                        d = d << 1;
                                                        a = b;
                                                    }
                                                }
                                                if (c >>> 0 < (k[196] | 0) >>> 0)
                                                    xa();
                                                else {
                                                    k[c >> 2] = g;
                                                    k[i + (o + 24) >> 2] = a;
                                                    k[i + (o + 12) >> 2] = g;
                                                    k[i + (o + 8) >> 2] = g;
                                                    break b;
                                                }
                                            } else
                                                w = a;
                                        while (0);
                                    a = w + 8 | 0;
                                    b = k[a >> 2] | 0;
                                    L = k[196] | 0;
                                    if (b >>> 0 >= L >>> 0 & w >>> 0 >= L >>> 0) {
                                        k[b + 12 >> 2] = g;
                                        k[a >> 2] = g;
                                        k[i + (o + 8) >> 2] = b;
                                        k[i + (o + 12) >> 2] = w;
                                        k[i + (o + 24) >> 2] = 0;
                                        break;
                                    } else
                                        xa();
                                } else {
                                    L = h + o | 0;
                                    k[i + 4 >> 2] = L | 3;
                                    L = i + (L + 4) | 0;
                                    k[L >> 2] = k[L >> 2] | 1;
                                }
                            while (0);
                        L = i + 8 | 0;
                        return L | 0;
                    }
                }
            } else
                o = -1;
        while (0);
        c = k[194] | 0;
        if (c >>> 0 >= o >>> 0) {
            a = c - o | 0;
            b = k[197] | 0;
            if (a >>> 0 > 15) {
                k[197] = b + o;
                k[194] = a;
                k[b + (o + 4) >> 2] = a | 1;
                k[b + c >> 2] = a;
                k[b + 4 >> 2] = o | 3;
            } else {
                k[194] = 0;
                k[197] = 0;
                k[b + 4 >> 2] = c | 3;
                L = b + (c + 4) | 0;
                k[L >> 2] = k[L >> 2] | 1;
            }
            L = b + 8 | 0;
            return L | 0;
        }
        a = k[195] | 0;
        if (a >>> 0 > o >>> 0) {
            K = a - o | 0;
            k[195] = K;
            L = k[198] | 0;
            k[198] = L + o;
            k[L + (o + 4) >> 2] = K | 1;
            k[L + 4 >> 2] = o | 3;
            L = L + 8 | 0;
            return L | 0;
        }
        do
            if (!(k[310] | 0)) {
                a = Ea(30) | 0;
                if (!(a + -1 & a)) {
                    k[312] = a;
                    k[311] = a;
                    k[313] = -1;
                    k[314] = -1;
                    k[315] = 0;
                    k[303] = 0;
                    w = (za(0) | 0) & -16 ^ 1431655768;
                    k[310] = w;
                    break;
                } else
                    xa();
            }
        while (0);
        f = o + 48 | 0;
        e = k[312] | 0;
        g = o + 47 | 0;
        d = e + g | 0;
        e = 0 - e | 0;
        h = d & e;
        if (h >>> 0 <= o >>> 0) {
            L = 0;
            return L | 0;
        }
        a = k[302] | 0;
        if ((a | 0) != 0 ? (u = k[300] | 0, w = u + h | 0, w >>> 0 <= u >>> 0 | w >>> 0 > a >>> 0) : 0) {
            L = 0;
            return L | 0;
        }
        d:
            do
                if (!(k[303] & 4)) {
                    c = k[198] | 0;
                    e:
                        do
                            if (c) {
                                a = 1216;
                                while (1) {
                                    b = k[a >> 2] | 0;
                                    if (b >>> 0 <= c >>> 0 ? (r = a + 4 | 0, (b + (k[r >> 2] | 0) | 0) >>> 0 > c >>> 0) : 0)
                                        break;
                                    a = k[a + 8 >> 2] | 0;
                                    if (!a) {
                                        x = 174;
                                        break e;
                                    }
                                }
                                b = d - (k[195] | 0) & e;
                                if (b >>> 0 < 2147483647) {
                                    c = ya(b | 0) | 0;
                                    w = (c | 0) == ((k[a >> 2] | 0) + (k[r >> 2] | 0) | 0);
                                    a = w ? b : 0;
                                    if (w) {
                                        if ((c | 0) != (-1 | 0)) {
                                            r = c;
                                            q = a;
                                            x = 194;
                                            break d;
                                        }
                                    } else
                                        x = 184;
                                } else
                                    a = 0;
                            } else
                                x = 174;
                        while (0);
                    do
                        if ((x | 0) == 174) {
                            d = ya(0) | 0;
                            if ((d | 0) != (-1 | 0)) {
                                a = d;
                                b = k[311] | 0;
                                c = b + -1 | 0;
                                if (!(c & a))
                                    b = h;
                                else
                                    b = h - a + (c + a & 0 - b) | 0;
                                a = k[300] | 0;
                                c = a + b | 0;
                                if (b >>> 0 > o >>> 0 & b >>> 0 < 2147483647) {
                                    w = k[302] | 0;
                                    if ((w | 0) != 0 ? c >>> 0 <= a >>> 0 | c >>> 0 > w >>> 0 : 0) {
                                        a = 0;
                                        break;
                                    }
                                    c = ya(b | 0) | 0;
                                    x = (c | 0) == (d | 0);
                                    a = x ? b : 0;
                                    if (x) {
                                        r = d;
                                        q = a;
                                        x = 194;
                                        break d;
                                    } else
                                        x = 184;
                                } else
                                    a = 0;
                            } else
                                a = 0;
                        }
                    while (0);
                    f:
                        do
                            if ((x | 0) == 184) {
                                d = 0 - b | 0;
                                do
                                    if (f >>> 0 > b >>> 0 & (b >>> 0 < 2147483647 & (c | 0) != (-1 | 0)) ? (v = k[312] | 0, v = g - b + v & 0 - v, v >>> 0 < 2147483647) : 0)
                                        if ((ya(v | 0) | 0) == (-1 | 0)) {
                                            ya(d | 0) | 0;
                                            break f;
                                        } else {
                                            b = v + b | 0;
                                            break;
                                        }
                                while (0);
                                if ((c | 0) != (-1 | 0)) {
                                    r = c;
                                    q = b;
                                    x = 194;
                                    break d;
                                }
                            }
                        while (0);
                    k[303] = k[303] | 4;
                    x = 191;
                } else {
                    a = 0;
                    x = 191;
                }
            while (0);
        if ((((x | 0) == 191 ? h >>> 0 < 2147483647 : 0) ? (y = ya(h | 0) | 0, z = ya(0) | 0, y >>> 0 < z >>> 0 & ((y | 0) != (-1 | 0) & (z | 0) != (-1 | 0))) : 0) ? (A = z - y | 0, B = A >>> 0 > (o + 40 | 0) >>> 0, B) : 0) {
            r = y;
            q = B ? A : a;
            x = 194;
        }
        if ((x | 0) == 194) {
            a = (k[300] | 0) + q | 0;
            k[300] = a;
            if (a >>> 0 > (k[301] | 0) >>> 0)
                k[301] = a;
            g = k[198] | 0;
            g:
                do
                    if (g) {
                        e = 1216;
                        while (1) {
                            a = k[e >> 2] | 0;
                            b = e + 4 | 0;
                            c = k[b >> 2] | 0;
                            if ((r | 0) == (a + c | 0)) {
                                x = 204;
                                break;
                            }
                            d = k[e + 8 >> 2] | 0;
                            if (!d)
                                break;
                            else
                                e = d;
                        }
                        if (((x | 0) == 204 ? (k[e + 12 >> 2] & 8 | 0) == 0 : 0) ? g >>> 0 < r >>> 0 & g >>> 0 >= a >>> 0 : 0) {
                            k[b >> 2] = c + q;
                            L = (k[195] | 0) + q | 0;
                            K = g + 8 | 0;
                            K = (K & 7 | 0) == 0 ? 0 : 0 - K & 7;
                            J = L - K | 0;
                            k[198] = g + K;
                            k[195] = J;
                            k[g + (K + 4) >> 2] = J | 1;
                            k[g + (L + 4) >> 2] = 40;
                            k[199] = k[314];
                            break;
                        }
                        a = k[196] | 0;
                        if (r >>> 0 < a >>> 0) {
                            k[196] = r;
                            i = r;
                        } else
                            i = a;
                        b = r + q | 0;
                        a = 1216;
                        while (1) {
                            if ((k[a >> 2] | 0) == (b | 0)) {
                                x = 212;
                                break;
                            }
                            a = k[a + 8 >> 2] | 0;
                            if (!a) {
                                b = 1216;
                                break;
                            }
                        }
                        if ((x | 0) == 212)
                            if (!(k[a + 12 >> 2] & 8)) {
                                k[a >> 2] = r;
                                n = a + 4 | 0;
                                k[n >> 2] = (k[n >> 2] | 0) + q;
                                n = r + 8 | 0;
                                n = (n & 7 | 0) == 0 ? 0 : 0 - n & 7;
                                j = r + (q + 8) | 0;
                                j = (j & 7 | 0) == 0 ? 0 : 0 - j & 7;
                                a = r + (j + q) | 0;
                                m = n + o | 0;
                                p = r + m | 0;
                                l = a - (r + n) - o | 0;
                                k[r + (n + 4) >> 2] = o | 3;
                                h:
                                    do
                                        if ((a | 0) != (g | 0)) {
                                            if ((a | 0) == (k[197] | 0)) {
                                                L = (k[194] | 0) + l | 0;
                                                k[194] = L;
                                                k[197] = p;
                                                k[r + (m + 4) >> 2] = L | 1;
                                                k[r + (L + m) >> 2] = L;
                                                break;
                                            }
                                            g = q + 4 | 0;
                                            b = k[r + (j + g) >> 2] | 0;
                                            if ((b & 3 | 0) == 1) {
                                                h = b & -8;
                                                e = b >>> 3;
                                                i:
                                                    do
                                                        if (b >>> 0 >= 256) {
                                                            f = k[r + ((j | 24) + q) >> 2] | 0;
                                                            d = k[r + (q + 12 + j) >> 2] | 0;
                                                            do
                                                                if ((d | 0) == (a | 0)) {
                                                                    c = j | 16;
                                                                    d = r + (c + g) | 0;
                                                                    b = k[d >> 2] | 0;
                                                                    if (!b) {
                                                                        c = r + (c + q) | 0;
                                                                        b = k[c >> 2] | 0;
                                                                        if (!b) {
                                                                            I = 0;
                                                                            break;
                                                                        }
                                                                    } else
                                                                        c = d;
                                                                    while (1) {
                                                                        d = b + 20 | 0;
                                                                        e = k[d >> 2] | 0;
                                                                        if (e) {
                                                                            b = e;
                                                                            c = d;
                                                                            continue;
                                                                        }
                                                                        d = b + 16 | 0;
                                                                        e = k[d >> 2] | 0;
                                                                        if (!e)
                                                                            break;
                                                                        else {
                                                                            b = e;
                                                                            c = d;
                                                                        }
                                                                    }
                                                                    if (c >>> 0 < i >>> 0)
                                                                        xa();
                                                                    else {
                                                                        k[c >> 2] = 0;
                                                                        I = b;
                                                                        break;
                                                                    }
                                                                } else {
                                                                    e = k[r + ((j | 8) + q) >> 2] | 0;
                                                                    if (e >>> 0 < i >>> 0)
                                                                        xa();
                                                                    b = e + 12 | 0;
                                                                    if ((k[b >> 2] | 0) != (a | 0))
                                                                        xa();
                                                                    c = d + 8 | 0;
                                                                    if ((k[c >> 2] | 0) == (a | 0)) {
                                                                        k[b >> 2] = d;
                                                                        k[c >> 2] = e;
                                                                        I = d;
                                                                        break;
                                                                    } else
                                                                        xa();
                                                                }
                                                            while (0);
                                                            if (!f)
                                                                break;
                                                            b = k[r + (q + 28 + j) >> 2] | 0;
                                                            c = 1072 + (b << 2) | 0;
                                                            do
                                                                if ((a | 0) != (k[c >> 2] | 0)) {
                                                                    if (f >>> 0 < (k[196] | 0) >>> 0)
                                                                        xa();
                                                                    b = f + 16 | 0;
                                                                    if ((k[b >> 2] | 0) == (a | 0))
                                                                        k[b >> 2] = I;
                                                                    else
                                                                        k[f + 20 >> 2] = I;
                                                                    if (!I)
                                                                        break i;
                                                                } else {
                                                                    k[c >> 2] = I;
                                                                    if (I)
                                                                        break;
                                                                    k[193] = k[193] & ~(1 << b);
                                                                    break i;
                                                                }
                                                            while (0);
                                                            c = k[196] | 0;
                                                            if (I >>> 0 < c >>> 0)
                                                                xa();
                                                            k[I + 24 >> 2] = f;
                                                            a = j | 16;
                                                            b = k[r + (a + q) >> 2] | 0;
                                                            do
                                                                if (b)
                                                                    if (b >>> 0 < c >>> 0)
                                                                        xa();
                                                                    else {
                                                                        k[I + 16 >> 2] = b;
                                                                        k[b + 24 >> 2] = I;
                                                                        break;
                                                                    }
                                                            while (0);
                                                            a = k[r + (a + g) >> 2] | 0;
                                                            if (!a)
                                                                break;
                                                            if (a >>> 0 < (k[196] | 0) >>> 0)
                                                                xa();
                                                            else {
                                                                k[I + 20 >> 2] = a;
                                                                k[a + 24 >> 2] = I;
                                                                break;
                                                            }
                                                        } else {
                                                            c = k[r + ((j | 8) + q) >> 2] | 0;
                                                            d = k[r + (q + 12 + j) >> 2] | 0;
                                                            b = 808 + (e << 1 << 2) | 0;
                                                            do
                                                                if ((c | 0) != (b | 0)) {
                                                                    if (c >>> 0 < i >>> 0)
                                                                        xa();
                                                                    if ((k[c + 12 >> 2] | 0) == (a | 0))
                                                                        break;
                                                                    xa();
                                                                }
                                                            while (0);
                                                            if ((d | 0) == (c | 0)) {
                                                                k[192] = k[192] & ~(1 << e);
                                                                break;
                                                            }
                                                            do
                                                                if ((d | 0) == (b | 0))
                                                                    E = d + 8 | 0;
                                                                else {
                                                                    if (d >>> 0 < i >>> 0)
                                                                        xa();
                                                                    b = d + 8 | 0;
                                                                    if ((k[b >> 2] | 0) == (a | 0)) {
                                                                        E = b;
                                                                        break;
                                                                    }
                                                                    xa();
                                                                }
                                                            while (0);
                                                            k[c + 12 >> 2] = d;
                                                            k[E >> 2] = c;
                                                        }
                                                    while (0);
                                                a = r + ((h | j) + q) | 0;
                                                e = h + l | 0;
                                            } else
                                                e = l;
                                            a = a + 4 | 0;
                                            k[a >> 2] = k[a >> 2] & -2;
                                            k[r + (m + 4) >> 2] = e | 1;
                                            k[r + (e + m) >> 2] = e;
                                            a = e >>> 3;
                                            if (e >>> 0 < 256) {
                                                b = a << 1;
                                                d = 808 + (b << 2) | 0;
                                                c = k[192] | 0;
                                                a = 1 << a;
                                                do
                                                    if (!(c & a)) {
                                                        k[192] = c | a;
                                                        J = 808 + (b + 2 << 2) | 0;
                                                        K = d;
                                                    } else {
                                                        a = 808 + (b + 2 << 2) | 0;
                                                        b = k[a >> 2] | 0;
                                                        if (b >>> 0 >= (k[196] | 0) >>> 0) {
                                                            J = a;
                                                            K = b;
                                                            break;
                                                        }
                                                        xa();
                                                    }
                                                while (0);
                                                k[J >> 2] = p;
                                                k[K + 12 >> 2] = p;
                                                k[r + (m + 8) >> 2] = K;
                                                k[r + (m + 12) >> 2] = d;
                                                break;
                                            }
                                            a = e >>> 8;
                                            do
                                                if (!a)
                                                    d = 0;
                                                else {
                                                    if (e >>> 0 > 16777215) {
                                                        d = 31;
                                                        break;
                                                    }
                                                    J = (a + 1048320 | 0) >>> 16 & 8;
                                                    K = a << J;
                                                    I = (K + 520192 | 0) >>> 16 & 4;
                                                    K = K << I;
                                                    d = (K + 245760 | 0) >>> 16 & 2;
                                                    d = 14 - (I | J | d) + (K << d >>> 15) | 0;
                                                    d = e >>> (d + 7 | 0) & 1 | d << 1;
                                                }
                                            while (0);
                                            a = 1072 + (d << 2) | 0;
                                            k[r + (m + 28) >> 2] = d;
                                            k[r + (m + 20) >> 2] = 0;
                                            k[r + (m + 16) >> 2] = 0;
                                            b = k[193] | 0;
                                            c = 1 << d;
                                            if (!(b & c)) {
                                                k[193] = b | c;
                                                k[a >> 2] = p;
                                                k[r + (m + 24) >> 2] = a;
                                                k[r + (m + 12) >> 2] = p;
                                                k[r + (m + 8) >> 2] = p;
                                                break;
                                            }
                                            a = k[a >> 2] | 0;
                                            j:
                                                do
                                                    if ((k[a + 4 >> 2] & -8 | 0) != (e | 0)) {
                                                        d = e << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                                                        while (1) {
                                                            c = a + 16 + (d >>> 31 << 2) | 0;
                                                            b = k[c >> 2] | 0;
                                                            if (!b)
                                                                break;
                                                            if ((k[b + 4 >> 2] & -8 | 0) == (e | 0)) {
                                                                L = b;
                                                                break j;
                                                            } else {
                                                                d = d << 1;
                                                                a = b;
                                                            }
                                                        }
                                                        if (c >>> 0 < (k[196] | 0) >>> 0)
                                                            xa();
                                                        else {
                                                            k[c >> 2] = p;
                                                            k[r + (m + 24) >> 2] = a;
                                                            k[r + (m + 12) >> 2] = p;
                                                            k[r + (m + 8) >> 2] = p;
                                                            break h;
                                                        }
                                                    } else
                                                        L = a;
                                                while (0);
                                            a = L + 8 | 0;
                                            b = k[a >> 2] | 0;
                                            K = k[196] | 0;
                                            if (b >>> 0 >= K >>> 0 & L >>> 0 >= K >>> 0) {
                                                k[b + 12 >> 2] = p;
                                                k[a >> 2] = p;
                                                k[r + (m + 8) >> 2] = b;
                                                k[r + (m + 12) >> 2] = L;
                                                k[r + (m + 24) >> 2] = 0;
                                                break;
                                            } else
                                                xa();
                                        } else {
                                            L = (k[195] | 0) + l | 0;
                                            k[195] = L;
                                            k[198] = p;
                                            k[r + (m + 4) >> 2] = L | 1;
                                        }
                                    while (0);
                                L = r + (n | 8) | 0;
                                return L | 0;
                            } else
                                b = 1216;
                        while (1) {
                            a = k[b >> 2] | 0;
                            if (a >>> 0 <= g >>> 0 ? (C = k[b + 4 >> 2] | 0, D = a + C | 0, D >>> 0 > g >>> 0) : 0)
                                break;
                            b = k[b + 8 >> 2] | 0;
                        }
                        b = a + (C + -39) | 0;
                        b = a + (C + -47 + ((b & 7 | 0) == 0 ? 0 : 0 - b & 7)) | 0;
                        e = g + 16 | 0;
                        b = b >>> 0 < e >>> 0 ? g : b;
                        a = b + 8 | 0;
                        c = r + 8 | 0;
                        c = (c & 7 | 0) == 0 ? 0 : 0 - c & 7;
                        L = q + -40 - c | 0;
                        k[198] = r + c;
                        k[195] = L;
                        k[r + (c + 4) >> 2] = L | 1;
                        k[r + (q + -36) >> 2] = 40;
                        k[199] = k[314];
                        c = b + 4 | 0;
                        k[c >> 2] = 27;
                        k[a >> 2] = k[304];
                        k[a + 4 >> 2] = k[305];
                        k[a + 8 >> 2] = k[306];
                        k[a + 12 >> 2] = k[307];
                        k[304] = r;
                        k[305] = q;
                        k[307] = 0;
                        k[306] = a;
                        a = b + 28 | 0;
                        k[a >> 2] = 7;
                        if ((b + 32 | 0) >>> 0 < D >>> 0)
                            do {
                                L = a;
                                a = a + 4 | 0;
                                k[a >> 2] = 7;
                            } while ((L + 8 | 0) >>> 0 < D >>> 0);
                        if ((b | 0) != (g | 0)) {
                            f = b - g | 0;
                            k[c >> 2] = k[c >> 2] & -2;
                            k[g + 4 >> 2] = f | 1;
                            k[b >> 2] = f;
                            a = f >>> 3;
                            if (f >>> 0 < 256) {
                                b = a << 1;
                                d = 808 + (b << 2) | 0;
                                c = k[192] | 0;
                                a = 1 << a;
                                if (c & a) {
                                    a = 808 + (b + 2 << 2) | 0;
                                    b = k[a >> 2] | 0;
                                    if (b >>> 0 < (k[196] | 0) >>> 0)
                                        xa();
                                    else {
                                        F = a;
                                        G = b;
                                    }
                                } else {
                                    k[192] = c | a;
                                    F = 808 + (b + 2 << 2) | 0;
                                    G = d;
                                }
                                k[F >> 2] = g;
                                k[G + 12 >> 2] = g;
                                k[g + 8 >> 2] = G;
                                k[g + 12 >> 2] = d;
                                break;
                            }
                            a = f >>> 8;
                            if (a)
                                if (f >>> 0 > 16777215)
                                    d = 31;
                                else {
                                    K = (a + 1048320 | 0) >>> 16 & 8;
                                    L = a << K;
                                    J = (L + 520192 | 0) >>> 16 & 4;
                                    L = L << J;
                                    d = (L + 245760 | 0) >>> 16 & 2;
                                    d = 14 - (J | K | d) + (L << d >>> 15) | 0;
                                    d = f >>> (d + 7 | 0) & 1 | d << 1;
                                }
                            else
                                d = 0;
                            c = 1072 + (d << 2) | 0;
                            k[g + 28 >> 2] = d;
                            k[g + 20 >> 2] = 0;
                            k[e >> 2] = 0;
                            a = k[193] | 0;
                            b = 1 << d;
                            if (!(a & b)) {
                                k[193] = a | b;
                                k[c >> 2] = g;
                                k[g + 24 >> 2] = c;
                                k[g + 12 >> 2] = g;
                                k[g + 8 >> 2] = g;
                                break;
                            }
                            a = k[c >> 2] | 0;
                            k:
                                do
                                    if ((k[a + 4 >> 2] & -8 | 0) != (f | 0)) {
                                        d = f << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                                        while (1) {
                                            c = a + 16 + (d >>> 31 << 2) | 0;
                                            b = k[c >> 2] | 0;
                                            if (!b)
                                                break;
                                            if ((k[b + 4 >> 2] & -8 | 0) == (f | 0)) {
                                                H = b;
                                                break k;
                                            } else {
                                                d = d << 1;
                                                a = b;
                                            }
                                        }
                                        if (c >>> 0 < (k[196] | 0) >>> 0)
                                            xa();
                                        else {
                                            k[c >> 2] = g;
                                            k[g + 24 >> 2] = a;
                                            k[g + 12 >> 2] = g;
                                            k[g + 8 >> 2] = g;
                                            break g;
                                        }
                                    } else
                                        H = a;
                                while (0);
                            a = H + 8 | 0;
                            b = k[a >> 2] | 0;
                            L = k[196] | 0;
                            if (b >>> 0 >= L >>> 0 & H >>> 0 >= L >>> 0) {
                                k[b + 12 >> 2] = g;
                                k[a >> 2] = g;
                                k[g + 8 >> 2] = b;
                                k[g + 12 >> 2] = H;
                                k[g + 24 >> 2] = 0;
                                break;
                            } else
                                xa();
                        }
                    } else {
                        L = k[196] | 0;
                        if ((L | 0) == 0 | r >>> 0 < L >>> 0)
                            k[196] = r;
                        k[304] = r;
                        k[305] = q;
                        k[307] = 0;
                        k[201] = k[310];
                        k[200] = -1;
                        a = 0;
                        do {
                            L = a << 1;
                            K = 808 + (L << 2) | 0;
                            k[808 + (L + 3 << 2) >> 2] = K;
                            k[808 + (L + 2 << 2) >> 2] = K;
                            a = a + 1 | 0;
                        } while ((a | 0) != 32);
                        L = r + 8 | 0;
                        L = (L & 7 | 0) == 0 ? 0 : 0 - L & 7;
                        K = q + -40 - L | 0;
                        k[198] = r + L;
                        k[195] = K;
                        k[r + (L + 4) >> 2] = K | 1;
                        k[r + (q + -36) >> 2] = 40;
                        k[199] = k[314];
                    }
                while (0);
            a = k[195] | 0;
            if (a >>> 0 > o >>> 0) {
                K = a - o | 0;
                k[195] = K;
                L = k[198] | 0;
                k[198] = L + o;
                k[L + (o + 4) >> 2] = K | 1;
                k[L + 4 >> 2] = o | 3;
                L = L + 8 | 0;
                return L | 0;
            }
        }
        L = mc() | 0;
        k[L >> 2] = 12;
        L = 0;
        return L | 0;
    }
    function Gc(a) {
        a = a | 0;
        var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0;
        if (!a)
            return;
        b = a + -8 | 0;
        h = k[196] | 0;
        if (b >>> 0 < h >>> 0)
            xa();
        c = k[a + -4 >> 2] | 0;
        d = c & 3;
        if ((d | 0) == 1)
            xa();
        o = c & -8;
        q = a + (o + -8) | 0;
        do
            if (!(c & 1)) {
                b = k[b >> 2] | 0;
                if (!d)
                    return;
                i = -8 - b | 0;
                l = a + i | 0;
                m = b + o | 0;
                if (l >>> 0 < h >>> 0)
                    xa();
                if ((l | 0) == (k[197] | 0)) {
                    b = a + (o + -4) | 0;
                    c = k[b >> 2] | 0;
                    if ((c & 3 | 0) != 3) {
                        u = l;
                        f = m;
                        break;
                    }
                    k[194] = m;
                    k[b >> 2] = c & -2;
                    k[a + (i + 4) >> 2] = m | 1;
                    k[q >> 2] = m;
                    return;
                }
                e = b >>> 3;
                if (b >>> 0 < 256) {
                    d = k[a + (i + 8) >> 2] | 0;
                    c = k[a + (i + 12) >> 2] | 0;
                    b = 808 + (e << 1 << 2) | 0;
                    if ((d | 0) != (b | 0)) {
                        if (d >>> 0 < h >>> 0)
                            xa();
                        if ((k[d + 12 >> 2] | 0) != (l | 0))
                            xa();
                    }
                    if ((c | 0) == (d | 0)) {
                        k[192] = k[192] & ~(1 << e);
                        u = l;
                        f = m;
                        break;
                    }
                    if ((c | 0) != (b | 0)) {
                        if (c >>> 0 < h >>> 0)
                            xa();
                        b = c + 8 | 0;
                        if ((k[b >> 2] | 0) == (l | 0))
                            g = b;
                        else
                            xa();
                    } else
                        g = c + 8 | 0;
                    k[d + 12 >> 2] = c;
                    k[g >> 2] = d;
                    u = l;
                    f = m;
                    break;
                }
                g = k[a + (i + 24) >> 2] | 0;
                d = k[a + (i + 12) >> 2] | 0;
                do
                    if ((d | 0) == (l | 0)) {
                        c = a + (i + 20) | 0;
                        b = k[c >> 2] | 0;
                        if (!b) {
                            c = a + (i + 16) | 0;
                            b = k[c >> 2] | 0;
                            if (!b) {
                                j = 0;
                                break;
                            }
                        }
                        while (1) {
                            d = b + 20 | 0;
                            e = k[d >> 2] | 0;
                            if (e) {
                                b = e;
                                c = d;
                                continue;
                            }
                            d = b + 16 | 0;
                            e = k[d >> 2] | 0;
                            if (!e)
                                break;
                            else {
                                b = e;
                                c = d;
                            }
                        }
                        if (c >>> 0 < h >>> 0)
                            xa();
                        else {
                            k[c >> 2] = 0;
                            j = b;
                            break;
                        }
                    } else {
                        e = k[a + (i + 8) >> 2] | 0;
                        if (e >>> 0 < h >>> 0)
                            xa();
                        b = e + 12 | 0;
                        if ((k[b >> 2] | 0) != (l | 0))
                            xa();
                        c = d + 8 | 0;
                        if ((k[c >> 2] | 0) == (l | 0)) {
                            k[b >> 2] = d;
                            k[c >> 2] = e;
                            j = d;
                            break;
                        } else
                            xa();
                    }
                while (0);
                if (g) {
                    b = k[a + (i + 28) >> 2] | 0;
                    c = 1072 + (b << 2) | 0;
                    if ((l | 0) == (k[c >> 2] | 0)) {
                        k[c >> 2] = j;
                        if (!j) {
                            k[193] = k[193] & ~(1 << b);
                            u = l;
                            f = m;
                            break;
                        }
                    } else {
                        if (g >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        b = g + 16 | 0;
                        if ((k[b >> 2] | 0) == (l | 0))
                            k[b >> 2] = j;
                        else
                            k[g + 20 >> 2] = j;
                        if (!j) {
                            u = l;
                            f = m;
                            break;
                        }
                    }
                    c = k[196] | 0;
                    if (j >>> 0 < c >>> 0)
                        xa();
                    k[j + 24 >> 2] = g;
                    b = k[a + (i + 16) >> 2] | 0;
                    do
                        if (b)
                            if (b >>> 0 < c >>> 0)
                                xa();
                            else {
                                k[j + 16 >> 2] = b;
                                k[b + 24 >> 2] = j;
                                break;
                            }
                    while (0);
                    b = k[a + (i + 20) >> 2] | 0;
                    if (b)
                        if (b >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        else {
                            k[j + 20 >> 2] = b;
                            k[b + 24 >> 2] = j;
                            u = l;
                            f = m;
                            break;
                        }
                    else {
                        u = l;
                        f = m;
                    }
                } else {
                    u = l;
                    f = m;
                }
            } else {
                u = b;
                f = o;
            }
        while (0);
        if (u >>> 0 >= q >>> 0)
            xa();
        b = a + (o + -4) | 0;
        c = k[b >> 2] | 0;
        if (!(c & 1))
            xa();
        if (!(c & 2)) {
            if ((q | 0) == (k[198] | 0)) {
                t = (k[195] | 0) + f | 0;
                k[195] = t;
                k[198] = u;
                k[u + 4 >> 2] = t | 1;
                if ((u | 0) != (k[197] | 0))
                    return;
                k[197] = 0;
                k[194] = 0;
                return;
            }
            if ((q | 0) == (k[197] | 0)) {
                t = (k[194] | 0) + f | 0;
                k[194] = t;
                k[197] = u;
                k[u + 4 >> 2] = t | 1;
                k[u + t >> 2] = t;
                return;
            }
            f = (c & -8) + f | 0;
            e = c >>> 3;
            do
                if (c >>> 0 >= 256) {
                    g = k[a + (o + 16) >> 2] | 0;
                    b = k[a + (o | 4) >> 2] | 0;
                    do
                        if ((b | 0) == (q | 0)) {
                            c = a + (o + 12) | 0;
                            b = k[c >> 2] | 0;
                            if (!b) {
                                c = a + (o + 8) | 0;
                                b = k[c >> 2] | 0;
                                if (!b) {
                                    p = 0;
                                    break;
                                }
                            }
                            while (1) {
                                d = b + 20 | 0;
                                e = k[d >> 2] | 0;
                                if (e) {
                                    b = e;
                                    c = d;
                                    continue;
                                }
                                d = b + 16 | 0;
                                e = k[d >> 2] | 0;
                                if (!e)
                                    break;
                                else {
                                    b = e;
                                    c = d;
                                }
                            }
                            if (c >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            else {
                                k[c >> 2] = 0;
                                p = b;
                                break;
                            }
                        } else {
                            c = k[a + o >> 2] | 0;
                            if (c >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            d = c + 12 | 0;
                            if ((k[d >> 2] | 0) != (q | 0))
                                xa();
                            e = b + 8 | 0;
                            if ((k[e >> 2] | 0) == (q | 0)) {
                                k[d >> 2] = b;
                                k[e >> 2] = c;
                                p = b;
                                break;
                            } else
                                xa();
                        }
                    while (0);
                    if (g) {
                        b = k[a + (o + 20) >> 2] | 0;
                        c = 1072 + (b << 2) | 0;
                        if ((q | 0) == (k[c >> 2] | 0)) {
                            k[c >> 2] = p;
                            if (!p) {
                                k[193] = k[193] & ~(1 << b);
                                break;
                            }
                        } else {
                            if (g >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            b = g + 16 | 0;
                            if ((k[b >> 2] | 0) == (q | 0))
                                k[b >> 2] = p;
                            else
                                k[g + 20 >> 2] = p;
                            if (!p)
                                break;
                        }
                        c = k[196] | 0;
                        if (p >>> 0 < c >>> 0)
                            xa();
                        k[p + 24 >> 2] = g;
                        b = k[a + (o + 8) >> 2] | 0;
                        do
                            if (b)
                                if (b >>> 0 < c >>> 0)
                                    xa();
                                else {
                                    k[p + 16 >> 2] = b;
                                    k[b + 24 >> 2] = p;
                                    break;
                                }
                        while (0);
                        b = k[a + (o + 12) >> 2] | 0;
                        if (b)
                            if (b >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            else {
                                k[p + 20 >> 2] = b;
                                k[b + 24 >> 2] = p;
                                break;
                            }
                    }
                } else {
                    d = k[a + o >> 2] | 0;
                    c = k[a + (o | 4) >> 2] | 0;
                    b = 808 + (e << 1 << 2) | 0;
                    if ((d | 0) != (b | 0)) {
                        if (d >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        if ((k[d + 12 >> 2] | 0) != (q | 0))
                            xa();
                    }
                    if ((c | 0) == (d | 0)) {
                        k[192] = k[192] & ~(1 << e);
                        break;
                    }
                    if ((c | 0) != (b | 0)) {
                        if (c >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        b = c + 8 | 0;
                        if ((k[b >> 2] | 0) == (q | 0))
                            n = b;
                        else
                            xa();
                    } else
                        n = c + 8 | 0;
                    k[d + 12 >> 2] = c;
                    k[n >> 2] = d;
                }
            while (0);
            k[u + 4 >> 2] = f | 1;
            k[u + f >> 2] = f;
            if ((u | 0) == (k[197] | 0)) {
                k[194] = f;
                return;
            }
        } else {
            k[b >> 2] = c & -2;
            k[u + 4 >> 2] = f | 1;
            k[u + f >> 2] = f;
        }
        b = f >>> 3;
        if (f >>> 0 < 256) {
            c = b << 1;
            e = 808 + (c << 2) | 0;
            d = k[192] | 0;
            b = 1 << b;
            if (d & b) {
                b = 808 + (c + 2 << 2) | 0;
                c = k[b >> 2] | 0;
                if (c >>> 0 < (k[196] | 0) >>> 0)
                    xa();
                else {
                    r = b;
                    s = c;
                }
            } else {
                k[192] = d | b;
                r = 808 + (c + 2 << 2) | 0;
                s = e;
            }
            k[r >> 2] = u;
            k[s + 12 >> 2] = u;
            k[u + 8 >> 2] = s;
            k[u + 12 >> 2] = e;
            return;
        }
        b = f >>> 8;
        if (b)
            if (f >>> 0 > 16777215)
                e = 31;
            else {
                r = (b + 1048320 | 0) >>> 16 & 8;
                s = b << r;
                q = (s + 520192 | 0) >>> 16 & 4;
                s = s << q;
                e = (s + 245760 | 0) >>> 16 & 2;
                e = 14 - (q | r | e) + (s << e >>> 15) | 0;
                e = f >>> (e + 7 | 0) & 1 | e << 1;
            }
        else
            e = 0;
        b = 1072 + (e << 2) | 0;
        k[u + 28 >> 2] = e;
        k[u + 20 >> 2] = 0;
        k[u + 16 >> 2] = 0;
        c = k[193] | 0;
        d = 1 << e;
        a:
            do
                if (c & d) {
                    b = k[b >> 2] | 0;
                    b:
                        do
                            if ((k[b + 4 >> 2] & -8 | 0) != (f | 0)) {
                                e = f << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
                                while (1) {
                                    d = b + 16 + (e >>> 31 << 2) | 0;
                                    c = k[d >> 2] | 0;
                                    if (!c)
                                        break;
                                    if ((k[c + 4 >> 2] & -8 | 0) == (f | 0)) {
                                        t = c;
                                        break b;
                                    } else {
                                        e = e << 1;
                                        b = c;
                                    }
                                }
                                if (d >>> 0 < (k[196] | 0) >>> 0)
                                    xa();
                                else {
                                    k[d >> 2] = u;
                                    k[u + 24 >> 2] = b;
                                    k[u + 12 >> 2] = u;
                                    k[u + 8 >> 2] = u;
                                    break a;
                                }
                            } else
                                t = b;
                        while (0);
                    b = t + 8 | 0;
                    c = k[b >> 2] | 0;
                    s = k[196] | 0;
                    if (c >>> 0 >= s >>> 0 & t >>> 0 >= s >>> 0) {
                        k[c + 12 >> 2] = u;
                        k[b >> 2] = u;
                        k[u + 8 >> 2] = c;
                        k[u + 12 >> 2] = t;
                        k[u + 24 >> 2] = 0;
                        break;
                    } else
                        xa();
                } else {
                    k[193] = c | d;
                    k[b >> 2] = u;
                    k[u + 24 >> 2] = b;
                    k[u + 12 >> 2] = u;
                    k[u + 8 >> 2] = u;
                }
            while (0);
        u = (k[200] | 0) + -1 | 0;
        k[200] = u;
        if (!u)
            b = 1224;
        else
            return;
        while (1) {
            b = k[b >> 2] | 0;
            if (!b)
                break;
            else
                b = b + 8 | 0;
        }
        k[200] = -1;
        return;
    }
    function Hc(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0;
        if (!a) {
            a = Fc(b) | 0;
            return a | 0;
        }
        if (b >>> 0 > 4294967231) {
            a = mc() | 0;
            k[a >> 2] = 12;
            a = 0;
            return a | 0;
        }
        c = Ic(a + -8 | 0, b >>> 0 < 11 ? 16 : b + 11 & -8) | 0;
        if (c) {
            a = c + 8 | 0;
            return a | 0;
        }
        c = Fc(b) | 0;
        if (!c) {
            a = 0;
            return a | 0;
        }
        d = k[a + -4 >> 2] | 0;
        d = (d & -8) - ((d & 3 | 0) == 0 ? 8 : 4) | 0;
        Qc(c | 0, a | 0, (d >>> 0 < b >>> 0 ? d : b) | 0) | 0;
        Gc(a);
        a = c;
        return a | 0;
    }
    function Ic(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        o = a + 4 | 0;
        p = k[o >> 2] | 0;
        i = p & -8;
        l = a + i | 0;
        h = k[196] | 0;
        c = p & 3;
        if (!((c | 0) != 1 & a >>> 0 >= h >>> 0 & a >>> 0 < l >>> 0))
            xa();
        d = a + (i | 4) | 0;
        e = k[d >> 2] | 0;
        if (!(e & 1))
            xa();
        if (!c) {
            if (b >>> 0 < 256) {
                a = 0;
                return a | 0;
            }
            if (i >>> 0 >= (b + 4 | 0) >>> 0 ? (i - b | 0) >>> 0 <= k[312] << 1 >>> 0 : 0)
                return a | 0;
            a = 0;
            return a | 0;
        }
        if (i >>> 0 >= b >>> 0) {
            c = i - b | 0;
            if (c >>> 0 <= 15)
                return a | 0;
            k[o >> 2] = p & 1 | b | 2;
            k[a + (b + 4) >> 2] = c | 3;
            k[d >> 2] = k[d >> 2] | 1;
            Jc(a + b | 0, c);
            return a | 0;
        }
        if ((l | 0) == (k[198] | 0)) {
            c = (k[195] | 0) + i | 0;
            if (c >>> 0 <= b >>> 0) {
                a = 0;
                return a | 0;
            }
            n = c - b | 0;
            k[o >> 2] = p & 1 | b | 2;
            k[a + (b + 4) >> 2] = n | 1;
            k[198] = a + b;
            k[195] = n;
            return a | 0;
        }
        if ((l | 0) == (k[197] | 0)) {
            d = (k[194] | 0) + i | 0;
            if (d >>> 0 < b >>> 0) {
                a = 0;
                return a | 0;
            }
            c = d - b | 0;
            if (c >>> 0 > 15) {
                k[o >> 2] = p & 1 | b | 2;
                k[a + (b + 4) >> 2] = c | 1;
                k[a + d >> 2] = c;
                d = a + (d + 4) | 0;
                k[d >> 2] = k[d >> 2] & -2;
                d = a + b | 0;
            } else {
                k[o >> 2] = p & 1 | d | 2;
                d = a + (d + 4) | 0;
                k[d >> 2] = k[d >> 2] | 1;
                d = 0;
                c = 0;
            }
            k[194] = c;
            k[197] = d;
            return a | 0;
        }
        if (e & 2) {
            a = 0;
            return a | 0;
        }
        m = (e & -8) + i | 0;
        if (m >>> 0 < b >>> 0) {
            a = 0;
            return a | 0;
        }
        n = m - b | 0;
        f = e >>> 3;
        do
            if (e >>> 0 >= 256) {
                g = k[a + (i + 24) >> 2] | 0;
                f = k[a + (i + 12) >> 2] | 0;
                do
                    if ((f | 0) == (l | 0)) {
                        d = a + (i + 20) | 0;
                        c = k[d >> 2] | 0;
                        if (!c) {
                            d = a + (i + 16) | 0;
                            c = k[d >> 2] | 0;
                            if (!c) {
                                j = 0;
                                break;
                            }
                        }
                        while (1) {
                            e = c + 20 | 0;
                            f = k[e >> 2] | 0;
                            if (f) {
                                c = f;
                                d = e;
                                continue;
                            }
                            e = c + 16 | 0;
                            f = k[e >> 2] | 0;
                            if (!f)
                                break;
                            else {
                                c = f;
                                d = e;
                            }
                        }
                        if (d >>> 0 < h >>> 0)
                            xa();
                        else {
                            k[d >> 2] = 0;
                            j = c;
                            break;
                        }
                    } else {
                        e = k[a + (i + 8) >> 2] | 0;
                        if (e >>> 0 < h >>> 0)
                            xa();
                        c = e + 12 | 0;
                        if ((k[c >> 2] | 0) != (l | 0))
                            xa();
                        d = f + 8 | 0;
                        if ((k[d >> 2] | 0) == (l | 0)) {
                            k[c >> 2] = f;
                            k[d >> 2] = e;
                            j = f;
                            break;
                        } else
                            xa();
                    }
                while (0);
                if (g) {
                    c = k[a + (i + 28) >> 2] | 0;
                    d = 1072 + (c << 2) | 0;
                    if ((l | 0) == (k[d >> 2] | 0)) {
                        k[d >> 2] = j;
                        if (!j) {
                            k[193] = k[193] & ~(1 << c);
                            break;
                        }
                    } else {
                        if (g >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        c = g + 16 | 0;
                        if ((k[c >> 2] | 0) == (l | 0))
                            k[c >> 2] = j;
                        else
                            k[g + 20 >> 2] = j;
                        if (!j)
                            break;
                    }
                    d = k[196] | 0;
                    if (j >>> 0 < d >>> 0)
                        xa();
                    k[j + 24 >> 2] = g;
                    c = k[a + (i + 16) >> 2] | 0;
                    do
                        if (c)
                            if (c >>> 0 < d >>> 0)
                                xa();
                            else {
                                k[j + 16 >> 2] = c;
                                k[c + 24 >> 2] = j;
                                break;
                            }
                    while (0);
                    c = k[a + (i + 20) >> 2] | 0;
                    if (c)
                        if (c >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        else {
                            k[j + 20 >> 2] = c;
                            k[c + 24 >> 2] = j;
                            break;
                        }
                }
            } else {
                e = k[a + (i + 8) >> 2] | 0;
                d = k[a + (i + 12) >> 2] | 0;
                c = 808 + (f << 1 << 2) | 0;
                if ((e | 0) != (c | 0)) {
                    if (e >>> 0 < h >>> 0)
                        xa();
                    if ((k[e + 12 >> 2] | 0) != (l | 0))
                        xa();
                }
                if ((d | 0) == (e | 0)) {
                    k[192] = k[192] & ~(1 << f);
                    break;
                }
                if ((d | 0) != (c | 0)) {
                    if (d >>> 0 < h >>> 0)
                        xa();
                    c = d + 8 | 0;
                    if ((k[c >> 2] | 0) == (l | 0))
                        g = c;
                    else
                        xa();
                } else
                    g = d + 8 | 0;
                k[e + 12 >> 2] = d;
                k[g >> 2] = e;
            }
        while (0);
        if (n >>> 0 < 16) {
            k[o >> 2] = p & 1 | m | 2;
            b = a + (m | 4) | 0;
            k[b >> 2] = k[b >> 2] | 1;
            return a | 0;
        } else {
            k[o >> 2] = p & 1 | b | 2;
            k[a + (b + 4) >> 2] = n | 3;
            p = a + (m | 4) | 0;
            k[p >> 2] = k[p >> 2] | 1;
            Jc(a + b | 0, n);
            return a | 0;
        }
        return 0;
    }
    function Jc(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0;
        q = a + b | 0;
        c = k[a + 4 >> 2] | 0;
        do
            if (!(c & 1)) {
                j = k[a >> 2] | 0;
                if (!(c & 3))
                    return;
                n = a + (0 - j) | 0;
                m = j + b | 0;
                i = k[196] | 0;
                if (n >>> 0 < i >>> 0)
                    xa();
                if ((n | 0) == (k[197] | 0)) {
                    d = a + (b + 4) | 0;
                    c = k[d >> 2] | 0;
                    if ((c & 3 | 0) != 3) {
                        t = n;
                        g = m;
                        break;
                    }
                    k[194] = m;
                    k[d >> 2] = c & -2;
                    k[a + (4 - j) >> 2] = m | 1;
                    k[q >> 2] = m;
                    return;
                }
                f = j >>> 3;
                if (j >>> 0 < 256) {
                    e = k[a + (8 - j) >> 2] | 0;
                    d = k[a + (12 - j) >> 2] | 0;
                    c = 808 + (f << 1 << 2) | 0;
                    if ((e | 0) != (c | 0)) {
                        if (e >>> 0 < i >>> 0)
                            xa();
                        if ((k[e + 12 >> 2] | 0) != (n | 0))
                            xa();
                    }
                    if ((d | 0) == (e | 0)) {
                        k[192] = k[192] & ~(1 << f);
                        t = n;
                        g = m;
                        break;
                    }
                    if ((d | 0) != (c | 0)) {
                        if (d >>> 0 < i >>> 0)
                            xa();
                        c = d + 8 | 0;
                        if ((k[c >> 2] | 0) == (n | 0))
                            h = c;
                        else
                            xa();
                    } else
                        h = d + 8 | 0;
                    k[e + 12 >> 2] = d;
                    k[h >> 2] = e;
                    t = n;
                    g = m;
                    break;
                }
                h = k[a + (24 - j) >> 2] | 0;
                e = k[a + (12 - j) >> 2] | 0;
                do
                    if ((e | 0) == (n | 0)) {
                        d = 16 - j | 0;
                        e = a + (d + 4) | 0;
                        c = k[e >> 2] | 0;
                        if (!c) {
                            d = a + d | 0;
                            c = k[d >> 2] | 0;
                            if (!c) {
                                l = 0;
                                break;
                            }
                        } else
                            d = e;
                        while (1) {
                            e = c + 20 | 0;
                            f = k[e >> 2] | 0;
                            if (f) {
                                c = f;
                                d = e;
                                continue;
                            }
                            e = c + 16 | 0;
                            f = k[e >> 2] | 0;
                            if (!f)
                                break;
                            else {
                                c = f;
                                d = e;
                            }
                        }
                        if (d >>> 0 < i >>> 0)
                            xa();
                        else {
                            k[d >> 2] = 0;
                            l = c;
                            break;
                        }
                    } else {
                        f = k[a + (8 - j) >> 2] | 0;
                        if (f >>> 0 < i >>> 0)
                            xa();
                        c = f + 12 | 0;
                        if ((k[c >> 2] | 0) != (n | 0))
                            xa();
                        d = e + 8 | 0;
                        if ((k[d >> 2] | 0) == (n | 0)) {
                            k[c >> 2] = e;
                            k[d >> 2] = f;
                            l = e;
                            break;
                        } else
                            xa();
                    }
                while (0);
                if (h) {
                    c = k[a + (28 - j) >> 2] | 0;
                    d = 1072 + (c << 2) | 0;
                    if ((n | 0) == (k[d >> 2] | 0)) {
                        k[d >> 2] = l;
                        if (!l) {
                            k[193] = k[193] & ~(1 << c);
                            t = n;
                            g = m;
                            break;
                        }
                    } else {
                        if (h >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        c = h + 16 | 0;
                        if ((k[c >> 2] | 0) == (n | 0))
                            k[c >> 2] = l;
                        else
                            k[h + 20 >> 2] = l;
                        if (!l) {
                            t = n;
                            g = m;
                            break;
                        }
                    }
                    e = k[196] | 0;
                    if (l >>> 0 < e >>> 0)
                        xa();
                    k[l + 24 >> 2] = h;
                    c = 16 - j | 0;
                    d = k[a + c >> 2] | 0;
                    do
                        if (d)
                            if (d >>> 0 < e >>> 0)
                                xa();
                            else {
                                k[l + 16 >> 2] = d;
                                k[d + 24 >> 2] = l;
                                break;
                            }
                    while (0);
                    c = k[a + (c + 4) >> 2] | 0;
                    if (c)
                        if (c >>> 0 < (k[196] | 0) >>> 0)
                            xa();
                        else {
                            k[l + 20 >> 2] = c;
                            k[c + 24 >> 2] = l;
                            t = n;
                            g = m;
                            break;
                        }
                    else {
                        t = n;
                        g = m;
                    }
                } else {
                    t = n;
                    g = m;
                }
            } else {
                t = a;
                g = b;
            }
        while (0);
        i = k[196] | 0;
        if (q >>> 0 < i >>> 0)
            xa();
        c = a + (b + 4) | 0;
        d = k[c >> 2] | 0;
        if (!(d & 2)) {
            if ((q | 0) == (k[198] | 0)) {
                s = (k[195] | 0) + g | 0;
                k[195] = s;
                k[198] = t;
                k[t + 4 >> 2] = s | 1;
                if ((t | 0) != (k[197] | 0))
                    return;
                k[197] = 0;
                k[194] = 0;
                return;
            }
            if ((q | 0) == (k[197] | 0)) {
                s = (k[194] | 0) + g | 0;
                k[194] = s;
                k[197] = t;
                k[t + 4 >> 2] = s | 1;
                k[t + s >> 2] = s;
                return;
            }
            g = (d & -8) + g | 0;
            f = d >>> 3;
            do
                if (d >>> 0 >= 256) {
                    h = k[a + (b + 24) >> 2] | 0;
                    e = k[a + (b + 12) >> 2] | 0;
                    do
                        if ((e | 0) == (q | 0)) {
                            d = a + (b + 20) | 0;
                            c = k[d >> 2] | 0;
                            if (!c) {
                                d = a + (b + 16) | 0;
                                c = k[d >> 2] | 0;
                                if (!c) {
                                    p = 0;
                                    break;
                                }
                            }
                            while (1) {
                                e = c + 20 | 0;
                                f = k[e >> 2] | 0;
                                if (f) {
                                    c = f;
                                    d = e;
                                    continue;
                                }
                                e = c + 16 | 0;
                                f = k[e >> 2] | 0;
                                if (!f)
                                    break;
                                else {
                                    c = f;
                                    d = e;
                                }
                            }
                            if (d >>> 0 < i >>> 0)
                                xa();
                            else {
                                k[d >> 2] = 0;
                                p = c;
                                break;
                            }
                        } else {
                            f = k[a + (b + 8) >> 2] | 0;
                            if (f >>> 0 < i >>> 0)
                                xa();
                            c = f + 12 | 0;
                            if ((k[c >> 2] | 0) != (q | 0))
                                xa();
                            d = e + 8 | 0;
                            if ((k[d >> 2] | 0) == (q | 0)) {
                                k[c >> 2] = e;
                                k[d >> 2] = f;
                                p = e;
                                break;
                            } else
                                xa();
                        }
                    while (0);
                    if (h) {
                        c = k[a + (b + 28) >> 2] | 0;
                        d = 1072 + (c << 2) | 0;
                        if ((q | 0) == (k[d >> 2] | 0)) {
                            k[d >> 2] = p;
                            if (!p) {
                                k[193] = k[193] & ~(1 << c);
                                break;
                            }
                        } else {
                            if (h >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            c = h + 16 | 0;
                            if ((k[c >> 2] | 0) == (q | 0))
                                k[c >> 2] = p;
                            else
                                k[h + 20 >> 2] = p;
                            if (!p)
                                break;
                        }
                        d = k[196] | 0;
                        if (p >>> 0 < d >>> 0)
                            xa();
                        k[p + 24 >> 2] = h;
                        c = k[a + (b + 16) >> 2] | 0;
                        do
                            if (c)
                                if (c >>> 0 < d >>> 0)
                                    xa();
                                else {
                                    k[p + 16 >> 2] = c;
                                    k[c + 24 >> 2] = p;
                                    break;
                                }
                        while (0);
                        c = k[a + (b + 20) >> 2] | 0;
                        if (c)
                            if (c >>> 0 < (k[196] | 0) >>> 0)
                                xa();
                            else {
                                k[p + 20 >> 2] = c;
                                k[c + 24 >> 2] = p;
                                break;
                            }
                    }
                } else {
                    e = k[a + (b + 8) >> 2] | 0;
                    d = k[a + (b + 12) >> 2] | 0;
                    c = 808 + (f << 1 << 2) | 0;
                    if ((e | 0) != (c | 0)) {
                        if (e >>> 0 < i >>> 0)
                            xa();
                        if ((k[e + 12 >> 2] | 0) != (q | 0))
                            xa();
                    }
                    if ((d | 0) == (e | 0)) {
                        k[192] = k[192] & ~(1 << f);
                        break;
                    }
                    if ((d | 0) != (c | 0)) {
                        if (d >>> 0 < i >>> 0)
                            xa();
                        c = d + 8 | 0;
                        if ((k[c >> 2] | 0) == (q | 0))
                            o = c;
                        else
                            xa();
                    } else
                        o = d + 8 | 0;
                    k[e + 12 >> 2] = d;
                    k[o >> 2] = e;
                }
            while (0);
            k[t + 4 >> 2] = g | 1;
            k[t + g >> 2] = g;
            if ((t | 0) == (k[197] | 0)) {
                k[194] = g;
                return;
            }
        } else {
            k[c >> 2] = d & -2;
            k[t + 4 >> 2] = g | 1;
            k[t + g >> 2] = g;
        }
        c = g >>> 3;
        if (g >>> 0 < 256) {
            d = c << 1;
            f = 808 + (d << 2) | 0;
            e = k[192] | 0;
            c = 1 << c;
            if (e & c) {
                c = 808 + (d + 2 << 2) | 0;
                d = k[c >> 2] | 0;
                if (d >>> 0 < (k[196] | 0) >>> 0)
                    xa();
                else {
                    r = c;
                    s = d;
                }
            } else {
                k[192] = e | c;
                r = 808 + (d + 2 << 2) | 0;
                s = f;
            }
            k[r >> 2] = t;
            k[s + 12 >> 2] = t;
            k[t + 8 >> 2] = s;
            k[t + 12 >> 2] = f;
            return;
        }
        c = g >>> 8;
        if (c)
            if (g >>> 0 > 16777215)
                f = 31;
            else {
                r = (c + 1048320 | 0) >>> 16 & 8;
                s = c << r;
                q = (s + 520192 | 0) >>> 16 & 4;
                s = s << q;
                f = (s + 245760 | 0) >>> 16 & 2;
                f = 14 - (q | r | f) + (s << f >>> 15) | 0;
                f = g >>> (f + 7 | 0) & 1 | f << 1;
            }
        else
            f = 0;
        c = 1072 + (f << 2) | 0;
        k[t + 28 >> 2] = f;
        k[t + 20 >> 2] = 0;
        k[t + 16 >> 2] = 0;
        d = k[193] | 0;
        e = 1 << f;
        if (!(d & e)) {
            k[193] = d | e;
            k[c >> 2] = t;
            k[t + 24 >> 2] = c;
            k[t + 12 >> 2] = t;
            k[t + 8 >> 2] = t;
            return;
        }
        e = k[c >> 2] | 0;
        a:
            do
                if ((k[e + 4 >> 2] & -8 | 0) != (g | 0)) {
                    f = g << ((f | 0) == 31 ? 0 : 25 - (f >>> 1) | 0);
                    while (1) {
                        d = e + 16 + (f >>> 31 << 2) | 0;
                        c = k[d >> 2] | 0;
                        if (!c)
                            break;
                        if ((k[c + 4 >> 2] & -8 | 0) == (g | 0)) {
                            e = c;
                            break a;
                        } else {
                            f = f << 1;
                            e = c;
                        }
                    }
                    if (d >>> 0 < (k[196] | 0) >>> 0)
                        xa();
                    k[d >> 2] = t;
                    k[t + 24 >> 2] = e;
                    k[t + 12 >> 2] = t;
                    k[t + 8 >> 2] = t;
                    return;
                }
            while (0);
        c = e + 8 | 0;
        d = k[c >> 2] | 0;
        s = k[196] | 0;
        if (!(d >>> 0 >= s >>> 0 & e >>> 0 >= s >>> 0))
            xa();
        k[d + 12 >> 2] = t;
        k[c >> 2] = t;
        k[t + 8 >> 2] = d;
        k[t + 12 >> 2] = e;
        k[t + 24 >> 2] = 0;
        return;
    }
    function Kc() {
    }
    function Lc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        d = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
        return (L = d, a - c >>> 0 | 0) | 0;
    }
    function Mc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        c = a + c >>> 0;
        return (L = b + d + (c >>> 0 < a >>> 0 | 0) >>> 0, c | 0) | 0;
    }
    function Nc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0, f = 0, g = 0;
        d = a + c | 0;
        if ((c | 0) >= 20) {
            b = b & 255;
            f = a & 3;
            g = b | b << 8 | b << 16 | b << 24;
            e = d & ~3;
            if (f) {
                f = a + 4 - f | 0;
                while ((a | 0) < (f | 0)) {
                    i[a >> 0] = b;
                    a = a + 1 | 0;
                }
            }
            while ((a | 0) < (e | 0)) {
                k[a >> 2] = g;
                a = a + 4 | 0;
            }
        }
        while ((a | 0) < (d | 0)) {
            i[a >> 0] = b;
            a = a + 1 | 0;
        }
        return a - c | 0;
    }
    function Oc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            L = b >>> c;
            return a >>> c | (b & (1 << c) - 1) << 32 - c;
        }
        L = 0;
        return b >>> c - 32 | 0;
    }
    function Pc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            L = b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c;
            return a << c;
        }
        L = a << c - 32;
        return 0;
    }
    function Qc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        var d = 0;
        if ((c | 0) >= 4096)
            return Ba(a | 0, b | 0, c | 0) | 0;
        d = a | 0;
        if ((a & 3) == (b & 3)) {
            while (a & 3) {
                if (!c)
                    return d | 0;
                i[a >> 0] = i[b >> 0] | 0;
                a = a + 1 | 0;
                b = b + 1 | 0;
                c = c - 1 | 0;
            }
            while ((c | 0) >= 4) {
                k[a >> 2] = k[b >> 2];
                a = a + 4 | 0;
                b = b + 4 | 0;
                c = c - 4 | 0;
            }
        }
        while ((c | 0) > 0) {
            i[a >> 0] = i[b >> 0] | 0;
            a = a + 1 | 0;
            b = b + 1 | 0;
            c = c - 1 | 0;
        }
        return d | 0;
    }
    function Rc(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            L = b >> c;
            return a >>> c | (b & (1 << c) - 1) << 32 - c;
        }
        L = (b | 0) < 0 ? -1 : 0;
        return b >> c - 32 | 0;
    }
    function Sc(a) {
        a = a | 0;
        var b = 0;
        b = i[v + (a & 255) >> 0] | 0;
        if ((b | 0) < 8)
            return b | 0;
        b = i[v + (a >> 8 & 255) >> 0] | 0;
        if ((b | 0) < 8)
            return b + 8 | 0;
        b = i[v + (a >> 16 & 255) >> 0] | 0;
        if ((b | 0) < 8)
            return b + 16 | 0;
        return (i[v + (a >>> 24) >> 0] | 0) + 24 | 0;
    }
    function Tc(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0;
        f = a & 65535;
        e = b & 65535;
        c = ha(e, f) | 0;
        d = a >>> 16;
        a = (c >>> 16) + (ha(e, d) | 0) | 0;
        e = b >>> 16;
        b = ha(e, f) | 0;
        return (L = (a >>> 16) + (ha(e, d) | 0) + (((a & 65535) + b | 0) >>> 16) | 0, a + b << 16 | c & 65535 | 0) | 0;
    }
    function Uc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
        j = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        i = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        f = d >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
        e = ((d | 0) < 0 ? -1 : 0) >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
        h = Lc(j ^ a, i ^ b, j, i) | 0;
        g = L;
        a = f ^ j;
        b = e ^ i;
        return Lc((Zc(h, g, Lc(f ^ c, e ^ d, f, e) | 0, L, 0) | 0) ^ a, L ^ b, a, b) | 0;
    }
    function Vc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
        e = r;
        r = r + 16 | 0;
        h = e | 0;
        g = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        f = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        j = d >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
        i = ((d | 0) < 0 ? -1 : 0) >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
        a = Lc(g ^ a, f ^ b, g, f) | 0;
        b = L;
        Zc(a, b, Lc(j ^ c, i ^ d, j, i) | 0, L, h) | 0;
        d = Lc(k[h >> 2] ^ g, k[h + 4 >> 2] ^ f, g, f) | 0;
        c = L;
        r = e;
        return (L = c, d) | 0;
    }
    function Wc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = a;
        f = c;
        c = Tc(e, f) | 0;
        a = L;
        return (L = (ha(b, f) | 0) + (ha(d, e) | 0) + a | a & 0, c | 0 | 0) | 0;
    }
    function Xc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        return Zc(a, b, c, d, 0) | 0;
    }
    function Yc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0;
        f = r;
        r = r + 16 | 0;
        e = f | 0;
        Zc(a, b, c, d, e) | 0;
        r = f;
        return (L = k[e + 4 >> 2] | 0, k[e >> 2] | 0) | 0;
    }
    function Zc(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, i = 0, j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        l = a;
        i = b;
        j = i;
        g = c;
        n = d;
        h = n;
        if (!j) {
            f = (e | 0) != 0;
            if (!h) {
                if (f) {
                    k[e >> 2] = (l >>> 0) % (g >>> 0);
                    k[e + 4 >> 2] = 0;
                }
                n = 0;
                e = (l >>> 0) / (g >>> 0) >>> 0;
                return (L = n, e) | 0;
            } else {
                if (!f) {
                    n = 0;
                    e = 0;
                    return (L = n, e) | 0;
                }
                k[e >> 2] = a | 0;
                k[e + 4 >> 2] = b & 0;
                n = 0;
                e = 0;
                return (L = n, e) | 0;
            }
        }
        f = (h | 0) == 0;
        do
            if (g) {
                if (!f) {
                    f = (ja(h | 0) | 0) - (ja(j | 0) | 0) | 0;
                    if (f >>> 0 <= 31) {
                        m = f + 1 | 0;
                        h = 31 - f | 0;
                        b = f - 31 >> 31;
                        g = m;
                        a = l >>> (m >>> 0) & b | j << h;
                        b = j >>> (m >>> 0) & b;
                        f = 0;
                        h = l << h;
                        break;
                    }
                    if (!e) {
                        n = 0;
                        e = 0;
                        return (L = n, e) | 0;
                    }
                    k[e >> 2] = a | 0;
                    k[e + 4 >> 2] = i | b & 0;
                    n = 0;
                    e = 0;
                    return (L = n, e) | 0;
                }
                f = g - 1 | 0;
                if (f & g) {
                    h = (ja(g | 0) | 0) + 33 - (ja(j | 0) | 0) | 0;
                    p = 64 - h | 0;
                    m = 32 - h | 0;
                    i = m >> 31;
                    o = h - 32 | 0;
                    b = o >> 31;
                    g = h;
                    a = m - 1 >> 31 & j >>> (o >>> 0) | (j << m | l >>> (h >>> 0)) & b;
                    b = b & j >>> (h >>> 0);
                    f = l << p & i;
                    h = (j << p | l >>> (o >>> 0)) & i | l << m & h - 33 >> 31;
                    break;
                }
                if (e) {
                    k[e >> 2] = f & l;
                    k[e + 4 >> 2] = 0;
                }
                if ((g | 0) == 1) {
                    o = i | b & 0;
                    p = a | 0 | 0;
                    return (L = o, p) | 0;
                } else {
                    p = Sc(g | 0) | 0;
                    o = j >>> (p >>> 0) | 0;
                    p = j << 32 - p | l >>> (p >>> 0) | 0;
                    return (L = o, p) | 0;
                }
            } else {
                if (f) {
                    if (e) {
                        k[e >> 2] = (j >>> 0) % (g >>> 0);
                        k[e + 4 >> 2] = 0;
                    }
                    o = 0;
                    p = (j >>> 0) / (g >>> 0) >>> 0;
                    return (L = o, p) | 0;
                }
                if (!l) {
                    if (e) {
                        k[e >> 2] = 0;
                        k[e + 4 >> 2] = (j >>> 0) % (h >>> 0);
                    }
                    o = 0;
                    p = (j >>> 0) / (h >>> 0) >>> 0;
                    return (L = o, p) | 0;
                }
                f = h - 1 | 0;
                if (!(f & h)) {
                    if (e) {
                        k[e >> 2] = a | 0;
                        k[e + 4 >> 2] = f & j | b & 0;
                    }
                    o = 0;
                    p = j >>> ((Sc(h | 0) | 0) >>> 0);
                    return (L = o, p) | 0;
                }
                f = (ja(h | 0) | 0) - (ja(j | 0) | 0) | 0;
                if (f >>> 0 <= 30) {
                    b = f + 1 | 0;
                    h = 31 - f | 0;
                    g = b;
                    a = j << h | l >>> (b >>> 0);
                    b = j >>> (b >>> 0);
                    f = 0;
                    h = l << h;
                    break;
                }
                if (!e) {
                    o = 0;
                    p = 0;
                    return (L = o, p) | 0;
                }
                k[e >> 2] = a | 0;
                k[e + 4 >> 2] = i | b & 0;
                o = 0;
                p = 0;
                return (L = o, p) | 0;
            }
        while (0);
        if (!g) {
            j = h;
            i = 0;
            h = 0;
        } else {
            m = c | 0 | 0;
            l = n | d & 0;
            j = Mc(m | 0, l | 0, -1, -1) | 0;
            c = L;
            i = h;
            h = 0;
            do {
                d = i;
                i = f >>> 31 | i << 1;
                f = h | f << 1;
                d = a << 1 | d >>> 31 | 0;
                n = a >>> 31 | b << 1 | 0;
                Lc(j, c, d, n) | 0;
                p = L;
                o = p >> 31 | ((p | 0) < 0 ? -1 : 0) << 1;
                h = o & 1;
                a = Lc(d, n, o & m, (((p | 0) < 0 ? -1 : 0) >> 31 | ((p | 0) < 0 ? -1 : 0) << 1) & l) | 0;
                b = L;
                g = g - 1 | 0;
            } while ((g | 0) != 0);
            j = i;
            i = 0;
        }
        g = 0;
        if (e) {
            k[e >> 2] = a;
            k[e + 4 >> 2] = b;
        }
        o = (f | 0) >>> 31 | (j | g) << 1 | (g << 1 | f >>> 31) & 0 | i;
        p = (f << 1 | 0 >>> 31) & -2 | h;
        return (L = o, p) | 0;
    }
    function _c(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        return Ia[a & 7](b | 0, c | 0, d | 0) | 0;
    }
    function $c(a, b, c, d, e, f) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        Ja[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0);
    }
    function ad(a, b) {
        a = a | 0;
        b = b | 0;
        Ka[a & 7](b | 0);
    }
    function bd(a, b) {
        a = a | 0;
        b = b | 0;
        return La[a & 1](b | 0) | 0;
    }
    function cd(a, b, c, d, e, f, g) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        Ma[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0);
    }
    function dd(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        return Na[a & 0](b | 0, c | 0) | 0;
    }
    function ed(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        Oa[a & 3](b | 0, c | 0, d | 0, e | 0);
    }
    function fd(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        ka(0);
        return 0;
    }
    function gd(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        ka(1);
    }
    function hd(a) {
        a = a | 0;
        ka(2);
    }
    function id(a) {
        a = a | 0;
        ka(3);
        return 0;
    }
    function jd(a, b, c, d, e, f) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        ka(4);
    }
    function kd(a, b) {
        a = a | 0;
        b = b | 0;
        ka(5);
        return 0;
    }
    function ld(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        ka(6);
    }
    var Ia = [
        fd,
        ac,
        uc,
        sc,
        tc,
        fd,
        fd,
        fd
    ];
    var Ja = [
        gd,
        hc,
        gc,
        gd
    ];
    var Ka = [
        hd,
        Xb,
        _b,
        Yb,
        Zb,
        $b,
        Ac,
        hd
    ];
    var La = [
        id,
        rc
    ];
    var Ma = [
        jd,
        jc,
        ic,
        jd
    ];
    var Na = [kd];
    var Oa = [
        ld,
        cc,
        dc,
        ld
    ];
    return {
        _bidi_getParagraphEndIndex: _a,
        ___cxa_can_catch: kc,
        _free: Gc,
        ___cxa_is_pointer_type: lc,
        _i64Add: Mc,
        _i64Subtract: Lc,
        _memset: Nc,
        _malloc: Fc,
        _memcpy: Qc,
        _bidi_getLine: $a,
        _ushape_arabic: Ya,
        _bitshift64Lshr: Oc,
        _bitshift64Shl: Pc,
        _bidi_processText: Za,
        runPostSets: Kc,
        _emscripten_replace_memory: Ha,
        stackAlloc: Pa,
        stackSave: Qa,
        stackRestore: Ra,
        establishStackSpace: Sa,
        setThrew: Ta,
        setTempRet0: Wa,
        getTempRet0: Xa,
        dynCall_iiii: _c,
        dynCall_viiiii: $c,
        dynCall_vi: ad,
        dynCall_ii: bd,
        dynCall_viiiiii: cd,
        dynCall_iii: dd,
        dynCall_viiii: ed
    };
}(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _bidi_getParagraphEndIndex = Module['_bidi_getParagraphEndIndex'] = asm['_bidi_getParagraphEndIndex'];
var ___cxa_can_catch = Module['___cxa_can_catch'] = asm['___cxa_can_catch'];
var _free = Module['_free'] = asm['_free'];
var runPostSets = Module['runPostSets'] = asm['runPostSets'];
var ___cxa_is_pointer_type = Module['___cxa_is_pointer_type'] = asm['___cxa_is_pointer_type'];
var _i64Add = Module['_i64Add'] = asm['_i64Add'];
var _bidi_getLine = Module['_bidi_getLine'] = asm['_bidi_getLine'];
var _i64Subtract = Module['_i64Subtract'] = asm['_i64Subtract'];
var _memset = Module['_memset'] = asm['_memset'];
var _malloc = Module['_malloc'] = asm['_malloc'];
var _memcpy = Module['_memcpy'] = asm['_memcpy'];
var _ushape_arabic = Module['_ushape_arabic'] = asm['_ushape_arabic'];
var _bitshift64Lshr = Module['_bitshift64Lshr'] = asm['_bitshift64Lshr'];
var _emscripten_replace_memory = Module['_emscripten_replace_memory'] = asm['_emscripten_replace_memory'];
var _bidi_processText = Module['_bidi_processText'] = asm['_bidi_processText'];
var _bitshift64Shl = Module['_bitshift64Shl'] = asm['_bitshift64Shl'];
var dynCall_iiii = Module['dynCall_iiii'] = asm['dynCall_iiii'];
var dynCall_viiiii = Module['dynCall_viiiii'] = asm['dynCall_viiiii'];
var dynCall_vi = Module['dynCall_vi'] = asm['dynCall_vi'];
var dynCall_ii = Module['dynCall_ii'] = asm['dynCall_ii'];
var dynCall_viiiiii = Module['dynCall_viiiiii'] = asm['dynCall_viiiiii'];
var dynCall_iii = Module['dynCall_iii'] = asm['dynCall_iii'];
var dynCall_viiii = Module['dynCall_viiii'] = asm['dynCall_viiii'];
Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];
function ExitStatus(status) {
    this.name = 'ExitStatus';
    this.message = 'Program terminated with exit(' + status + ')';
    this.status = status;
}
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
    if (!Module['calledRun'])
        run();
    if (!Module['calledRun'])
        dependenciesFulfilled = runCaller;
};
Module['callMain'] = Module.callMain = function callMain(args) {
    args = args || [];
    ensureInitRuntime();
    var argc = args.length + 1;
    function pad() {
        for (var i = 0; i < 4 - 1; i++) {
            argv.push(0);
        }
    }
    var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL)];
    pad();
    for (var i = 0; i < argc - 1; i = i + 1) {
        argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
        pad();
    }
    argv.push(0);
    argv = allocate(argv, 'i32', ALLOC_NORMAL);
    try {
        var ret = Module['_main'](argc, argv, 0);
        exit(ret, true);
    } catch (e) {
        if (e instanceof ExitStatus) {
            return;
        } else if (e == 'SimulateInfiniteLoop') {
            Module['noExitRuntime'] = true;
            return;
        } else {
            if (e && typeof e === 'object' && e.stack)
                Module.printErr('exception thrown: ' + [
                    e,
                    e.stack
                ]);
            throw e;
        }
    } finally {
        calledMain = true;
    }
};
function run(args) {
    args = args || Module['arguments'];
    if (preloadStartTime === null)
        preloadStartTime = Date.now();
    if (runDependencies > 0) {
        return;
    }
    preRun();
    if (runDependencies > 0)
        return;
    if (Module['calledRun'])
        return;
    function doRun() {
        if (Module['calledRun'])
            return;
        Module['calledRun'] = true;
        if (ABORT)
            return;
        ensureInitRuntime();
        preMain();
        if (Module['onRuntimeInitialized'])
            Module['onRuntimeInitialized']();
        if (Module['_main'] && shouldRunNow)
            Module['callMain'](args);
        postRun();
    }
    if (Module['setStatus']) {
        Module['setStatus']('Running...');
        setTimeout(function () {
            setTimeout(function () {
                Module['setStatus']('');
            }, 1);
            doRun();
        }, 1);
    } else {
        doRun();
    }
}
Module['run'] = Module.run = run;
function exit(status, implicit) {
    if (implicit && Module['noExitRuntime']) {
        return;
    }
    if (Module['noExitRuntime']) {
    } else {
        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;
        exitRuntime();
        if (Module['onExit'])
            Module['onExit'](status);
    }
    if (ENVIRONMENT_IS_NODE) {
        process['stdout']['once']('drain', function () {
            process['exit'](status);
        });
        console.log(' ');
        setTimeout(function () {
            process['exit'](status);
        }, 500);
    } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
        quit(status);
    }
    throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
    if (what !== undefined) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what);
    } else {
        what = '';
    }
    ABORT = true;
    EXITSTATUS = 1;
    var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';
    var output = 'abort(' + what + ') at ' + stackTrace() + extra;
    if (abortDecorators) {
        abortDecorators.forEach(function (decorator) {
            output = decorator(output, what);
        });
    }
    throw output;
}
Module['abort'] = Module.abort = abort;
if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function')
        Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
        Module['preInit'].pop()();
    }
}
var shouldRunNow = true;
if (Module['noInitialRun']) {
    shouldRunNow = false;
}
Module['noExitRuntime'] = true;
run();
'use strict';

function applyArabicShaping(input) {
    if (!input)
        { return input; }

    var nDataBytes = (input.length + 1) * 2;
    var stringInputPtr = Module._malloc(nDataBytes);
    stringToUTF16(input, stringInputPtr, nDataBytes);
    var returnStringPtr = Module.ccall('ushape_arabic', 'number', ['number', 'number'], [stringInputPtr, input.length]);
    Module._free(stringInputPtr);

    if (returnStringPtr === 0)
        { return input; }

    var result = UTF16ToString(returnStringPtr);
    Module._free(returnStringPtr);

    return result;
}

function mergeParagraphLineBreakPoints(lineBreakPoints, paragraphCount) {
    var mergedParagraphLineBreakPoints = [];

    for (var i = 0; i < paragraphCount; i++) {
        var paragraphEndIndex = Module.ccall('bidi_getParagraphEndIndex', 'number', ['number'], [i]);
        // TODO: Handle error?

        for (var i$1 = 0, list = lineBreakPoints; i$1 < list.length; i$1 += 1) {
            var lineBreakPoint = list[i$1];

            if (lineBreakPoint < paragraphEndIndex &&
                (!mergedParagraphLineBreakPoints[mergedParagraphLineBreakPoints.length - 1] || lineBreakPoint > mergedParagraphLineBreakPoints[mergedParagraphLineBreakPoints.length - 1]))
                { mergedParagraphLineBreakPoints.push(lineBreakPoint); }
        }
        mergedParagraphLineBreakPoints.push(paragraphEndIndex);
    }

    for (var i$2 = 0, list$1 = lineBreakPoints; i$2 < list$1.length; i$2 += 1) {
        var lineBreakPoint$1 = list$1[i$2];

        if (lineBreakPoint$1 > mergedParagraphLineBreakPoints[mergedParagraphLineBreakPoints.length - 1])
            { mergedParagraphLineBreakPoints.push(lineBreakPoint$1); }
    }

    return mergedParagraphLineBreakPoints;
}

function processBidirectionalText(input, lineBreakPoints) {
    if (!input) {
        return [input];
    }

    var nDataBytes = (input.length + 1) * 2;
    var stringInputPtr = Module._malloc(nDataBytes);
    stringToUTF16(input, stringInputPtr, nDataBytes);
    var paragraphCount = Module.ccall('bidi_processText', 'number', ['number', 'number'], [stringInputPtr, input.length]);

    if (paragraphCount === 0) {
        Module._free(stringInputPtr);
        return [input]; // TODO: throw exception?
    }

    var mergedParagraphLineBreakPoints = mergeParagraphLineBreakPoints(lineBreakPoints, paragraphCount);

    var startIndex = 0;
    var lines = [];

    for (var i = 0, list = mergedParagraphLineBreakPoints; i < list.length; i += 1) {
        var lineBreakPoint = list[i];

        var returnStringPtr = Module.ccall('bidi_getLine', 'number', ['number', 'number'], [startIndex, lineBreakPoint]);

        if (returnStringPtr === 0) {
            Module._free(stringInputPtr);
            return []; // TODO: throw exception?
        }

        lines.push(UTF16ToString(returnStringPtr));
        Module._free(returnStringPtr);

        startIndex = lineBreakPoint;
    }

    Module._free(stringInputPtr); // Input string must live until getLine calls are finished

    return lines;
}

module.exports.applyArabicShaping = applyArabicShaping;
module.exports.processBidirectionalText = processBidirectionalText;

})();
